{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { NativeBaseProvider, Box, Button, ScrollView, Stack, Center, Accordion, Text, Divider, List, Image, PresenceTransition, Pressable } from 'native-base';\nimport React, { useState, useEffect } from 'react';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var ScanBarcode = function ScanBarcode() {\n  var navigation = useNavigation({\n    navigation: navigation\n  });\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    var gtin = data;\n    navigation.navigate('Product Detail', {\n      gtin: gtin\n    });\n  };\n\n  if (hasPermission === null) {\n    return _jsx(Text, {\n      children: \"Requesting for camera permission\"\n    });\n  }\n\n  if (hasPermission === false) {\n    return _jsx(Text, {\n      children: \"No access to camera\"\n    });\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(BarCodeScanner, {\n      onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      }\n    }), scanned && _jsx(Button, {\n      w: \"5/6\",\n      backgroundColor: \"#fff\",\n      style: {\n        borderRadius: 20,\n        borderColor: \"#fff\",\n        borderWidth: 2,\n        position: \"absolute\",\n        bottom: 20\n      },\n      onPress: function onPress() {\n        return setScanned(false);\n      },\n      children: _jsx(Text, {\n        bold: true,\n        color: \"#1FAA8F\",\n        children: \"Scan again\"\n      })\n    })]\n  });\n};\nexport default (function () {\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Center, {\n      flex: 1,\n      children: _jsx(ScanBarcode, {})\n    })\n  });\n});","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/screens/product/ScanBarcodeScreen.js"],"names":["NativeBaseProvider","Box","Button","ScrollView","Stack","Center","Accordion","Text","Divider","List","Image","PresenceTransition","Pressable","React","useState","useEffect","BarCodeScanner","useNavigation","ScanBarcode","navigation","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","gtin","navigate","undefined","height","width","borderRadius","borderColor","borderWidth","position","bottom"],"mappings":";;AAAA,SAASA,kBAAT,EAA6BC,GAA7B,EAAkCC,MAAlC,EAA0CC,UAA1C,EAAsDC,KAAtD,EAA6DC,MAA7D,EAAqEC,SAArE,EAAgFC,IAAhF,EAAsFC,OAAtF,EAA+FC,IAA/F,EAAqGC,KAArG,EAA4GC,kBAA5G,EAAgIC,SAAhI,QAAiJ,aAAjJ;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAE/B,MAAMC,UAAU,GAAGF,aAAa,CAAC;AAACE,IAAAA,UAAU,EAAVA;AAAD,GAAD,CAAhC;;AAEA,kBAA0CL,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOM,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BP,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BC,cAAc,CAACQ,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AAOA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,QAAIM,IAAI,GAAGD,IAAX;AACAT,IAAAA,UAAU,CAACW,QAAX,CAAoB,gBAApB,EAAsC;AAACD,MAAAA,IAAI,EAAJA;AAAD,KAAtC;AACD,GALD;;AAOA,MAAIT,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,KAAC,IAAD;AAAA;AAAA,MAAP;AACD;;AAED,SACI;AAAA,eACE,KAAC,cAAD;AACA,MAAA,gBAAgB,EAAEE,OAAO,GAAGS,SAAH,GAAeL,oBADxC;AAEA,MAAA,KAAK,EAAE;AAAEM,QAAAA,MAAM,EAAC,MAAT;AAAiBC,QAAAA,KAAK,EAAC;AAAvB;AAFP,MADF,EAIEX,OAAO,IAAI,KAAC,MAAD;AAAQ,MAAA,CAAC,EAAC,KAAV;AAAgB,MAAA,eAAe,EAAC,MAAhC;AAAuC,MAAA,KAAK,EAAE;AAACY,QAAAA,YAAY,EAAC,EAAd;AAAkBC,QAAAA,WAAW,EAAC,MAA9B;AAAsCC,QAAAA,WAAW,EAAC,CAAlD;AAAqDC,QAAAA,QAAQ,EAAC,UAA9D;AAA0EC,QAAAA,MAAM,EAAC;AAAjF,OAA9C;AAAoI,MAAA,OAAO,EAAE;AAAA,eAAMf,UAAU,CAAC,KAAD,CAAhB;AAAA,OAA7I;AAAA,gBAAsK,KAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,KAAK,EAAC,SAAjB;AAAA;AAAA;AAAtK,MAJb;AAAA,IADJ;AASD,CArCM;AAwCP,gBAAe,YAAM;AACjB,SACE,KAAC,kBAAD;AAAA,cACE,KAAC,MAAD;AAAQ,MAAA,IAAI,EAAE,CAAd;AAAA,gBACE,KAAC,WAAD;AADF;AADF,IADF;AAOH,CARD","sourcesContent":["import { NativeBaseProvider, Box, Button, ScrollView, Stack, Center, Accordion, Text, Divider, List, Image, PresenceTransition, Pressable } from 'native-base';\nimport React, { useState, useEffect } from 'react';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { useNavigation } from '@react-navigation/native';\n\nexport const ScanBarcode = () => {\n  \n  const navigation = useNavigation({navigation}); \n\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    // alert(`Bar code with type ${type} and data ${data} has been scanned!`);\n    var gtin = data;\n    navigation.navigate('Product Detail', {gtin});\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  return (\n      <>\n        <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={{ height:\"100%\", width:\"100%\"}}/>\n       {scanned && <Button w=\"5/6\" backgroundColor=\"#fff\" style={{borderRadius:20, borderColor:\"#fff\", borderWidth:2, position:\"absolute\", bottom:20}} onPress={() => setScanned(false)}><Text bold color=\"#1FAA8F\">Scan again</Text></Button>}\n      </>\n\n  );\n};\n\n\nexport default () => {\n    return (\n      <NativeBaseProvider>\n        <Center flex={1} >\n          <ScanBarcode />\n        </Center>\n      </NativeBaseProvider>\n    )\n};"]},"metadata":{},"sourceType":"module"}