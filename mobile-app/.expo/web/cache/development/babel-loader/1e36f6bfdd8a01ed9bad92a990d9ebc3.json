{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"emit\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport NavigationBuilderContext from \"./NavigationBuilderContext\";\nexport default function useNavigationCache(_ref) {\n  var state = _ref.state,\n      getState = _ref.getState,\n      navigation = _ref.navigation,\n      _setOptions = _ref.setOptions,\n      router = _ref.router,\n      emitter = _ref.emitter;\n\n  var _React$useContext = React.useContext(NavigationBuilderContext),\n      stackRef = _React$useContext.stackRef;\n\n  var cache = React.useMemo(function () {\n    return {\n      current: {}\n    };\n  }, [getState, navigation, _setOptions, router, emitter]);\n\n  var actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n\n  cache.current = state.routes.reduce(function (acc, route) {\n    var previous = cache.current[route.key];\n\n    if (previous) {\n      acc[route.key] = previous;\n    } else {\n      var emit = navigation.emit,\n          rest = _objectWithoutProperties(navigation, _excluded);\n\n      var _dispatch = function dispatch(thunk) {\n        var action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch(_objectSpread({\n            source: route.key\n          }, action));\n        }\n      };\n\n      var withStack = function withStack(callback) {\n        var isStackSet = false;\n\n        try {\n          if (process.env.NODE_ENV !== 'production' && stackRef && !stackRef.current) {\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      var helpers = Object.keys(actions).reduce(function (acc, name) {\n        acc[name] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          return withStack(function () {\n            return _dispatch(actions[name].apply(actions, args));\n          });\n        };\n\n        return acc;\n      }, {});\n      acc[route.key] = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, rest), helpers), emitter.create(route.key)), {}, {\n        dispatch: function dispatch(thunk) {\n          return withStack(function () {\n            return _dispatch(thunk);\n          });\n        },\n        getParent: function getParent(id) {\n          if (id !== undefined && id === rest.getId()) {\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: function setOptions(options) {\n          return _setOptions(function (o) {\n            return _objectSpread(_objectSpread({}, o), {}, _defineProperty({}, route.key, _objectSpread(_objectSpread({}, o[route.key]), options)));\n          });\n        },\n        isFocused: function isFocused() {\n          var state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          return navigation ? navigation.isFocused() : true;\n        }\n      });\n    }\n\n    return acc;\n  }, {});\n  return cache.current;\n}","map":{"version":3,"sources":["useNavigationCache.tsx"],"names":["emitter","stackRef","React","cache","current","actions","router","CommonActions","previous","route","acc","rest","dispatch","thunk","action","getState","navigation","source","withStack","callback","isStackSet","process","helpers","args","getParent","id","setOptions","options","o","isFocused","state"],"mappings":";;;;;;;;AAAA,SAAA,aAAA,QAAA,2BAAA;AAOA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA;AAwCA,eAAe,SAAA,kBAAA,CAAA,IAAA,EAWc;AAP3B,MAAA,KAAA,GAO2B,IAP3B,CAAA,KAAA;AAAA,MAAA,QAAA,GAO2B,IAP3B,CAAA,QAAA;AAAA,MAAA,UAAA,GAO2B,IAP3B,CAAA,UAAA;AAAA,MAAA,WAAA,GAO2B,IAP3B,CAAA,UAAA;AAAA,MAAA,MAAA,GAO2B,IAP3B,CAAA,MAAA;AAAA,MAMAA,OANA,GAO2B,IAP3B,CAMAA,OANA;;AAQA,0BAAqBE,KAAK,CAALA,UAAAA,CADM,wBACNA,CAArB;AAAA,MAAQD,QAAR,qBAAQA,QAAR;;AAKA,MAAME,KAAK,GAAG,KAAK,CAAL,OAAA,CACZ;AAAA,WAAO;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAP;AAAA,GADY,EAGZ,CAAA,QAAA,EAAA,UAAA,EAAA,WAAA,EAAA,MAAA,EAHF,OAGE,CAHY,CAAd;;AAMA,MAAMC,OAAO,mCACRC,MAAM,CADK,cAAH,GAERC,aAFQ,CAAb;;AAKAJ,EAAAA,KAAK,CAALA,OAAAA,GAAgB,KAAK,CAAL,MAAA,CAAA,MAAA,CAEd,UAAA,GAAA,EAAA,KAAA,EAAgB;AAChB,QAAMK,QAAQ,GAAGL,KAAK,CAALA,OAAAA,CAAcM,KAAK,CAApC,GAAiBN,CAAjB;;AAMA,QAAA,QAAA,EAAc;AAEZO,MAAAA,GAAG,CAACD,KAAK,CAATC,GAAG,CAAHA,GAAAA,QAAAA;AAFF,KAAA,MAGO;AAEL,UAAM,IAAN,GAAA,UAAA,CAAM,IAAN;AAAA,UAAiBC,IAAjB,4BAAA,UAAA;;AAEA,UAAMC,SAAQ,GAAIC,SAAZD,QAAYC,CAAAA,KAAD,EAAkB;AACjC,YAAMC,MAAM,GAAG,OAAA,KAAA,KAAA,UAAA,GAA8BD,KAAK,CAACE,QAApC,EAAmC,CAAnC,GAAf,KAAA;;AAEA,YAAID,MAAM,IAAV,IAAA,EAAoB;AAClBE,UAAAA,UAAU,CAAVA,QAAAA;AAAsBC,YAAAA,MAAM,EAAER,KAAK,CAAf;AAApBO,aAA4CF,MAA5CE;AACD;AALH,OAAA;;AAQA,UAAME,SAAS,GAAIC,SAAbD,SAAaC,CAAAA,QAAD,EAA0B;AAC1C,YAAIC,UAAU,GAAd,KAAA;;AAEA,YAAI;AACF,cACEC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IAAAA,QAAAA,IAEA,CAACpB,QAAQ,CAHX,OAAA,EAIE;AAEAA,YAAAA,QAAQ,CAARA,OAAAA,GAAmB,IAAA,KAAA,GAAnBA,KAAAA;AACAmB,YAAAA,UAAU,GAAVA,IAAAA;AACD;;AAEDD,UAAAA,QAAQ;AAXV,SAAA,SAYU;AACR,cAAIC,UAAU,IAAd,QAAA,EAA4B;AAC1BnB,YAAAA,QAAQ,CAARA,OAAAA,GAAAA,SAAAA;AACD;AACF;AAnBH,OAAA;;AAsBA,UAAMqB,OAAO,GAAG,MAAM,CAAN,IAAA,CAAA,OAAA,EAAA,MAAA,CACd,UAAA,GAAA,EAAA,IAAA,EAAe;AACbZ,QAAAA,GAAG,CAAHA,IAAG,CAAHA,GAAY,YAAA;AAAA,eAAA,IAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAIa,IAAJ,GAAA,IAAA,KAAA,CAAA,IAAA,CAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,IAAA,EAAA,IAAA,EAAA,EAAA;AAAIA,YAAAA,IAAJ,CAAA,IAAA,CAAIA,GAAJ,SAAA,CAAA,IAAA,CAAIA;AAAJ;;AAAA,iBACVL,SAAS,CAAC;AAAA,mBAERN,SAAQ,CAACP,OAAO,CAAPA,IAAO,CAAPA,OAAAA,OAAO,EAHR,IAGQ,CAAR,CAFA;AAAA,WAAD,CADC;AAAZK,SAAAA;;AAMA,eAAA,GAAA;AARY,OAAA,EAAhB,EAAgB,CAAhB;AAaAA,MAAAA,GAAG,CAACD,KAAK,CAATC,GAAG,CAAHA,+DAAiB,IAAjBA,GAAiB,OAAjBA,GAIMV,OAAO,CAAPA,MAAAA,CAAeS,KAAK,CAJT,GAIXT,CAJNU;AAKEE,QAAAA,QAAQ,EAAGC,kBAAAA,KAAD;AAAA,iBAAkBK,SAAS,CAAC;AAAA,mBAAMN,SAAQ,CALrC,KAKqC,CAAd;AAAA,WAAD,CAA3B;AAAA,SALZF;AAMEc,QAAAA,SAAS,EAAGC,mBAAAA,EAAD,EAAiB;AAC1B,cAAIA,EAAE,KAAFA,SAAAA,IAAoBA,EAAE,KAAKd,IAAI,CAAnC,KAA+BA,EAA/B,EAA6C;AAG3C,mBAAOD,GAAG,CAACD,KAAK,CAAhB,GAAU,CAAV;AACD;;AAED,iBAAOE,IAAI,CAAJA,SAAAA,CAAP,EAAOA,CAAP;AAba,SAAjBD;AAeEgB,QAAAA,UAAU,EAAGC,oBAAAA,OAAD;AAAA,iBACVD,WAAU,CAAEE,UAAAA,CAAD;AAAA,mDAAQ,CAAR,2BAERnB,KAAK,CAAN,GAFS,kCAESmB,CAAC,CAACnB,KAAK,CAAZ,GAAM,CAFV,GAE0BkB,OAF1B;AAAA,WAAD,CADA;AAAA,SAfdjB;AAoBEmB,QAAAA,SAAS,EAAE,qBAAM;AACf,cAAMC,KAAK,GAAGf,QAAd,EAAA;;AAEA,cAAIe,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAlBA,KAAAA,EAAAA,GAAAA,KAAkCrB,KAAK,CAA3C,GAAA,EAAiD;AAC/C,mBAAA,KAAA;AAJa;;AASf,iBAAOO,UAAU,GAAGA,UAAU,CAAb,SAAGA,EAAH,GAAjB,IAAA;AACD;AA9BHN;AAgCD;;AAED,WAAA,GAAA;AA7Fc,GAAA,EAAhBP,EAAgB,CAAhBA;AAgGA,SAAOA,KAAK,CAAZ,OAAA;AACD","sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<\n    ParamListBase,\n    string,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap\n  >\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        getParent: (id?: string) => {\n          if (id !== undefined && id === rest.getId()) {\n            // If the passed id is the same as the current navigation id,\n            // we return the cached navigation object for the relevant route\n            return acc[route.key];\n          }\n\n          return rest.getParent(id);\n        },\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]},"metadata":{},"sourceType":"module"}