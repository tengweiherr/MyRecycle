{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"columns\", \"space\", \"spacingX\", \"spacingY\", \"minChildWidth\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Box, HStack, VStack } from \"../../primitives\";\nimport { useThemeProps } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar DEBUG_STYLES = false ? {\n  rows: {\n    borderWidth: '1px'\n  },\n  cols: {\n    borderWidth: '1px'\n  }\n} : {\n  rows: {},\n  cols: {}\n};\n\nvar SimpleGrid = function SimpleGrid(props, ref) {\n  var _useThemeProps = useThemeProps('SimpleGrid', props),\n      columns = _useThemeProps.columns,\n      space = _useThemeProps.space,\n      spacingX = _useThemeProps.spacingX,\n      spacingY = _useThemeProps.spacingY,\n      minChildWidth = _useThemeProps.minChildWidth,\n      children = _useThemeProps.children,\n      remainingProps = _objectWithoutProperties(_useThemeProps, _excluded);\n\n  if (useHasResponsiveProps(props)) {\n    return React.createElement(React.Fragment, null);\n  }\n\n  var cellSpacing = space !== null && space !== void 0 ? space : 0;\n  var cellSpacingX = spacingX !== null && spacingX !== void 0 ? spacingX : cellSpacing;\n  var cellSpacingY = spacingY !== null && spacingY !== void 0 ? spacingY : cellSpacing;\n  var childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    var rowSlices = [];\n\n    for (var i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return React.createElement(VStack, _extends({}, DEBUG_STYLES.rows, {\n      space: cellSpacingY\n    }, remainingProps, {\n      ref: ref\n    }), rowSlices.map(function (row, rowIndex) {\n      return React.createElement(HStack, {\n        space: cellSpacingX,\n        key: rowIndex\n      }, row.map(function (col) {\n        return React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          key: col.key\n        }), col);\n      }));\n    }));\n  } else if (minChildWidth) {\n      return React.createElement(Box, _extends({\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        justifyContent: \"center\"\n      }, remainingProps, {\n        ref: ref\n      }), childrenArray.map(function (col) {\n        return React.createElement(Box, _extends({}, DEBUG_STYLES.cols, {\n          mx: cellSpacingX,\n          my: cellSpacingY,\n          key: col.key,\n          minWidth: minChildWidth\n        }), col);\n      }));\n    }\n\n  return React.createElement(React.Fragment, null);\n};\n\nexport default React.memo(React.forwardRef(SimpleGrid));","map":{"version":3,"sources":["SimpleGrid.tsx"],"names":["DEBUG_STYLES","rows","borderWidth","cols","SimpleGrid","remainingProps","useThemeProps","useHasResponsiveProps","cellSpacing","space","cellSpacingX","spacingX","cellSpacingY","spacingY","childrenArray","React","rowSlices","i","ref","rowIndex","col","key","minChildWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Box, HStack, VStack } from '../../primitives';\nimport type { ISimpleGridProps } from './types';\n// const isDebug = process.env.NODE_ENV !== 'production';\nimport { useThemeProps } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst DEBUG_STYLES = false\n  ? {\n      rows: {\n        borderWidth: '1px',\n      },\n      cols: {\n        borderWidth: '1px',\n      },\n    }\n  : {\n      rows: {},\n      cols: {},\n    };\n\nconst SimpleGrid = (props: ISimpleGridProps, ref?: any): JSX.Element => {\n  const {\n    columns,\n    space,\n    spacingX,\n    spacingY,\n    minChildWidth,\n    children,\n    ...remainingProps\n  } = useThemeProps('SimpleGrid', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return <></>;\n  }\n  let cellSpacing = space ?? 0;\n  let cellSpacingX = spacingX ?? cellSpacing;\n  let cellSpacingY = spacingY ?? cellSpacing;\n\n  const childrenArray = React.Children.toArray(children);\n\n  if (columns) {\n    let rowSlices = [];\n    for (let i = 0; i < childrenArray.length; i = i + columns) {\n      rowSlices.push(childrenArray.slice(i, i + columns));\n    }\n\n    return (\n      <VStack\n        {...DEBUG_STYLES.rows}\n        space={cellSpacingY}\n        {...remainingProps}\n        ref={ref}\n      >\n        {rowSlices.map((row, rowIndex) => {\n          return (\n            <HStack space={cellSpacingX} key={rowIndex}>\n              {row.map((col: any) => {\n                return (\n                  <Box {...DEBUG_STYLES.cols} key={col.key}>\n                    {col}\n                  </Box>\n                );\n              })}\n            </HStack>\n          );\n        })}\n      </VStack>\n    );\n  }\n  // Needs more work for empty spacing i.e. auto-fit. Current workaround is to use wrap and let the columns be created dynamically\n  // https://css-tricks.com/auto-sizing-columns-css-grid-auto-fill-vs-auto-fit/\n  else if (minChildWidth) {\n    return (\n      <Box\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        justifyContent=\"center\"\n        {...remainingProps}\n        ref={ref}\n      >\n        {childrenArray.map((col: any) => {\n          return (\n            <Box\n              {...DEBUG_STYLES.cols}\n              mx={cellSpacingX}\n              my={cellSpacingY}\n              key={col.key}\n              minWidth={minChildWidth}\n            >\n              {col}\n            </Box>\n          );\n        })}\n      </Box>\n    );\n  }\n\n  return <></>;\n};\nexport default React.memo(React.forwardRef(SimpleGrid));\n"]},"metadata":{},"sourceType":"module"}