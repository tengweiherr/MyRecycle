{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"focusable\", \"stroke\", \"color\", \"size\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from \"../../../hooks\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { Svg, G } from \"./nbSvg\";\nimport { questionOutlineIconPath } from \"./Icons/questionIconPath\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar SVG = makeStyledComponent(Svg);\n\nvar SVGIcon = function SVGIcon(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Icon', props),\n      focusable = _usePropsResolution.focusable,\n      stroke = _usePropsResolution.stroke,\n      color = _usePropsResolution.color,\n      size = _usePropsResolution.size,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var strokeHex = useToken('colors', stroke || '');\n  var colorHex = useToken('colors', color || '');\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(SVG, _extends({}, resolvedProps, {\n    size: size,\n    color: colorHex,\n    stroke: strokeHex,\n    focusable: focusable,\n    accessibilityRole: \"image\",\n    ref: ref\n  }), React.Children.count(children) > 0 ? React.createElement(G, null, React.Children.map(children, function (child, i) {\n    var _child$key;\n\n    return React.createElement(ChildPath, _extends({\n      key: (_child$key = child === null || child === void 0 ? void 0 : child.key) !== null && _child$key !== void 0 ? _child$key : i,\n      element: child\n    }, child === null || child === void 0 ? void 0 : child.props));\n  })) : questionOutlineIconPath);\n};\n\nvar ChildPath = function ChildPath(_ref2) {\n  var element = _ref2.element,\n      fill = _ref2.fill,\n      pathStroke = _ref2.stroke;\n  var pathStrokeColor = useToken('colors', pathStroke || '');\n  var fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor\n  });\n};\n\nexport default memo(forwardRef(SVGIcon));","map":{"version":3,"sources":["SVGIcon.tsx"],"names":["SVG","makeStyledComponent","SVGIcon","props","resolvedProps","usePropsResolution","strokeHex","useToken","stroke","colorHex","color","useHasResponsiveProps","ref","child","ChildPath","pathStroke","pathStrokeColor","fillColor","fill","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,QAAA,EAAA,kBAAA;AACA,SAAA,mBAAA;AACA,SAAA,GAAA,EAAA,CAAA;AAEA,SAAA,uBAAA;AACA,SAAA,qBAAA;AAEA,IAAMA,GAAG,GAAGC,mBAAmB,CAA/B,GAA+B,CAA/B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAA,GAAA,EAAkD;AAAA,MAAjD,QAAiD,QAAjD,QAAiD;AAAA,MAAlCC,KAAkC;;AAChE,4BAMIE,kBAAkB,CAAA,MAAA,EANtB,KAMsB,CANtB;AAAA,MAAM,SAAN,uBAAM,SAAN;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,IAAN,uBAAM,IAAN;AAAA,MAKKD,aALL;;AAOA,MAAME,SAAS,GAAGC,QAAQ,CAAA,QAAA,EAAWC,MAAM,IAA3C,EAA0B,CAA1B;AACA,MAAMC,QAAQ,GAAGF,QAAQ,CAAA,QAAA,EAAWG,KAAK,IATuB,EASvC,CAAzB;;AAEA,MAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAYE,IAAA,IAAI,EAZN,IAAA;AAaE,IAAA,KAAK,EAbP,QAAA;AAcE,IAAA,MAAM,EAdR,SAAA;AAeE,IAAA,SAAS,EAfX,SAAA;AAgBE,IAAA,iBAAiB,EAhBnB,OAAA;AAkBE,IAAA,GAAG,EAAEC;AAlBP,GAAA,CAAA,EAoBG,KAAK,CAAL,QAAA,CAAA,KAAA,CAAA,QAAA,IAAA,CAAA,GACC,KAAA,CAAA,aAAA,CAAA,CAAA,EAAA,IAAA,EACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,QAAA,EAA6B,UAAA,KAAA,EAAA,CAAA,EAAA;AAAA,QAAA,UAAA;;AAAA,WAC5B,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,MAAA,GAAG,EAAA,CAAA,UAAA,GAAEC,KAAF,KAAA,IAAEA,IAAAA,KAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,KAAK,CAAP,GAAA,MAAA,IAAA,IAAA,UAAA,KAAA,KAAA,CAAA,GAAA,UAAA,GADL,CAAA;AAEE,MAAA,OAAO,EAAEA;AAFX,KAAA,EAGMA,KAHN,KAAA,IAGMA,IAAAA,KAHN,KAAA,KAAA,CAGMA,GAHN,KAAA,CAGMA,GAAAA,KAAK,CAJiB,KAC5B,CAAA,CAD4B;AAFjC,GAEI,CADH,CADD,GArBL,uBACE,CADF;AAdF,CAAA;;AAmDA,IAAMC,SAAS,GAAG,SAAZA,SAAY,QAAgD;AAAA,MAA/C,OAA+C,SAA/C,OAA+C;AAAA,MAA/C,IAA+C,SAA/C,IAA+C;AAAA,MAAtBC,UAAsB,SAA9BP,MAA8B;AAChE,MAAMQ,eAAe,GAAGT,QAAQ,CAAA,QAAA,EAAWQ,UAAU,IAArD,EAAgC,CAAhC;AACA,MAAME,SAAS,GAAGV,QAAQ,CAAA,QAAA,EAAWW,IAAI,IAAzC,EAA0B,CAA1B;;AAEA,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAA,IAAA;AACD;;AAED,SAAO,KAAK,CAAL,YAAA,CAAA,OAAA,EAA4B;AACjCA,IAAAA,IAAI,EAAED,SAAS,GAAA,SAAA,GADkB,cAAA;AAEjCT,IAAAA,MAAM,EAAEQ;AAFyB,GAA5B,CAAP;AARF,CAAA;;AAaA,eAAeG,IAAI,CAACC,UAAU,CAA9B,OAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { Svg, G } from './nbSvg';\nimport type { IIconProps } from './types';\nimport { questionOutlineIconPath } from './Icons/questionIconPath';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst SVG = makeStyledComponent(Svg);\n\nconst SVGIcon = ({ children, ...props }: IIconProps, ref: any) => {\n  const {\n    focusable,\n    stroke,\n    color,\n    size,\n    ...resolvedProps\n  } = usePropsResolution('Icon', props);\n  const strokeHex = useToken('colors', stroke || '');\n  const colorHex = useToken('colors', color || '');\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <SVG\n      {...resolvedProps}\n      // height={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.height, 10)\n      // }\n      // width={\n      //   newProps.size\n      //     ? parseInt(newProps.size, 10)\n      //     : parseInt(newProps.width, 10)\n      // }\n      size={size}\n      color={colorHex}\n      stroke={strokeHex}\n      focusable={focusable}\n      accessibilityRole=\"image\"\n      // style={style}\n      ref={ref}\n    >\n      {React.Children.count(children) > 0 ? (\n        <G>\n          {React.Children.map(children, (child, i) => (\n            <ChildPath\n              key={child?.key ?? i}\n              element={child}\n              {...child?.props}\n            />\n          ))}\n        </G>\n      ) : (\n        questionOutlineIconPath\n      )}\n    </SVG>\n  );\n};\nconst ChildPath = ({ element, fill, stroke: pathStroke }: any) => {\n  const pathStrokeColor = useToken('colors', pathStroke || '');\n  const fillColor = useToken('colors', fill || '');\n\n  if (!element) {\n    return null;\n  }\n\n  return React.cloneElement(element, {\n    fill: fillColor ? fillColor : 'currentColor',\n    stroke: pathStrokeColor,\n  });\n};\nexport default memo(forwardRef(SVGIcon));\n"]},"metadata":{},"sourceType":"module"}