{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nexport function useControllableProp(prop, state) {\n  var _React$useRef = React.useRef(prop !== undefined),\n      isControlled = _React$useRef.current;\n\n  var value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value];\n}\nexport function useControllableState(props) {\n  var valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange;\n\n  var _React$useState = React.useState(defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      valueState = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var isControlled = valueProp !== undefined;\n  var value = isControlled ? valueProp : valueState;\n  var updateValue = React.useCallback(function (next) {\n    var nextValue = typeof next === 'function' ? next(value) : next;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChange && onChange(nextValue);\n  }, [isControlled, onChange, value]);\n  return [value, updateValue];\n}","map":{"version":3,"sources":["useControllableProp.ts"],"names":["current","isControlled","React","prop","value","onChange","valueProp","updateValue","next","nextValue","setValue"],"mappings":";AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAO,SAAA,mBAAA,CAAA,IAAA,EAAA,KAAA,EAA+D;AACpE,sBAAkCE,KAAK,CAALA,MAAAA,CAAaC,IAAI,KAAnD,SAAkCD,CAAlC;AAAA,MAAiBD,YAAjB,iBAAQD,OAAR;;AACA,MAAMI,KAAK,GAAGH,YAAY,IAAI,OAAA,IAAA,KAAhBA,WAAAA,GAAAA,IAAAA,GAAd,KAAA;AACA,SAAO,CAAA,YAAA,EAAP,KAAO,CAAP;AACD;AAyBD,OAAO,SAAA,oBAAA,CAAA,KAAA,EAAsE;AAC3E,MAAM,SAAN,GAAA,KAAA,CAAQG,KAAR;AAAA,MAAM,YAAN,GAAA,KAAA,CAAM,YAAN;AAAA,MAAwCC,QAAxC,GAAA,KAAA,CAAwCA,QAAxC;;AAEA,wBAA+BH,KAAK,CAALA,QAAAA,CAA/B,YAA+BA,CAA/B;AAAA;AAAA,MAAM,UAAN;AAAA,MAAM,QAAN;;AACA,MAAMD,YAAY,GAAGK,SAAS,KAA9B,SAAA;AAEA,MAAMF,KAAK,GAAGH,YAAY,GAAA,SAAA,GAA1B,UAAA;AAEA,MAAMM,WAAW,GAAG,KAAK,CAAL,WAAA,CACjBC,UAAAA,IAAD,EAAe;AACb,QAAMC,SAAS,GAAG,OAAA,IAAA,KAAA,UAAA,GAA6BD,IAAI,CAAjC,KAAiC,CAAjC,GAAlB,IAAA;;AACA,QAAI,CAAJ,YAAA,EAAmB;AACjBE,MAAAA,QAAQ,CAARA,SAAQ,CAARA;AACD;;AACDL,IAAAA,QAAQ,IAAIA,QAAQ,CAApBA,SAAoB,CAApBA;AANgB,GAAA,EAQlB,CAAA,YAAA,EAAA,QAAA,EARF,KAQE,CARkB,CAApB;AAWA,SAAO,CAAA,KAAA,EAAP,WAAO,CAAP;AACD","sourcesContent":["import React from 'react';\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined);\n  const value = isControlled && typeof prop !== 'undefined' ? prop : state;\n  return [isControlled, value] as const;\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T;\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T);\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void;\n  /**\n   * The component name (for warnings)\n   */\n  name?: string;\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const { value: valueProp, defaultValue, onChange } = props;\n\n  const [valueState, setValue] = React.useState(defaultValue as T);\n  const isControlled = valueProp !== undefined;\n\n  const value = isControlled ? (valueProp as T) : valueState;\n\n  const updateValue = React.useCallback(\n    (next: any) => {\n      const nextValue = typeof next === 'function' ? next(value) : next;\n      if (!isControlled) {\n        setValue(nextValue);\n      }\n      onChange && onChange(nextValue);\n    },\n    [isControlled, onChange, value]\n  );\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>];\n}\n"]},"metadata":{},"sourceType":"module"}