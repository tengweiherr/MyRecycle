{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\nimport ServerContext from \"./ServerContext\";\n\nvar createMemoryHistory = function createMemoryHistory() {\n  var index = 0;\n  var items = [];\n  var pending = [];\n\n  var interrupt = function interrupt() {\n    pending.forEach(function (it) {\n      var cb = it.cb;\n\n      it.cb = function () {\n        return cb(true);\n      };\n    });\n  };\n\n  var history = {\n    get index() {\n      var _window$history$state;\n\n      var id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        var _index = items.findIndex(function (item) {\n          return item.id === id;\n        });\n\n        return _index > -1 ? _index : 0;\n      }\n\n      return 0;\n    },\n\n    get: function get(index) {\n      return items[index];\n    },\n    backIndex: function backIndex(_ref) {\n      var path = _ref.path;\n\n      for (var i = index - 1; i >= 0; i--) {\n        var item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    push: function push(_ref2) {\n      var path = _ref2.path,\n          state = _ref2.state;\n      interrupt();\n      var id = nanoid();\n      items = items.slice(0, index + 1);\n      items.push({\n        path: path,\n        state: state,\n        id: id\n      });\n      index = items.length - 1;\n      window.history.pushState({\n        id: id\n      }, '', path);\n    },\n    replace: function replace(_ref3) {\n      var _window$history$state2, _window$history$state3;\n\n      var path = _ref3.path,\n          state = _ref3.state;\n      interrupt();\n      var id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (!items.length || items.findIndex(function (item) {\n        return item.id === id;\n      }) < 0) {\n        items = [{\n          path: path,\n          state: state,\n          id: id\n        }];\n        index = 0;\n      } else {\n        items[index] = {\n          path: path,\n          state: state,\n          id: id\n        };\n      }\n\n      window.history.replaceState({\n        id: id\n      }, '', path);\n    },\n    go: function go(n) {\n      interrupt();\n\n      if (n === 0) {\n        return;\n      }\n\n      index = n < 0 ? Math.max(index - n, 0) : Math.min(index + n, items.length - 1);\n      return new Promise(function (resolve, reject) {\n        var done = function done(interrupted) {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          var title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n\n        pending.push({\n          ref: done,\n          cb: done\n        });\n        var timer = setTimeout(function () {\n          var index = pending.findIndex(function (it) {\n            return it.ref === done;\n          });\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        var onPopState = function onPopState() {\n          var _window$history$state4;\n\n          var id = (_window$history$state4 = window.history.state) === null || _window$history$state4 === void 0 ? void 0 : _window$history$state4.id;\n          var currentIndex = items.findIndex(function (item) {\n            return item.id === id;\n          });\n          index = Math.max(currentIndex, 0);\n          var last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    listen: function listen(listener) {\n      var onPopState = function onPopState() {\n        if (pending.length) {\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return function () {\n        return window.removeEventListener('popstate', onPopState);\n      };\n    }\n  };\n  return history;\n};\n\nvar findMatchingState = function findMatchingState(a, b) {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  var aHistoryLength = a.history ? a.history.length : a.routes.length;\n  var bHistoryLength = b.history ? b.history.length : b.routes.length;\n  var aRoute = a.routes[a.index];\n  var bRoute = b.routes[b.index];\n  var aChildState = aRoute.state;\n  var bChildState = bRoute.state;\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\nvar series = function series(cb) {\n  var handling = false;\n  var queue = [];\n\n  var callback = function callback() {\n    var last;\n    return _regeneratorRuntime.async(function callback$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(cb());\n\n          case 7:\n            _context.prev = 7;\n            handling = false;\n\n            if (queue.length) {\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n\n            return _context.finish(7);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0,, 7, 11]], Promise);\n  };\n\n  return callback;\n};\n\nvar linkingHandlers = [];\nexport default function useLinking(ref, _ref4) {\n  var independent = _ref4.independent,\n      _ref4$enabled = _ref4.enabled,\n      enabled = _ref4$enabled === void 0 ? true : _ref4$enabled,\n      config = _ref4.config,\n      _ref4$getStateFromPat = _ref4.getStateFromPath,\n      getStateFromPath = _ref4$getStateFromPat === void 0 ? getStateFromPathDefault : _ref4$getStateFromPat,\n      _ref4$getPathFromStat = _ref4.getPathFromState,\n      getPathFromState = _ref4$getPathFromStat === void 0 ? getPathFromStateDefault : _ref4$getPathFromStat,\n      _ref4$getActionFromSt = _ref4.getActionFromState,\n      getActionFromState = _ref4$getActionFromSt === void 0 ? getActionFromStateDefault : _ref4$getActionFromSt;\n  React.useEffect(function () {\n    if (\"development\" === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n\n    var handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  var _React$useState = React.useState(createMemoryHistory),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      history = _React$useState2[0];\n\n  var enabledRef = React.useRef(enabled);\n  var configRef = React.useRef(config);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getPathFromStateRef = React.useRef(getPathFromState);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var server = React.useContext(ServerContext);\n  var getInitialState = React.useCallback(function () {\n    var value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      var _location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n\n      var path = _location ? _location.pathname + _location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, []);\n  var previousIndexRef = React.useRef(undefined);\n  var previousStateRef = React.useRef(undefined);\n  var pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(function () {\n    previousIndexRef.current = history.index;\n    return history.listen(function () {\n      var _previousIndexRef$cur;\n\n      var navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      var path = location.pathname + location.search;\n      var index = history.index;\n      var previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n      var record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      var state = getStateFromPathRef.current(path, configRef.current);\n\n      if (state) {\n        var rootState = navigation.getRootState();\n\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n\n        if (index > previousIndex) {\n          var action = getActionFromStateRef.current(state, configRef.current);\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              console.warn(\"An error occurred when trying to handle the link '\" + path + \"': \" + (typeof e === 'object' && e != null && 'message' in e ? e.message : e));\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(function () {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    var getPathForRoute = function getPathForRoute(route, state) {\n      if (route !== null && route !== void 0 && route.path) {\n        var stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n\n        if (stateForPath) {\n          var focusedRoute = findFocusedRoute(stateForPath);\n\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      var state = ref.current.getRootState();\n\n      if (state) {\n        var route = findFocusedRoute(state);\n        var path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({\n          path: path,\n          state: state\n        });\n      }\n    }\n\n    var onStateChange = function onStateChange() {\n      var navigation, previousState, state, pendingPath, route, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n\n      return _regeneratorRuntime.async(function onStateChange$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n\n              if (state) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 7:\n              pendingPath = pendingPopStatePathRef.current;\n              route = findFocusedRoute(state);\n              path = getPathForRoute(route, state);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined;\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = _slicedToArray(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n\n              if (!(previousFocusedState && focusedState && path !== pendingPath)) {\n                _context2.next = 40;\n                break;\n              }\n\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n              if (!(historyDelta > 0)) {\n                _context2.next = 19;\n                break;\n              }\n\n              history.push({\n                path: path,\n                state: state\n              });\n              _context2.next = 38;\n              break;\n\n            case 19:\n              if (!(historyDelta < 0)) {\n                _context2.next = 37;\n                break;\n              }\n\n              nextIndex = history.backIndex({\n                path: path\n              });\n              currentIndex = history.index;\n              _context2.prev = 22;\n\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 28;\n                break;\n              }\n\n              _context2.next = 26;\n              return _regeneratorRuntime.awrap(history.go(nextIndex - currentIndex));\n\n            case 26:\n              _context2.next = 30;\n              break;\n\n            case 28:\n              _context2.next = 30;\n              return _regeneratorRuntime.awrap(history.go(historyDelta));\n\n            case 30:\n              history.replace({\n                path: path,\n                state: state\n              });\n              _context2.next = 35;\n              break;\n\n            case 33:\n              _context2.prev = 33;\n              _context2.t0 = _context2[\"catch\"](22);\n\n            case 35:\n              _context2.next = 38;\n              break;\n\n            case 37:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 38:\n              _context2.next = 41;\n              break;\n\n            case 40:\n              history.replace({\n                path: path,\n                state: state\n              });\n\n            case 41:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[22, 33]], Promise);\n    };\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"sources":["useLinking.tsx"],"names":["getActionFromState","getPathFromState","getStateFromPath","createMemoryHistory","index","items","pending","interrupt","it","cb","history","id","window","item","get","backIndex","path","i","push","state","nanoid","replace","go","n","Math","done","interrupted","clearTimeout","reject","title","resolve","ref","timer","setTimeout","onPopState","currentIndex","last","listen","listener","findMatchingState","a","b","aHistoryLength","bHistoryLength","aRoute","bRoute","aChildState","bChildState","series","handling","queue","callback","linkingHandlers","enabled","getActionFromStateDefault","React","process","console","handler","Symbol","enabledRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","server","getInitialState","location","value","thenable","then","Promise","onfulfilled","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","navigation","previousIndex","record","rootState","r","action","e","getPathForRoute","route","stateForPath","focusedRoute","findFocusedRoute","isEqual","onStateChange","previousState","pendingPath","previousFocusedState","historyDelta","focusedState","nextIndex"],"mappings":"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","sourcesContent":["import {\n  findFocusedRoute,\n  getActionFromState as getActionFromStateDefault,\n  getPathFromState as getPathFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport { nanoid } from 'nanoid/non-secure';\nimport * as React from 'react';\n\nimport ServerContext from './ServerContext';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        items = [{ path, state, id }];\n        index = 0;\n      } else {\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      if (n === 0) {\n        return;\n      }\n\n      // We shouldn't go back more than the 0 index (otherwise we'll exit the page)\n      // Or forward more than the available index (or the app will crash)\n      index =\n        n < 0 ? Math.max(index - n, 0) : Math.min(index + n, items.length - 1);\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex((it) => it.ref === done);\n\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n\n        const onPopState = () => {\n          const id = window.history.state?.id;\n          const currentIndex = items.findIndex((item) => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n};\n\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = <T extends NavigationState>(\n  a: T | undefined,\n  b: T | undefined\n): [T | undefined, T | undefined] => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n\n  const aChildState = aRoute.state as T | undefined;\n  const bChildState = bRoute.state as T | undefined;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (\n    aHistoryLength !== bHistoryLength ||\n    aRoute.key !== bRoute.key ||\n    aChildState === undefined ||\n    bChildState === undefined ||\n    aChildState.key !== bChildState.key\n  ) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = (cb: () => Promise<void>) => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue: (() => Promise<void>)[] = [];\n\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n\n      handling = true;\n\n      await cb();\n    } finally {\n      handling = false;\n\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n\n        last?.();\n      }\n    }\n  };\n\n  return callback;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const server = React.useContext(ServerContext);\n\n  const getInitialState = React.useCallback(() => {\n    let value: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const location =\n        server?.location ??\n        (typeof window !== 'undefined' ? window.location : undefined);\n\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const previousIndexRef = React.useRef<number | undefined>(undefined);\n  const previousStateRef = React.useRef<NavigationState | undefined>(undefined);\n  const pendingPopStatePathRef = React.useRef<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n\n    return history.listen(() => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n\n      const previousIndex = previousIndexRef.current ?? 0;\n\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n\n      if (record?.path === path && record?.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(\n            state,\n            configRef.current\n          );\n\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(\n                `An error occurred when trying to handle the link '${path}': ${\n                  typeof e === 'object' && e != null && 'message' in e\n                    ? // @ts-expect-error: we're already checking for this\n                      e.message\n                    : e\n                }`\n              );\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n\n  React.useEffect(() => {\n    if (!enabled) {\n      return;\n    }\n\n    const getPathForRoute = (\n      route: ReturnType<typeof findFocusedRoute>,\n      state: NavigationState\n    ): string => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route?.path) {\n        const stateForPath = getStateFromPathRef.current(\n          route.path,\n          configRef.current\n        );\n\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n\n          if (\n            focusedRoute &&\n            focusedRoute.name === route.name &&\n            isEqual(focusedRoute.params, route.params)\n          ) {\n            return route.path;\n          }\n        }\n      }\n\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n\n        history.replace({ path, state });\n      }\n    }\n\n    const onStateChange = async () => {\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(\n        previousState,\n        state\n      );\n\n      if (\n        previousFocusedState &&\n        focusedState &&\n        // We should only handle push/pop if path changed from what was in last `popstate`\n        // Otherwise it's likely a change triggered by `popstate`\n        path !== pendingPath\n      ) {\n        const historyDelta =\n          (focusedState.history\n            ? focusedState.history.length\n            : focusedState.routes.length) -\n          (previousFocusedState.history\n            ? previousFocusedState.history.length\n            : previousFocusedState.routes.length);\n\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({ path, state });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({ path });\n          const currentIndex = history.index;\n\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({ path, state });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({ path, state });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({ path, state });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return ref.current?.addListener('state', series(onStateChange));\n  });\n\n  return {\n    getInitialState,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}