{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport React from 'react';\nexport var getResponsiveStylesImpl = function getResponsiveStylesImpl(width) {\n  return function (queries) {\n    if (typeof width === 'number') {\n      var styles = queries.initial ? [StyleSheet.create({\n        initial: StyleSheet.flatten(queries.initial)\n      }).initial] : [];\n\n      if (queries.query) {\n        queries.query.forEach(function (queryRule) {\n          if (queryRule.style) {\n            var flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n            if (typeof queryRule.maxWidth === 'number' && typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  rangeStyle: flattenQueryStyle\n                }).rangeStyle);\n              }\n            } else if (typeof queryRule.minWidth === 'number') {\n              if (width >= queryRule.minWidth) {\n                styles.push(StyleSheet.create({\n                  minWidthStyle: flattenQueryStyle\n                }).minWidthStyle);\n              }\n            } else if (typeof queryRule.maxWidth === 'number') {\n              if (width <= queryRule.maxWidth) {\n                styles.push(StyleSheet.create({\n                  maxWidthStyle: flattenQueryStyle\n                }).maxWidthStyle);\n              }\n            }\n          }\n        });\n        return {\n          styles: styles\n        };\n      }\n    }\n\n    return {};\n  };\n};\nexport var useDimensionsWithEnable = function useDimensionsWithEnable(_ref) {\n  var enable = _ref.enable;\n\n  var _React$useState = React.useState(function () {\n    return Dimensions.get('window');\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      dimensions = _React$useState2[0],\n      setDimensions = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (enable) {\n      function handleChange(_ref2) {\n        var window = _ref2.window;\n\n        if (dimensions.width !== window.width || dimensions.height !== window.height || dimensions.scale !== window.scale || dimensions.fontScale !== window.fontScale) {\n          setDimensions(window);\n        }\n      }\n\n      Dimensions.addEventListener('change', handleChange);\n      handleChange({\n        window: Dimensions.get('window')\n      });\n      return function () {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n\n    return function () {};\n  }, [dimensions, enable]);\n  return dimensions;\n};","map":{"version":3,"sources":["common.ts"],"names":["getResponsiveStylesImpl","width","queries","styles","initial","StyleSheet","queryRule","flattenQueryStyle","rangeStyle","minWidthStyle","maxWidthStyle","useDimensionsWithEnable","enable","React","Dimensions","window","dimensions","setDimensions","handleChange"],"mappings":"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","sourcesContent":["import type {\n  GetResponsiveStylesParams,\n  GetResponsiveStylesReturnType,\n} from './types';\nimport { Dimensions, ScaledSize, StyleSheet } from 'react-native';\nimport React from 'react';\n\nexport const getResponsiveStylesImpl = (width: number) => (\n  queries: GetResponsiveStylesParams\n): GetResponsiveStylesReturnType => {\n  if (typeof width === 'number') {\n    let styles = queries.initial\n      ? [\n          StyleSheet.create({ initial: StyleSheet.flatten(queries.initial) })\n            .initial,\n        ]\n      : [];\n\n    if (queries.query) {\n      queries.query.forEach((queryRule) => {\n        if (queryRule.style) {\n          const flattenQueryStyle = StyleSheet.flatten(queryRule.style);\n\n          if (\n            typeof queryRule.maxWidth === 'number' &&\n            typeof queryRule.minWidth === 'number'\n          ) {\n            if (width >= queryRule.minWidth && width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ rangeStyle: flattenQueryStyle }).rangeStyle\n              );\n            }\n          } else if (typeof queryRule.minWidth === 'number') {\n            if (width >= queryRule.minWidth) {\n              styles.push(\n                StyleSheet.create({ minWidthStyle: flattenQueryStyle })\n                  .minWidthStyle\n              );\n            }\n          } else if (typeof queryRule.maxWidth === 'number') {\n            if (width <= queryRule.maxWidth) {\n              styles.push(\n                StyleSheet.create({ maxWidthStyle: flattenQueryStyle })\n                  .maxWidthStyle\n              );\n            }\n          }\n        }\n      });\n      return { styles };\n    }\n  }\n\n  return {};\n};\n\n// The below implementation is taken from React Native's source and added a flag to conditionally attach/remove listeners\nexport const useDimensionsWithEnable = ({ enable }: { enable?: boolean }) => {\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  React.useEffect(() => {\n    if (enable) {\n      function handleChange({ window }: { window: ScaledSize }) {\n        if (\n          dimensions.width !== window.width ||\n          dimensions.height !== window.height ||\n          dimensions.scale !== window.scale ||\n          dimensions.fontScale !== window.fontScale\n        ) {\n          setDimensions(window);\n        }\n      }\n      Dimensions.addEventListener('change', handleChange);\n      // We might have missed an update between calling `get` in render and\n      // `addEventListener` in this handler, so we set it here. If there was\n      // no change, React will filter out this update as a no-op.\n      handleChange({ window: Dimensions.get('window') });\n\n      return () => {\n        Dimensions.removeEventListener('change', handleChange);\n      };\n    }\n    return () => {};\n  }, [dimensions, enable]);\n  return dimensions;\n};\n"]},"metadata":{},"sourceType":"module"}