{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport { useKeyboardDismissable } from \"../../../hooks\";\nimport { ExitAnimationContext } from \"./ExitAnimationContext\";\nexport function Overlay(_ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      _ref$useRNModalOnAndr = _ref.useRNModalOnAndroid,\n      useRNModalOnAndroid = _ref$useRNModalOnAndr === void 0 ? false : _ref$useRNModalOnAndr,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      _ref$animationPreset = _ref.animationPreset,\n      animationPreset = _ref$animationPreset === void 0 ? 'fade' : _ref$animationPreset,\n      onRequestClose = _ref.onRequestClose,\n      style = _ref.style,\n      unmountOnExit = _ref.unmountOnExit;\n\n  var _React$useState = React.useState(!isOpen),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      exited = _React$useState2[0],\n      setExited = _React$useState2[1];\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : function () {}\n  });\n\n  var styleObj = _objectSpread({}, style);\n\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return React.createElement(ExitAnimationContext.Provider, {\n      value: {\n        exited: exited,\n        setExited: setExited\n      }\n    }, React.createElement(Modal, {\n      transparent: true,\n      visible: isOpen,\n      onRequestClose: onRequestClose,\n      animationType: animationPreset\n    }, children));\n  }\n\n  return React.createElement(OverlayContainer, {\n    style: _objectSpread({}, styleObj)\n  }, React.createElement(ExitAnimationContext.Provider, {\n    value: {\n      exited: exited,\n      setExited: setExited\n    }\n  }, children));\n}","map":{"version":3,"sources":["Overlay.tsx"],"names":["useRNModalOnAndroid","isKeyboardDismissable","animationPreset","unmountOnExit","React","useKeyboardDismissable","enabled","isOpen","callback","onRequestClose","styleObj","style","exited","Platform","setExited"],"mappings":";;;;;;;AACA,SAAA,gBAAA,QAAA,6BAAA;AACA,OAAA,KAAA,MAAA,OAAA;;;AAGA,SAAA,sBAAA;AACA,SAAA,oBAAA;AAcA,OAAO,SAAA,OAAA,OAUW;AAAA,MAVM,QAUN,QAVM,QAUN;AAAA,MAVM,MAUN,QAVM,MAUN;AAAA,mCAPhBA,mBAOgB;AAAA,MAPhBA,mBAOgB,sCAVM,KAUN;AAAA,mCANhBC,qBAMgB;AAAA,MANhBA,qBAMgB,sCAVM,IAUN;AAAA,kCAJhBC,eAIgB;AAAA,MAJhBA,eAIgB,qCAVM,MAUN;AAAA,MAVM,cAUN,QAVM,cAUN;AAAA,MAVM,KAUN,QAVM,KAUN;AAAA,MADhBC,aACgB,QADhBA,aACgB;;AAChB,wBAA4BC,KAAK,CAALA,QAAAA,CAAe,CAA3C,MAA4BA,CAA5B;AAAA;AAAA,MAAM,MAAN;AAAA,MAAM,SAAN;;AAEAC,EAAAA,sBAAsB,CAAC;AACrBC,IAAAA,OAAO,EAAEC,MAAM,IADM,qBAAA;AAErBC,IAAAA,QAAQ,EAAEC,cAAc,GAAA,cAAA,GAAoB,YAAM,CAAE;AAF/B,GAAD,CAAtBJ;;AAIA,MAAMK,QAAQ,qBAAQC,KAAR,CAAd;;AACA,MAAIT,eAAe,KAAnB,OAAA,EAAiC;AAC/BQ,IAAAA,QAAQ,CAARA,QAAAA,GAAAA,QAAAA;AACAA,IAAAA,QAAQ,CAARA,OAAAA,GAAAA,MAAAA;AAFF,GAAA,MAGO;AACLA,IAAAA,QAAQ,CAARA,OAAAA,GAAmBE,MAAM,IAAI,CAAVA,MAAAA,GAAAA,MAAAA,GAAnBF,MAAAA;AACD;;AAED,MAAIP,aAAa,IAAI,CAAjBA,MAAAA,IAAJ,MAAA,EAAwC;AACtC,WAAA,IAAA;AACD;;AAED,MAAIU,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAAJ,mBAAA,EAAsD;AACpD,WACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,EAAA;AAA+B,MAAA,KAAK,EAAE;AAAED,QAAAA,MAAF,EAAEA,MAAF;AAAUE,QAAAA,SAAAA,EAAAA;AAAV;AAAtC,KAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AACE,MAAA,WAAW,EADb,IAAA;AAEE,MAAA,OAAO,EAFT,MAAA;AAGE,MAAA,cAAc,EAHhB,cAAA;AAIE,MAAA,aAAa,EAAEZ;AAJjB,KAAA,EAFJ,QAEI,CADF,CADF;AAYD;;AAED,SAEE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,IAAA,KAAK,oBAAOQ,QAAP;AAAvB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,oBAAD,CAAA,QAAA,EAAA;AAA+B,IAAA,KAAK,EAAE;AAAEE,MAAAA,MAAF,EAAEA,MAAF;AAAUE,MAAAA,SAAAA,EAAAA;AAAV;AAAtC,GAAA,EADF,QACE,CADF,CAFF;AAQD","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OverlayContainer } from '@react-native-aria/overlays';\nimport React from 'react';\nimport { Platform, ViewStyle } from 'react-native';\nimport { Modal } from 'react-native';\nimport { useKeyboardDismissable } from '../../../hooks';\nimport { ExitAnimationContext } from './ExitAnimationContext';\n\nexport interface IOverlayProps {\n  isOpen?: boolean;\n  children?: any;\n  // We use RN modal on android if needed as it supports shifting accessiblity focus to the opened view. IOS automatically shifts focus if an absolutely placed view appears in front.\n  useRNModalOnAndroid?: boolean;\n  onRequestClose?: (() => any) | undefined;\n  isKeyboardDismissable?: boolean;\n  animationPreset?: 'fade' | 'slide' | 'none';\n  style?: ViewStyle;\n  unmountOnExit?: boolean;\n}\n\nexport function Overlay({\n  children,\n  isOpen,\n  useRNModalOnAndroid = false,\n  isKeyboardDismissable = true,\n  //@ts-ignore\n  animationPreset = 'fade',\n  onRequestClose,\n  style,\n  unmountOnExit,\n}: IOverlayProps) {\n  const [exited, setExited] = React.useState(!isOpen);\n\n  useKeyboardDismissable({\n    enabled: isOpen && isKeyboardDismissable,\n    callback: onRequestClose ? onRequestClose : () => {},\n  });\n  const styleObj = { ...style };\n  if (animationPreset === 'slide') {\n    styleObj.overflow = 'hidden';\n    styleObj.display = 'flex';\n  } else {\n    styleObj.display = exited && !isOpen ? 'none' : 'flex';\n  }\n\n  if (unmountOnExit && !isOpen && exited) {\n    return null;\n  }\n\n  if (Platform.OS === 'android' && useRNModalOnAndroid) {\n    return (\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        <Modal\n          transparent\n          visible={isOpen}\n          onRequestClose={onRequestClose}\n          animationType={animationPreset}\n        >\n          {children}\n        </Modal>\n      </ExitAnimationContext.Provider>\n    );\n  }\n\n  return (\n    //@ts-ignore\n    <OverlayContainer style={{ ...styleObj }}>\n      <ExitAnimationContext.Provider value={{ exited, setExited }}>\n        {children}\n      </ExitAnimationContext.Provider>\n    </OverlayContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}