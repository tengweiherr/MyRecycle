{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"_icon\", \"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { ModalContext } from \"./Context\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { CloseIcon } from \"../../primitives/Icon/Icons\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useFocusRing } from '@react-native-aria/focus';\n\nvar ModalCloseButton = function ModalCloseButton(props, ref) {\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('ModalCloseButton', props, {\n    isHovered: isHovered,\n    isPressed: isPressed,\n    isFocused: isFocused,\n    isFocusVisible: isFocusVisible\n  }),\n      _icon = _usePropsResolution._icon,\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var _React$useContext = React.useContext(ModalContext),\n      handleClose = _React$useContext.handleClose;\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur),\n    onPress: handleClose\n  }, resolvedProps), React.createElement(CloseIcon, _icon));\n};\n\nexport default memo(forwardRef(ModalCloseButton));","map":{"version":3,"sources":["ModalCloseButton.tsx"],"names":["ModalCloseButton","isHovered","useHover","isPressed","useIsPressed","isFocused","useFocus","focusProps","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isFocusVisible","handleClose","React","useHasResponsiveProps","composeEventHandlers","pressableProps","hoverProps","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,YAAA;AACA,SAAA,kBAAA;AACA,SAAA,SAAA;AACA,SAAA,SAAA;AAEA,SAAA,qBAAA;AACA,SAAA,QAAA,EAAA,QAAA,EAAA,YAAA;AAKA,SAAA,oBAAA;AACA,SAAA,YAAA,QAAA,0BAAA;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAA,GAAA,EAAoC;AAC3D,kBAAkCE,QAAlC,EAAA;AAAA,MAAM,UAAN,aAAM,UAAN;AAAA,MAAoBD,SAApB,aAAoBA,SAApB;;AACA,sBAAsCG,YAAtC,EAAA;AAAA,MAAM,cAAN,iBAAM,cAAN;AAAA,MAAwBD,SAAxB,iBAAwBA,SAAxB;;AACA,kBAAkCG,QAAlC,EAAA;AAAA,MAAM,UAAN,aAAM,UAAN;AAAA,MAAoBD,SAApB,aAAoBA,SAApB;;AACA,sBAA4DI,YAA5D,EAAA;AAAA,MAAM,cAAN,iBAAM,cAAN;AAAA,MAAoCD,cAApC,iBAAwBD,UAAxB;;AAEA,4BASII,kBAAkB,CAAA,kBAAA,EAAA,KAAA,EAA4B;AAChDV,IAAAA,SADgD,EAChDA,SADgD;AAEhDE,IAAAA,SAFgD,EAEhDA,SAFgD;AAGhDE,IAAAA,SAHgD,EAGhDA,SAHgD;AAIhDO,IAAAA,cAAAA,EAAAA;AAJgD,GAA5B,CATtB;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,SAAN,uBAAM,SAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,SAAN,uBAAM,SAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,OAAN,uBAAM,OAAN;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAQKF,aARL;;AAeA,0BAAwBI,KAAK,CAALA,UAAAA,CArBmC,YAqBnCA,CAAxB;AAAA,MAAQD,WAAR,qBAAQA,WAAR;;AAEA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,iBAAiB,EADnB,QAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,SAAS,EAAEC,oBAAoB,CAAA,SAAA,EAAYC,cAAc,CAH3D,SAGiC,CAHjC;AAIE,IAAA,UAAU,EAAED,oBAAoB,CAAA,UAAA,EAAaC,cAAc,CAJ7D,UAIkC,CAJlC;AAME,IAAA,SAAS,EAAED,oBAAoB,CAAA,SAAA,EAAYE,UAAU,CANvD,SAMiC,CANjC;AAQE,IAAA,UAAU,EAAEF,oBAAoB,CAAA,UAAA,EAAaE,UAAU,CARzD,UAQkC,CARlC;AAUE,IAAA,OAAO,EAAEF,oBAAoB,CAC3BA,oBAAoB,CAAA,OAAA,EAAUT,UAAU,CADb,OACP,CADO,EAE3BC,cAAc,CAZlB,OAU+B,CAV/B;AAeE,IAAA,MAAM,EAAEQ,oBAAoB,CAC1BA,oBAAoB,CAAA,MAAA,EAAST,UAAU,CADb,MACN,CADM,EAE1BC,cAAc,CAjBlB,MAe8B,CAf9B;AAmBE,IAAA,OAAO,EAAEK;AAnBX,GAAA,EAAA,aAAA,CAAA,EAsBE,KAAA,CAAA,aAAA,CAAA,SAAA,EAvBJ,KAuBI,CAtBF,CADF;AA1BF,CAAA;;AAsDA,eAAeM,IAAI,CAACC,UAAU,CAA9B,gBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ModalContext } from './Context';\nimport { usePropsResolution } from '../../../hooks';\nimport { Pressable } from '../../primitives/Pressable';\nimport { CloseIcon } from '../../primitives/Icon/Icons';\nimport type { IButtonProps } from '../../primitives/Button';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { composeEventHandlers } from '../../../utils';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst ModalCloseButton = (props: IButtonProps, ref?: any) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('ModalCloseButton', props, {\n    isHovered,\n    isPressed,\n    isFocused,\n    isFocusVisible,\n  });\n  const { handleClose } = React.useContext(ModalContext);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      onPress={handleClose}\n      {...resolvedProps}\n    >\n      <CloseIcon {..._icon} />\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(ModalCloseButton));\n"]},"metadata":{},"sourceType":"module"}