{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"startColor\", \"endColor\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { canUseDom } from \"../../../utils\";\nimport Box from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { useToken } from \"../../../hooks/useToken\";\n\nvar Skeleton = function Skeleton(props, ref) {\n  var isDomUsable = canUseDom();\n\n  var _usePropsResolution = usePropsResolution('Skeleton', props),\n      children = _usePropsResolution.children,\n      startColor = _usePropsResolution.startColor,\n      endColor = _usePropsResolution.endColor,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var blinkAnim = React.useRef(new Animated.Value(0)).current;\n  var tokenisedStartColor = useToken('colors', startColor);\n  React.useEffect(function () {\n    if (isDomUsable) {\n      var blink = Animated.sequence([Animated.timing(blinkAnim, {\n        toValue: 1,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      }), Animated.timing(blinkAnim, {\n        toValue: 0,\n        duration: resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n        useNativeDriver: Platform.OS !== 'web'\n      })]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n  var skeletonStyle = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim\n    }\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? children : React.createElement(Box, _extends({\n    bg: endColor\n  }, resolvedProps, {\n    ref: ref\n  }), React.createElement(Animated.View, {\n    style: skeletonStyle.skeleton\n  }));\n};\n\nexport default memo(forwardRef(Skeleton));","map":{"version":3,"sources":["Skeleton.tsx"],"names":["Skeleton","isDomUsable","canUseDom","resolvedProps","usePropsResolution","blinkAnim","React","Animated","tokenisedStartColor","useToken","blink","toValue","duration","useNativeDriver","Platform","skeletonStyle","skeleton","height","width","backgroundColor","opacity","useHasResponsiveProps","endColor","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;;;AAEA,SAAA,kBAAA;AACA,SAAA,SAAA;AACA,OAAA,GAAA;AAEA,SAAA,qBAAA;AACA,SAAA,QAAA;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAA,GAAA,EAAqC;AACpD,MAAMC,WAAW,GAAGC,SAApB,EAAA;;AACA,4BAKIE,kBAAkB,CAAA,UAAA,EAP8B,KAO9B,CALtB;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAIKD,aAJL;;AAOA,MAAME,SAAS,GAAGC,KAAK,CAALA,MAAAA,CAAa,IAAIC,QAAQ,CAAZ,KAAA,CAAbD,CAAa,CAAbA,EAAlB,OAAA;AACA,MAAME,mBAAmB,GAAGC,QAAQ,CAAA,QAAA,EAVgB,UAUhB,CAApC;AAGAH,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AAEpB,QAAA,WAAA,EAAiB;AACf,UAAMI,KAAK,GAAG,QAAQ,CAAR,QAAA,CAAkB,CAC9B,QAAQ,CAAR,MAAA,CAAA,SAAA,EAA2B;AACzBC,QAAAA,OAAO,EADkB,CAAA;AAEzBC,QAAAA,QAAQ,EACNT,aAAa,CAAbA,YAAAA,GAAAA,KAAAA,IAAsC,IAAIA,aAAa,CAHhC,KAGvBA,CAHuB;AAIzBU,QAAAA,eAAe,EAAEC,QAAQ,CAARA,EAAAA,KAAgB;AAJR,OAA3B,CAD8B,EAO9B,QAAQ,CAAR,MAAA,CAAA,SAAA,EAA2B;AACzBH,QAAAA,OAAO,EADkB,CAAA;AAEzBC,QAAAA,QAAQ,EACNT,aAAa,CAAbA,YAAAA,GAAAA,KAAAA,IAAsC,IAAIA,aAAa,CAHhC,KAGvBA,CAHuB;AAIzBU,QAAAA,eAAe,EAAEC,QAAQ,CAARA,EAAAA,KAAgB;AAJR,OAA3B,CAP8B,CAAlB,CAAd;AAcAP,MAAAA,QAAQ,CAARA,IAAAA,CAAAA,KAAAA,EAAAA,KAAAA;AACD;AAlBHD,GAAAA,EAmBG,CAAA,SAAA,EAAA,WAAA,EAnBHA,aAmBG,CAnBHA;AAqBA,MAAMS,aAAkB,GAAG;AACzBC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,MAAM,EADE,MAAA;AAERC,MAAAA,KAAK,EAFG,MAAA;AAGRC,MAAAA,eAAe,EAHP,mBAAA;AAIRC,MAAAA,OAAO,EAJC;AAAA;AADe,GAA3B;;AAUA,MAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AAED,SAAOlB,aAAa,CAAbA,QAAAA,GAAAA,QAAAA,GAGL,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AAAK,IAAA,EAAE,EAAEmB;AAAT,GAAA,EAAA,aAAA,EAAA;AAAsC,IAAA,GAAG,EAAEC;AAA3C,GAAA,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AAAe,IAAA,KAAK,EAAER,aAAa,CAACC;AAApC,GAAA,CADF,CAHF;AAhDF,CAAA;;AAyDA,eAAeQ,IAAI,CAACC,UAAU,CAA9B,QAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Animated, Platform } from 'react-native';\nimport { usePropsResolution } from '../../../hooks';\nimport { canUseDom } from '../../../utils';\nimport Box from '../../primitives/Box';\nimport type { ISkeletonProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useToken } from '../../../hooks/useToken';\n\nconst Skeleton = (props: ISkeletonProps, ref: any) => {\n  const isDomUsable = canUseDom();\n  const {\n    children,\n    startColor,\n    endColor,\n    ...resolvedProps\n  } = usePropsResolution('Skeleton', props);\n  // Setting blink Animation\n  const blinkAnim = React.useRef(new Animated.Value(0)).current;\n  const tokenisedStartColor = useToken('colors', startColor);\n\n  // Generating blink animation in a sequence\n  React.useEffect(() => {\n    //Check if window is loaded\n    if (isDomUsable) {\n      const blink = Animated.sequence([\n        Animated.timing(blinkAnim, {\n          toValue: 1,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n        Animated.timing(blinkAnim, {\n          toValue: 0,\n          duration:\n            resolvedProps.fadeDuration * 10000 * (1 / resolvedProps.speed),\n          useNativeDriver: Platform.OS !== 'web',\n        }),\n      ]);\n      Animated.loop(blink).start();\n    }\n  }, [blinkAnim, isDomUsable, resolvedProps]);\n\n  const skeletonStyle: any = {\n    skeleton: {\n      height: '100%',\n      width: '100%',\n      backgroundColor: tokenisedStartColor,\n      opacity: blinkAnim, // Bind opacity to animated value\n    },\n  };\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return resolvedProps.isLoaded ? (\n    children\n  ) : (\n    <Box bg={endColor} {...resolvedProps} ref={ref}>\n      <Animated.View style={skeletonStyle.skeleton} />\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Skeleton));\n"]},"metadata":{},"sourceType":"module"}