{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { Platform } from 'expo-modules-core';\nimport { getAssetByID } from \"./AssetRegistry\";\nimport { selectAssetSource } from \"./AssetSources\";\nimport * as AssetUris from \"./AssetUris\";\nimport * as ImageAssets from \"./ImageAssets\";\nimport { getLocalAssetUri } from \"./LocalAssets\";\nimport { downloadAsync as _downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from \"./PlatformUtils\";\nimport resolveAssetSource from \"./resolveAssetSource\";\nexport var Asset = function () {\n  function Asset(_ref) {\n    var name = _ref.name,\n        type = _ref.type,\n        _ref$hash = _ref.hash,\n        hash = _ref$hash === void 0 ? null : _ref$hash,\n        uri = _ref.uri,\n        width = _ref.width,\n        height = _ref.height;\n\n    _classCallCheck(this, Asset);\n\n    this.hash = null;\n    this.localUri = null;\n    this.width = null;\n    this.height = null;\n    this.downloading = false;\n    this.downloaded = false;\n    this._downloadCallbacks = [];\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  _createClass(Asset, [{\n    key: \"downloadAsync\",\n    value: function downloadAsync() {\n      var _this = this;\n\n      var _await$ImageAssets$ge, width, height, name;\n\n      return _regeneratorRuntime.async(function downloadAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.downloaded) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", this);\n\n            case 2:\n              if (!this.downloading) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n                _this._downloadCallbacks.push({\n                  resolve: resolve,\n                  reject: reject\n                });\n              }));\n\n            case 5:\n              return _context.abrupt(\"return\", this);\n\n            case 6:\n              this.downloading = true;\n              _context.prev = 7;\n\n              if (!(Platform.OS === 'web')) {\n                _context.next = 22;\n                break;\n              }\n\n              if (!ImageAssets.isImageType(this.type)) {\n                _context.next = 21;\n                break;\n              }\n\n              _context.next = 12;\n              return _regeneratorRuntime.awrap(ImageAssets.getImageInfoAsync(this.uri));\n\n            case 12:\n              _await$ImageAssets$ge = _context.sent;\n              width = _await$ImageAssets$ge.width;\n              height = _await$ImageAssets$ge.height;\n              name = _await$ImageAssets$ge.name;\n              this.width = width;\n              this.height = height;\n              this.name = name;\n              _context.next = 22;\n              break;\n\n            case 21:\n              this.name = AssetUris.getFilename(this.uri);\n\n            case 22:\n              _context.next = 24;\n              return _regeneratorRuntime.awrap(_downloadAsync(this.uri, this.hash, this.type, this.name));\n\n            case 24:\n              this.localUri = _context.sent;\n              this.downloaded = true;\n\n              this._downloadCallbacks.forEach(function (_ref2) {\n                var resolve = _ref2.resolve;\n                return resolve();\n              });\n\n              _context.next = 33;\n              break;\n\n            case 29:\n              _context.prev = 29;\n              _context.t0 = _context[\"catch\"](7);\n\n              this._downloadCallbacks.forEach(function (_ref3) {\n                var reject = _ref3.reject;\n                return reject(_context.t0);\n              });\n\n              throw _context.t0;\n\n            case 33:\n              _context.prev = 33;\n              this.downloading = false;\n              this._downloadCallbacks = [];\n              return _context.finish(33);\n\n            case 37:\n              return _context.abrupt(\"return\", this);\n\n            case 38:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[7, 29, 33, 37]], Promise);\n    }\n  }], [{\n    key: \"loadAsync\",\n    value: function loadAsync(moduleId) {\n      var moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n      return Promise.all(moduleIds.map(function (moduleId) {\n        return Asset.fromModule(moduleId).downloadAsync();\n      }));\n    }\n  }, {\n    key: \"fromModule\",\n    value: function fromModule(virtualAssetModule) {\n      if (typeof virtualAssetModule === 'string') {\n        return Asset.fromURI(virtualAssetModule);\n      }\n\n      var meta = getAssetByID(virtualAssetModule);\n\n      if (!meta) {\n        throw new Error(\"Module \\\"\" + virtualAssetModule + \"\\\" is missing from the asset registry\");\n      }\n\n      if (!IS_ENV_WITH_UPDATES_ENABLED) {\n        var _resolveAssetSource = resolveAssetSource(virtualAssetModule),\n            uri = _resolveAssetSource.uri;\n\n        var asset = new Asset({\n          name: meta.name,\n          type: meta.type,\n          hash: meta.hash,\n          uri: uri,\n          width: meta.width,\n          height: meta.height\n        });\n\n        if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n          asset.localUri = asset.uri;\n          asset.downloaded = true;\n        }\n\n        Asset.byHash[meta.hash] = asset;\n        return asset;\n      }\n\n      return Asset.fromMetadata(meta);\n    }\n  }, {\n    key: \"fromMetadata\",\n    value: function fromMetadata(meta) {\n      var metaHash = meta.hash;\n\n      if (Asset.byHash[metaHash]) {\n        return Asset.byHash[metaHash];\n      }\n\n      var _selectAssetSource = selectAssetSource(meta),\n          uri = _selectAssetSource.uri,\n          hash = _selectAssetSource.hash;\n\n      var asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: hash,\n        uri: uri,\n        width: meta.width,\n        height: meta.height\n      });\n      Asset.byHash[metaHash] = asset;\n      return asset;\n    }\n  }, {\n    key: \"fromURI\",\n    value: function fromURI(uri) {\n      if (Asset.byUri[uri]) {\n        return Asset.byUri[uri];\n      }\n\n      var type = '';\n\n      if (uri.indexOf(';base64') > -1) {\n        type = uri.split(';')[0].split('/')[1];\n      } else {\n        var extension = AssetUris.getFileExtension(uri);\n        type = extension.startsWith('.') ? extension.substring(1) : extension;\n      }\n\n      var asset = new Asset({\n        name: '',\n        type: type,\n        hash: null,\n        uri: uri\n      });\n      Asset.byUri[uri] = asset;\n      return asset;\n    }\n  }]);\n\n  return Asset;\n}();\nAsset.byHash = {};\nAsset.byUri = {};","map":{"version":3,"sources":["../src/Asset.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from 'expo-modules-core';\n\nimport { getAssetByID } from './AssetRegistry';\nimport { AssetMetadata, selectAssetSource } from './AssetSources';\nimport * as AssetUris from './AssetUris';\nimport * as ImageAssets from './ImageAssets';\nimport { getLocalAssetUri } from './LocalAssets';\nimport { downloadAsync, IS_ENV_WITH_UPDATES_ENABLED } from './PlatformUtils';\nimport resolveAssetSource from './resolveAssetSource';\n\n// @docsMissing\nexport type AssetDescriptor = {\n  name: string;\n  type: string;\n  hash?: string | null;\n  uri: string;\n  width?: number | null;\n  height?: number | null;\n};\n\ntype DownloadPromiseCallbacks = {\n  resolve: () => void;\n  reject: (error: Error) => void;\n};\n\nexport { AssetMetadata };\n\n// @needsAudit\n/**\n * The `Asset` class represents an asset in your app. It gives metadata about the asset (such as its\n * name and type) and provides facilities to load the asset data.\n */\nexport class Asset {\n  /**\n   * @private\n   */\n  static byHash = {};\n  /**\n   * @private\n   */\n  static byUri = {};\n\n  /**\n   * The name of the asset file without the extension. Also without the part from `@` onward in the\n   * filename (used to specify scale factor for images).\n   */\n  name: string;\n  /**\n   * The extension of the asset filename.\n   */\n  type: string;\n  /**\n   * The MD5 hash of the asset's data.\n   */\n  hash: string | null = null;\n  /**\n   * A URI that points to the asset's data on the remote server. When running the published version\n   * of your app, this refers to the location on Expo's asset server where Expo has stored your\n   * asset. When running the app from Expo CLI during development, this URI points to Expo CLI's\n   * server running on your computer and the asset is served directly from your computer.\n   */\n  uri: string;\n  /**\n   * If the asset has been downloaded (by calling [`downloadAsync()`](#downloadasync)), the\n   * `file://` URI pointing to the local file on the device that contains the asset data.\n   */\n  localUri: string | null = null;\n  /**\n   * If the asset is an image, the width of the image data divided by the scale factor. The scale\n   * factor is the number after `@` in the filename, or `1` if not present.\n   */\n  width: number | null = null;\n  /**\n   * If the asset is an image, the height of the image data divided by the scale factor. The scale factor is the number after `@` in the filename, or `1` if not present.\n   */\n  height: number | null = null;\n  // @docsMissing\n  downloading: boolean = false;\n  // @docsMissing\n  downloaded: boolean = false;\n\n  /**\n   * @private\n   */\n  _downloadCallbacks: DownloadPromiseCallbacks[] = [];\n\n  constructor({ name, type, hash = null, uri, width, height }: AssetDescriptor) {\n    this.name = name;\n    this.type = type;\n    this.hash = hash;\n    this.uri = uri;\n\n    if (typeof width === 'number') {\n      this.width = width;\n    }\n    if (typeof height === 'number') {\n      this.height = height;\n    }\n\n    if (hash) {\n      this.localUri = getLocalAssetUri(hash, type);\n      if (this.localUri) {\n        this.downloaded = true;\n      }\n    }\n\n    if (Platform.OS === 'web') {\n      if (!name) {\n        this.name = AssetUris.getFilename(uri);\n      }\n      if (!type) {\n        this.type = AssetUris.getFileExtension(uri);\n      }\n    }\n  }\n\n  // @needsAudit\n  /**\n   * A helper that wraps `Asset.fromModule(module).downloadAsync` for convenience.\n   * @param moduleId An array of `require('path/to/file')` or external network URLs. Can also be\n   * just one module or URL without an Array.\n   * @return Returns a Promise that fulfills with an array of `Asset`s when the asset(s) has been\n   * saved to disk.\n   * @example\n   * ```ts\n   * const [{ localUri }] = await Asset.loadAsync(require('./assets/snack-icon.png'));\n   * ```\n   */\n  static loadAsync(moduleId: number | number[] | string | string[]): Promise<Asset[]> {\n    const moduleIds = Array.isArray(moduleId) ? moduleId : [moduleId];\n    return Promise.all(moduleIds.map((moduleId) => Asset.fromModule(moduleId).downloadAsync()));\n  }\n\n  // @needsAudit\n  /**\n   * Returns the [`Asset`](#asset) instance representing an asset given its module or URL.\n   * @param virtualAssetModule The value of `require('path/to/file')` for the asset or external\n   * network URL\n   * @return The [`Asset`](#asset) instance for the asset.\n   */\n  static fromModule(virtualAssetModule: number | string): Asset {\n    if (typeof virtualAssetModule === 'string') {\n      return Asset.fromURI(virtualAssetModule);\n    }\n\n    const meta = getAssetByID(virtualAssetModule);\n    if (!meta) {\n      throw new Error(`Module \"${virtualAssetModule}\" is missing from the asset registry`);\n    }\n\n    // Outside of the managed env we need the moduleId to initialize the asset\n    // because resolveAssetSource depends on it\n    if (!IS_ENV_WITH_UPDATES_ENABLED) {\n      const { uri } = resolveAssetSource(virtualAssetModule);\n      const asset = new Asset({\n        name: meta.name,\n        type: meta.type,\n        hash: meta.hash,\n        uri,\n        width: meta.width,\n        height: meta.height,\n      });\n\n      // TODO: FileSystem should probably support 'downloading' from drawable\n      // resources But for now it doesn't (it only supports raw resources) and\n      // React Native's Image works fine with drawable resource names for\n      // images.\n      if (Platform.OS === 'android' && !uri.includes(':') && (meta.width || meta.height)) {\n        asset.localUri = asset.uri;\n        asset.downloaded = true;\n      }\n\n      Asset.byHash[meta.hash] = asset;\n      return asset;\n    }\n\n    return Asset.fromMetadata(meta);\n  }\n\n  // @docsMissing\n  static fromMetadata(meta: AssetMetadata): Asset {\n    // The hash of the whole asset, not to be confused with the hash of a specific file returned\n    // from `selectAssetSource`\n    const metaHash = meta.hash;\n    if (Asset.byHash[metaHash]) {\n      return Asset.byHash[metaHash];\n    }\n\n    const { uri, hash } = selectAssetSource(meta);\n    const asset = new Asset({\n      name: meta.name,\n      type: meta.type,\n      hash,\n      uri,\n      width: meta.width,\n      height: meta.height,\n    });\n    Asset.byHash[metaHash] = asset;\n    return asset;\n  }\n\n  // @docsMissing\n  static fromURI(uri: string): Asset {\n    if (Asset.byUri[uri]) {\n      return Asset.byUri[uri];\n    }\n\n    // Possibly a Base64-encoded URI\n    let type = '';\n    if (uri.indexOf(';base64') > -1) {\n      type = uri.split(';')[0].split('/')[1];\n    } else {\n      const extension = AssetUris.getFileExtension(uri);\n      type = extension.startsWith('.') ? extension.substring(1) : extension;\n    }\n\n    const asset = new Asset({\n      name: '',\n      type,\n      hash: null,\n      uri,\n    });\n\n    Asset.byUri[uri] = asset;\n\n    return asset;\n  }\n\n  // @needsAudit\n  /**\n   * Downloads the asset data to a local file in the device's cache directory. Once the returned\n   * promise is fulfilled without error, the [`localUri`](#assetlocaluri) field of this asset points\n   * to a local file containing the asset data. The asset is only downloaded if an up-to-date local\n   * file for the asset isn't already present due to an earlier download. The downloaded `Asset`\n   * will be returned when the promise is resolved.\n   * @return Returns a Promise which fulfills with an `Asset` instance.\n   */\n  async downloadAsync(): Promise<this> {\n    if (this.downloaded) {\n      return this;\n    }\n    if (this.downloading) {\n      await new Promise<void>((resolve, reject) => {\n        this._downloadCallbacks.push({ resolve, reject });\n      });\n      return this;\n    }\n    this.downloading = true;\n\n    try {\n      if (Platform.OS === 'web') {\n        if (ImageAssets.isImageType(this.type)) {\n          const { width, height, name } = await ImageAssets.getImageInfoAsync(this.uri);\n          this.width = width;\n          this.height = height;\n          this.name = name;\n        } else {\n          this.name = AssetUris.getFilename(this.uri);\n        }\n      }\n      this.localUri = await downloadAsync(this.uri, this.hash, this.type, this.name);\n\n      this.downloaded = true;\n      this._downloadCallbacks.forEach(({ resolve }) => resolve());\n    } catch (e) {\n      this._downloadCallbacks.forEach(({ reject }) => reject(e));\n      throw e;\n    } finally {\n      this.downloading = false;\n      this._downloadCallbacks = [];\n    }\n    return this;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}