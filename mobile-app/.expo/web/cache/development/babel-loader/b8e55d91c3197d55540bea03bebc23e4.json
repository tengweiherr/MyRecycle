{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport base from \"./base\";\nimport components from \"./components\";\nimport * as tools from \"./tools\";\nvar config = {\n  useSystemColorMode: false,\n  initialColorMode: 'light',\n  accessibleColors: false\n};\n\nvar theme = _objectSpread(_objectSpread({}, base), {}, {\n  components: components,\n  config: config\n});\n\nexport { theme, tools as themeTools };\nexport { getColor } from \"./styled-system\";\nexport { StyledProps } from \"./types\";\nexport * from \"./v33x-theme\";","map":{"version":3,"sources":["index.ts"],"names":["config","useSystemColorMode","initialColorMode","accessibleColors","theme","components","tools"],"mappings":";;;;;;AAAA,OAAA,IAAA;AACA,OAAA,UAAA;AACA,OAAO,KAAP,KAAA;AAUA,IAAMA,MAAwB,GAAG;AAC/BC,EAAAA,kBAAkB,EADa,KAAA;AAE/BC,EAAAA,gBAAgB,EAFe,OAAA;AAG/BC,EAAAA,gBAAgB,EAAE;AAHa,CAAjC;;AAMA,IAAMC,KAAK,mCAAG,IAAH;AAETC,EAAAA,UAFY,EAEZA,UAFS;AAGTL,EAAAA,MAAAA,EAAAA;AAHS,EAAX;;AAYA,SAAA,KAAA,EAAgBM,KAAK,IAArB,UAAA;AAEA,SAAA,QAAA;AACA,SAAA,WAAA;AACA","sourcesContent":["import base from './base';\nimport components from './components';\nimport * as tools from './tools';\nimport type { StyledProps } from '../theme/types';\n//@ts-ignore\nimport type { ColorModeOptions } from './../core/color-mode/types';\nexport interface ComponentTheme {\n  baseStyle?: ((props: any) => StyledProps) | StyledProps;\n  sizes?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  variants?: Record<string, ((props: any) => StyledProps) | StyledProps>;\n  defaultProps?: Record<string, any>;\n}\nconst config: ColorModeOptions = {\n  useSystemColorMode: false, // TODO: implement this\n  initialColorMode: 'light',\n  accessibleColors: false,\n};\n\nconst theme = {\n  ...base,\n  components,\n  config,\n};\n\nexport type Theme = typeof theme & { fontConfig: any };\n\nexport interface ICustomTheme {}\n\nexport interface ITheme extends ICustomTheme, Omit<Theme, keyof ICustomTheme> {}\n\nexport { theme, tools as themeTools };\n\nexport { getColor } from './styled-system';\nexport { StyledProps } from './types';\nexport * from './v33x-theme';\n"]},"metadata":{},"sourceType":"module"}