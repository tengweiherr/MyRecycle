{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"status\", \"label\", \"onPress\", \"labelStyle\", \"theme\", \"testID\", \"mode\", \"position\", \"disabled\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Checkbox from \"./Checkbox\";\nimport CheckboxAndroid from \"./CheckboxAndroid\";\nimport CheckboxIOS from \"./CheckboxIOS\";\nimport Text from \"../Typography/Text\";\nimport TouchableRipple from \"../TouchableRipple/TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\n\nvar CheckboxItem = function CheckboxItem(_ref) {\n  var style = _ref.style,\n      status = _ref.status,\n      label = _ref.label,\n      onPress = _ref.onPress,\n      labelStyle = _ref.labelStyle,\n      theme = _ref.theme,\n      testID = _ref.testID,\n      mode = _ref.mode,\n      _ref$position = _ref.position,\n      position = _ref$position === void 0 ? 'trailing' : _ref$position,\n      disabled = _ref.disabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {\n    status: status,\n    theme: theme,\n    disabled: disabled\n  });\n\n  var isLeading = position === 'leading';\n  var checkbox;\n\n  if (mode === 'android') {\n    checkbox = React.createElement(CheckboxAndroid, checkboxProps);\n  } else if (mode === 'ios') {\n    checkbox = React.createElement(CheckboxIOS, checkboxProps);\n  } else {\n    checkbox = React.createElement(Checkbox, checkboxProps);\n  }\n\n  return React.createElement(TouchableRipple, {\n    accessibilityLabel: label,\n    accessibilityRole: \"checkbox\",\n    accessibilityState: {\n      checked: status === 'checked',\n      disabled: disabled\n    },\n    onPress: onPress,\n    testID: testID,\n    disabled: disabled\n  }, React.createElement(View, {\n    style: [styles.container, style],\n    pointerEvents: \"none\",\n    importantForAccessibility: \"no-hide-descendants\"\n  }, isLeading && checkbox, React.createElement(Text, {\n    style: [styles.label, {\n      color: disabled ? theme.colors.disabled : theme.colors.text,\n      textAlign: isLeading ? 'right' : 'left'\n    }, labelStyle]\n  }, label), !isLeading && checkbox));\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\nexport default withTheme(CheckboxItem);\nvar CheckboxItemWithTheme = withTheme(CheckboxItem);\nexport { CheckboxItemWithTheme as CheckboxItem };\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1\n  }\n});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","position","props","checkboxProps","status","theme","disabled","isLeading","mode","checkbox","checked","styles","color","textAlign","withTheme","CheckboxItemWithTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize","flexShrink","flexGrow"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport Checkbox from './Checkbox';\nimport CheckboxAndroid from './CheckboxAndroid';\nimport CheckboxIOS from './CheckboxIOS';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Checkbox control position.\n   */\n  position?: 'leading' | 'trailing';\n  /**\n   * Whether `<Checkbox.Android />` or `<Checkbox.IOS />` should be used.\n   * Left undefined `<Checkbox />` will be used.\n   */\n  mode?: 'android' | 'ios';\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme,\n  testID,\n  mode,\n  position = 'trailing',\n  disabled,\n  ...props\n}: Props) => {\n  const checkboxProps = { ...props, status, theme, disabled };\n  const isLeading = position === 'leading';\n  let checkbox;\n\n  if (mode === 'android') {\n    checkbox = <CheckboxAndroid {...checkboxProps} />;\n  } else if (mode === 'ios') {\n    checkbox = <CheckboxIOS {...checkboxProps} />;\n  } else {\n    checkbox = <Checkbox {...checkboxProps} />;\n  }\n\n  return (\n    <TouchableRipple\n      accessibilityLabel={label}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{\n        checked: status === 'checked',\n        disabled,\n      }}\n      onPress={onPress}\n      testID={testID}\n      disabled={disabled}\n    >\n      <View\n        style={[styles.container, style]}\n        pointerEvents=\"none\"\n        importantForAccessibility=\"no-hide-descendants\"\n      >\n        {isLeading && checkbox}\n        <Text\n          style={[\n            styles.label,\n            {\n              color: disabled ? theme.colors.disabled : theme.colors.text,\n              textAlign: isLeading ? 'right' : 'left',\n            },\n            labelStyle,\n          ]}\n        >\n          {label}\n        </Text>\n        {!isLeading && checkbox}\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nconst CheckboxItemWithTheme = withTheme(CheckboxItem);\n// @component-docs ignore-next-line\nexport { CheckboxItemWithTheme as CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}