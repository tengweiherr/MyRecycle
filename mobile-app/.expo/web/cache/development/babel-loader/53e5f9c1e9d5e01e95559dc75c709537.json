{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks\";\nimport { AlertDialogContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar AlertDialogContent = function AlertDialogContent(props, ref) {\n  var newProps = usePropsResolution('AlertDialogContent', props);\n\n  var _React$useContext = React.useContext(AlertDialogContext),\n      contentSize = _React$useContext.contentSize,\n      initialFocusRef = _React$useContext.initialFocusRef,\n      finalFocusRef = _React$useContext.finalFocusRef,\n      handleClose = _React$useContext.handleClose;\n\n  React.useEffect(function () {\n    var finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n\n    if (initialFocusRef && initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    }\n\n    return function () {\n      if (finalRefVal) {\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, _extends({}, contentSize, newProps, {\n    ref: ref,\n    onAccessibilityEscape: handleClose,\n    \"aria-modal\": \"true\",\n    accessibilityRole: \"alert\",\n    accessibilityViewIsModal: true\n  }));\n};\n\nexport default memo(forwardRef(AlertDialogContent));","map":{"version":3,"sources":["AlertDialogContent.tsx"],"names":["AlertDialogContent","newProps","usePropsResolution","handleClose","React","finalRefVal","finalFocusRef","initialFocusRef","useHasResponsiveProps","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AACA,SAAA,kBAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,KAAA,EAAA,GAAA,EAAiC;AAC1D,MAAMC,QAAQ,GAAGC,kBAAkB,CAAA,oBAAA,EAAnC,KAAmC,CAAnC;;AACA,0BAKIE,KAAK,CAALA,UAAAA,CALJ,kBAKIA,CALJ;AAAA,MAAM,WAAN,qBAAM,WAAN;AAAA,MAAM,eAAN,qBAAM,eAAN;AAAA,MAAM,aAAN,qBAAM,aAAN;AAAA,MAIED,WAJF,qBAIEA,WAJF;;AAMAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAMC,WAAW,GAAGC,aAAa,GAAGA,aAAa,CAAhB,OAAA,GAAjC,IAAA;;AACA,QAAIC,eAAe,IAAIA,eAAe,CAAtC,OAAA,EAAgD;AAE9CA,MAAAA,eAAe,CAAfA,OAAAA,CAAAA,KAAAA;AACD;;AAED,WAAO,YAAM;AACX,UAAA,WAAA,EAAiB;AAEfF,QAAAA,WAAW,CAAXA,KAAAA;AACD;AAJH,KAAA;AAPFD,GAAAA,EAaG,CAAA,eAAA,EArBuD,aAqBvD,CAbHA;;AAgBA,MAAII,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,WAAA,EAAA,QAAA,EAAA;AAGE,IAAA,GAAG,EAHL,GAAA;AAIE,IAAA,qBAAqB,EAJvB,WAAA;AAME,kBANF,MAAA;AAQE,IAAA,iBAAiB,EARnB,OAAA;AASE,IAAA,wBAAwB,EAAA;AAT1B,GAAA,CAAA,CADF;AA3BF,CAAA;;AA0CA,eAAeC,IAAI,CAACC,UAAU,CAA9B,kBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box, { IBoxProps } from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialogContent = (props: IBoxProps, ref?: any) => {\n  const newProps = usePropsResolution('AlertDialogContent', props);\n  const {\n    contentSize,\n    initialFocusRef,\n    finalFocusRef,\n    handleClose,\n  } = React.useContext(AlertDialogContext);\n  React.useEffect(() => {\n    const finalRefVal = finalFocusRef ? finalFocusRef.current : null;\n    if (initialFocusRef && initialFocusRef.current) {\n      //@ts-ignore\n      initialFocusRef.current.focus();\n    }\n\n    return () => {\n      if (finalRefVal) {\n        //@ts-ignore\n        finalRefVal.focus();\n      }\n    };\n  }, [initialFocusRef, finalFocusRef]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box\n      {...contentSize}\n      {...newProps}\n      ref={ref}\n      onAccessibilityEscape={handleClose}\n      //@ts-ignore - web only\n      aria-modal=\"true\"\n      //@ts-ignore - web only\n      accessibilityRole=\"alert\"\n      accessibilityViewIsModal\n    />\n  );\n};\n\nexport default memo(forwardRef(AlertDialogContent));\n"]},"metadata":{},"sourceType":"module"}