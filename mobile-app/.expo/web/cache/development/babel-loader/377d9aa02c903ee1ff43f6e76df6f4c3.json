{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"id\", \"initialRouteName\", \"defaultStatus\", \"backBehavior\", \"children\", \"screenListeners\", \"screenOptions\"],\n    _excluded2 = [\"openByDefault\", \"lazy\", \"drawerContentOptions\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { createNavigatorFactory, DrawerRouter, useNavigationBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\nimport DrawerView from \"../views/DrawerView\";\n\nfunction DrawerNavigator(_ref) {\n  var id = _ref.id,\n      initialRouteName = _ref.initialRouteName,\n      customDefaultStatus = _ref.defaultStatus,\n      backBehavior = _ref.backBehavior,\n      children = _ref.children,\n      screenListeners = _ref.screenListeners,\n      screenOptions = _ref.screenOptions,\n      restWithDeprecated = _objectWithoutProperties(_ref, _excluded);\n\n  var openByDefault = restWithDeprecated.openByDefault,\n      lazy = restWithDeprecated.lazy,\n      drawerContentOptions = restWithDeprecated.drawerContentOptions,\n      rest = _objectWithoutProperties(restWithDeprecated, _excluded2);\n\n  var defaultScreenOptions = {};\n\n  if (drawerContentOptions) {\n    _extends2(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps\n    });\n\n    Object.keys(defaultScreenOptions).forEach(function (key) {\n      if (defaultScreenOptions[key] === undefined) {\n        delete defaultScreenOptions[key];\n      }\n    });\n    warnOnce(drawerContentOptions, \"Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n\" + JSON.stringify(defaultScreenOptions, null, 2) + \"\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.\");\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n    warnOnce(true, \"Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.\");\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(true, \"Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.\");\n  }\n\n  var defaultStatus = customDefaultStatus !== undefined ? customDefaultStatus : openByDefault ? 'open' : 'closed';\n\n  var _useNavigationBuilder = useNavigationBuilder(DrawerRouter, {\n    id: id,\n    initialRouteName: initialRouteName,\n    defaultStatus: defaultStatus,\n    backBehavior: backBehavior,\n    children: children,\n    screenListeners: screenListeners,\n    screenOptions: screenOptions,\n    defaultScreenOptions: defaultScreenOptions\n  }),\n      state = _useNavigationBuilder.state,\n      descriptors = _useNavigationBuilder.descriptors,\n      navigation = _useNavigationBuilder.navigation,\n      NavigationContent = _useNavigationBuilder.NavigationContent;\n\n  return React.createElement(NavigationContent, null, React.createElement(DrawerView, _extends({}, rest, {\n    defaultStatus: defaultStatus,\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  })));\n}\n\nexport default createNavigatorFactory(DrawerNavigator);","map":{"version":3,"sources":["createDrawerNavigator.tsx"],"names":["defaultStatus","restWithDeprecated","rest","defaultScreenOptions","Object","drawerPosition","drawerContentOptions","drawerType","swipeEdgeWidth","drawerHideStatusBarOnOpen","keyboardDismissMode","swipeMinDistance","overlayColor","drawerStatusBarAnimation","gestureHandlerProps","key","warnOnce","JSON","customDefaultStatus","openByDefault","NavigationContent","useNavigationBuilder","id","initialRouteName","backBehavior","children","screenListeners","screenOptions","navigation","createNavigatorFactory"],"mappings":"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","sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  id,\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      id,\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]},"metadata":{},"sourceType":"module"}