{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"manageFocus\", \"defaultValue\", \"value\", \"space\", \"onChange\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { HStack } from \"../../primitives/Stack\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { useFormControlContext } from \"../FormControl\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { PinInputContext } from \"./Context\";\nimport { themeTools } from \"../../../theme\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar PinInput = function PinInput(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _themeTools$extractIn = themeTools.extractInObject(props, ['p', 'px', 'py', 'pt', 'pb', 'pl', 'pr']),\n      _themeTools$extractIn2 = _slicedToArray(_themeTools$extractIn, 2),\n      padding = _themeTools$extractIn2[0],\n      remProps = _themeTools$extractIn2[1];\n\n  var _useThemeProps = useThemeProps('PinInput', remProps),\n      manageFocus = _useThemeProps.manageFocus,\n      defaultValue = _useThemeProps.defaultValue,\n      value = _useThemeProps.value,\n      space = _useThemeProps.space,\n      onChange = _useThemeProps.onChange,\n      newProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n\n  var formControlContext = useFormControlContext();\n  var RefList = [];\n\n  var setRefList = function setRefList(ref, index) {\n    RefList[index] = ref;\n  };\n\n  var _React$useState = React.useState(value || defaultValue),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pinInputValue = _React$useState2[0],\n      setPinInputValue = _React$useState2[1];\n\n  var handleChange = function handleChange(newValue, fieldIndex) {\n    var temp = pinInputValue && _toConsumableArray(pinInputValue) || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();else if (newValue && manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n\n  var handleMultiValueChange = function handleMultiValueChange(newValue, fieldIndex) {\n    var pinFieldLength = RefList.length;\n    var newValueLength = newValue.length;\n\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      var splicedValue = newValue ? _toConsumableArray(newValue) : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (Platform.OS !== 'ios') {\n      var temp = pinInputValue ? _toConsumableArray(pinInputValue) : [];\n\n      if (newValue === '') {\n        temp = temp.filter(function (_n, i) {\n          return i !== fieldIndex;\n        });\n        if (manageFocus && fieldIndex - 1 > -1) RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length) RefList[fieldIndex + 1].current.focus();\n      }\n\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  var indexSetter = function indexSetter(allChildren) {\n    var pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, function (child) {\n      pinInputFiledCounter++;\n      return React.cloneElement(child, {\n        fieldIndex: pinInputFiledCounter\n      }, child.props.children);\n    });\n  };\n\n  React.useEffect(function () {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(PinInputContext.Provider, {\n    value: _objectSpread(_objectSpread(_objectSpread({}, formControlContext), newProps), {}, {\n      setRefList: setRefList,\n      handleChange: handleChange,\n      handleMultiValueChange: handleMultiValueChange,\n      value: pinInputValue\n    })\n  }, children && React.createElement(HStack, _extends({\n    flexDirection: \"row\",\n    space: space\n  }, padding, {\n    ref: ref\n  }), indexSetter(children)));\n};\n\nexport default React.memo(React.forwardRef(PinInput));","map":{"version":3,"sources":["PinInput.tsx"],"names":["PinInput","props","themeTools","newProps","useThemeProps","formControlContext","useFormControlContext","RefList","setRefList","React","value","handleChange","temp","pinInputValue","setPinInputValue","onChange","newValue","fieldIndex","handleMultiValueChange","pinFieldLength","newValueLength","splicedValue","Platform","i","manageFocus","JSON","parseInt","indexSetter","allChildren","pinInputFiledCounter","child","useHasResponsiveProps","children","space","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,MAAA;AACA,SAAA,aAAA;AAEA,SAAA,qBAAA;;AAEA,SAAA,eAAA;AACA,SAAA,UAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAAA,GAAA,EAAuD;AAAA,MAAtD,QAAsD,QAAtD,QAAsD;AAAA,MAAvCC,KAAuC;;AACtE,8BAA0BC,UAAU,CAAVA,eAAAA,CAAAA,KAAAA,EAAkC,CAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAA5D,IAA4D,CAAlCA,CAA1B;AAAA;AAAA,MAAI,OAAJ;AAAA,MAAI,QAAJ;;AASA,uBAOIE,aAAa,CAAA,UAAA,EAPjB,QAOiB,CAPjB;AAAA,MAAM,WAAN,kBAAM,WAAN;AAAA,MAAM,YAAN,kBAAM,YAAN;AAAA,MAAM,KAAN,kBAAM,KAAN;AAAA,MAAM,KAAN,kBAAM,KAAN;AAAA,MAAM,QAAN,kBAAM,QAAN;AAAA,MAMKD,QANL;;AAQA,MAAME,kBAAkB,GAAGC,qBAA3B,EAAA;AAEA,MAAMC,OAAmB,GAAzB,EAAA;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAA,GAAA,EAAA,KAAA,EAA6B;AAC9CD,IAAAA,OAAO,CAAPA,KAAO,CAAPA,GAAAA,GAAAA;AADF,GAAA;;AAGA,wBAA0CE,KAAK,CAALA,QAAAA,CACxCC,KAAK,IADP,YAA0CD,CAA1C;AAAA;AAAA,MAAM,aAAN;AAAA,MAAM,gBAAN;;AAIA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAAA,QAAA,EAAA,UAAA,EAA0C;AAC7D,QAAIC,IAAI,GAAIC,aAAa,uBAAd,aAAc,CAAbA,IAAZ,EAAA;AACAD,IAAAA,IAAI,CAAJA,UAAI,CAAJA,GAAAA,QAAAA;AACAF,IAAAA,KAAK,KAALA,SAAAA,IAAuBI,gBAAgB,CAACF,IAAI,CAAJA,IAAAA,CAAxCF,EAAwCE,CAAD,CAAvCF;AACAK,IAAAA,QAAQ,IAAIA,QAAQ,CAACH,IAAI,CAAJA,IAAAA,CAArBG,EAAqBH,CAAD,CAApBG;AACA,QAAIC,QAAQ,KAARA,EAAAA,IAAAA,WAAAA,IAAkCC,UAAU,GAAVA,CAAAA,GAAiB,CAAvD,CAAA,EACEV,OAAO,CAACU,UAAU,GAAlBV,CAAO,CAAPA,CAAAA,OAAAA,CADF,KACEA,GADF,KAEK,IAAIS,QAAQ,IAARA,WAAAA,IAA2BC,UAAU,GAAVA,CAAAA,GAAiBV,OAAO,CAAvD,MAAA,EACHA,OAAO,CAACU,UAAU,GAAlBV,CAAO,CAAPA,CAAAA,OAAAA,CAAAA,KAAAA;AACF,WAAOK,IAAI,CAAJA,IAAAA,CAAP,EAAOA,CAAP;AATF,GAAA;;AAWA,MAAMM,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,QAAA,EAAA,UAAA,EAA0C;AACvE,QAAMC,cAAc,GAAGZ,OAAO,CAA9B,MAAA;AACA,QAAMa,cAAc,GAAGJ,QAAQ,CAA/B,MAAA;;AACA,QAAII,cAAc,IAAdA,cAAAA,IAAoCA,cAAc,GAAtD,CAAA,EAA4D;AAC1D,UAAIC,YAAY,GAAGL,QAAQ,sBAAA,QAAA,IAA3B,EAAA;AACAK,MAAAA,YAAY,CAAZA,MAAAA,CAAAA,cAAAA;AACAd,MAAAA,OAAO,CAACY,cAAc,GAAtBZ,CAAO,CAAPA,CAAAA,OAAAA,CAAAA,KAAAA;AACAO,MAAAA,gBAAgB,CAACO,YAAY,CAAZA,IAAAA,CAAjBP,EAAiBO,CAAD,CAAhBP;AACAC,MAAAA,QAAQ,IAAIA,QAAQ,CAACM,YAAY,CAAZA,IAAAA,CAArBN,EAAqBM,CAAD,CAApBN;AACD;;AAED,QAAIO,QAAQ,CAARA,EAAAA,KAAJ,KAAA,EAA2B;AACzB,UAAIV,IAAI,GAAGC,aAAa,sBAAA,aAAA,IAAxB,EAAA;;AACA,UAAIG,QAAQ,KAAZ,EAAA,EAAqB;AAEnBJ,QAAAA,IAAI,GAAGA,IAAI,CAAJA,MAAAA,CAAY,UAAA,EAAA,EAAA,CAAA;AAAA,iBAAWW,CAAC,KAA/BX,UAAmB;AAAA,SAAZA,CAAPA;AACA,YAAIY,WAAW,IAAIP,UAAU,GAAVA,CAAAA,GAAiB,CAApC,CAAA,EACEV,OAAO,CAACU,UAAU,GAAlBV,CAAO,CAAPA,CAAAA,OAAAA,CAAAA,KAAAA;AAJJ,OAAA,MAKO;AACLK,QAAAA,IAAI,CAAJA,UAAI,CAAJA,GAAmBa,IAAI,CAAJA,SAAAA,CAAeC,QAAQ,CAAA,QAAA,EAARA,EAAQ,CAARA,GAAlCd,EAAmBa,CAAnBb;AACA,YAAIY,WAAW,IAAIP,UAAU,GAAVA,CAAAA,GAAiBV,OAAO,CAA3C,MAAA,EACEA,OAAO,CAACU,UAAU,GAAlBV,CAAO,CAAPA,CAAAA,OAAAA,CAAAA,KAAAA;AACH;;AACDG,MAAAA,KAAK,KAALA,SAAAA,IAAuBI,gBAAgB,CAACF,IAAI,CAAJA,IAAAA,CAAxCF,EAAwCE,CAAD,CAAvCF;AACAK,MAAAA,QAAQ,IAAIA,QAAQ,CAACH,IAAI,CAAJA,IAAAA,CAArBG,EAAqBH,CAAD,CAApBG;AACD;AAzBH,GAAA;;AA4BA,MAAMY,WAAW,GAAIC,SAAfD,WAAeC,CAAAA,WAAD,EAA8C;AAChE,QAAIC,oBAAoB,GAAG,CAA3B,CAAA;AACA,WAAO,KAAK,CAAL,QAAA,CAAA,GAAA,CAAA,WAAA,EAAiCC,UAAAA,KAAD,EAAwB;AAC7DD,MAAAA,oBAAoB;AACpB,aAAO,KAAK,CAAL,YAAA,CAAA,KAAA,EAEL;AACEZ,QAAAA,UAAU,EAAEY;AADd,OAFK,EAKLC,KAAK,CAALA,KAAAA,CALF,QAAO,CAAP;AAFF,KAAO,CAAP;AAFF,GAAA;;AAcArB,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIC,KAAK,KAALA,SAAAA,IAAuBA,KAAK,IAAhC,aAAA,EAAmDI,gBAAgB,CAAhBA,KAAgB,CAAhBA;AADrDL,GAAAA,EAEG,CAAA,KAAA,EAAA,aAAA,EAnFmE,gBAmFnE,CAFHA;;AAKA,MAAIsB,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,eAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,gDAAE,kBAAF,GAAE,QAAF;AAGHvB,MAAAA,UAHK,EAGLA,UAHG;AAIHG,MAAAA,YAJK,EAILA,YAJG;AAKHO,MAAAA,sBALK,EAKLA,sBALG;AAMHR,MAAAA,KAAK,EAAEG;AANJ;AADP,GAAA,EAUGmB,QAAQ,IACP,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,IAAA,aAAa,EAArB,KAAA;AAA4B,IAAA,KAAK,EAAEC;AAAnC,GAAA,EAAA,OAAA,EAAA;AAAuD,IAAA,GAAG,EAAEC;AAA5D,GAAA,CAAA,EACGP,WAAW,CAbpB,QAaoB,CADd,CAXJ,CADF;AA1FF,CAAA;;AA8GA,eAAelB,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,QAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { HStack } from '../../primitives/Stack';\nimport { useThemeProps } from '../../../hooks';\nimport type { IPinInputProps } from './types';\nimport { useFormControlContext } from '../FormControl';\nimport { Platform } from 'react-native';\nimport { PinInputContext } from './Context';\nimport { themeTools } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst PinInput = ({ children, ...props }: IPinInputProps, ref?: any) => {\n  let [padding, remProps] = themeTools.extractInObject(props, [\n    'p',\n    'px',\n    'py',\n    'pt',\n    'pb',\n    'pl',\n    'pr',\n  ]);\n  const {\n    manageFocus,\n    defaultValue,\n    value,\n    space,\n    onChange,\n    ...newProps\n  } = useThemeProps('PinInput', remProps);\n  const formControlContext = useFormControlContext();\n\n  const RefList: Array<any> = [];\n  const setRefList = (ref: any, index: number) => {\n    RefList[index] = ref;\n  };\n  const [pinInputValue, setPinInputValue] = React.useState(\n    value || defaultValue\n  );\n\n  const handleChange = (newValue: string, fieldIndex: number) => {\n    let temp = (pinInputValue && [...pinInputValue]) || [];\n    temp[fieldIndex] = newValue;\n    value === undefined && setPinInputValue(temp.join(''));\n    onChange && onChange(temp.join(''));\n    if (newValue === '' && manageFocus && fieldIndex - 1 > -1)\n      RefList[fieldIndex - 1].current.focus();\n    else if (newValue && manageFocus && fieldIndex + 1 < RefList.length)\n      RefList[fieldIndex + 1].current.focus();\n    return temp.join('');\n  };\n  const handleMultiValueChange = (newValue: string, fieldIndex: number) => {\n    const pinFieldLength = RefList.length;\n    const newValueLength = newValue.length;\n    if (newValueLength >= pinFieldLength && newValueLength > 2) {\n      let splicedValue = newValue ? [...newValue] : [];\n      splicedValue.splice(pinFieldLength);\n      RefList[pinFieldLength - 1].current.focus();\n      setPinInputValue(splicedValue.join(''));\n      onChange && onChange(splicedValue.join(''));\n    }\n\n    if (Platform.OS !== 'ios') {\n      let temp = pinInputValue ? [...pinInputValue] : [];\n      if (newValue === '') {\n        // Handling Backward focus.\n        temp = temp.filter((_n, i) => i !== fieldIndex);\n        if (manageFocus && fieldIndex - 1 > -1)\n          RefList[fieldIndex - 1].current.focus();\n      } else {\n        temp[fieldIndex] = JSON.stringify(parseInt(newValue, 10) % 10);\n        if (manageFocus && fieldIndex + 1 < RefList.length)\n          RefList[fieldIndex + 1].current.focus();\n      }\n      value === undefined && setPinInputValue(temp.join(''));\n      onChange && onChange(temp.join(''));\n    }\n  };\n\n  const indexSetter = (allChildren: JSX.Element | JSX.Element[]) => {\n    let pinInputFiledCounter = -1;\n    return React.Children.map(allChildren, (child: JSX.Element) => {\n      pinInputFiledCounter++;\n      return React.cloneElement(\n        child,\n        {\n          fieldIndex: pinInputFiledCounter,\n        },\n        child.props.children\n      );\n    });\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != pinInputValue) setPinInputValue(value);\n  }, [value, pinInputValue, setPinInputValue]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <PinInputContext.Provider\n      value={{\n        ...formControlContext,\n        ...newProps,\n        setRefList,\n        handleChange,\n        handleMultiValueChange,\n        value: pinInputValue,\n      }}\n    >\n      {children && (\n        <HStack flexDirection=\"row\" space={space} {...padding} ref={ref}>\n          {indexSetter(children)}\n        </HStack>\n      )}\n    </PinInputContext.Provider>\n  );\n};\n\nexport default React.memo(React.forwardRef(PinInput));\n"]},"metadata":{},"sourceType":"module"}