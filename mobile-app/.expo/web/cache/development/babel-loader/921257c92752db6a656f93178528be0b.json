{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"outlineColor\", \"activeOutlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"lineHeight\", \"height\", \"backgroundColor\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport TextInputAdornment, { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, ADORNMENT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder, calculateOutlinedIconAndAffixTopPosition } from \"./helpers\";\nimport { AdornmentType, AdornmentSide } from \"./Adornment/enums\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function TextInputOutlined(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      _underlineColor = _ref.underlineColor,\n      customOutlineColor = _ref.outlineColor,\n      activeOutlineColor = _ref.activeOutlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref4 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref4.fontSize,\n      fontWeight = _ref4.fontWeight,\n      lineHeight = _ref4.lineHeight,\n      height = _ref4.height,\n      _ref4$backgroundColor = _ref4.backgroundColor,\n      backgroundColor = _ref4$backgroundColor === void 0 ? colors.background : _ref4$backgroundColor,\n      textAlign = _ref4.textAlign,\n      viewStyle = _objectWithoutProperties(_ref4, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    var isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n  var labelTranslationXOffset = 0;\n  var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {\n    var side = _ref2.side,\n        type = _ref2.type;\n    return side === AdornmentSide.Left && type === AdornmentType.Icon;\n  });\n\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset = (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    backgroundColor: backgroundColor,\n    errorColor: errorColor,\n    labelTranslationXOffset: labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET\n  });\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    mode: 'outlined'\n  });\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: viewStyle\n  }, React.createElement(Outline, {\n    theme: theme,\n    hasActiveOutline: hasActiveOutline,\n    focused: parentState.focused,\n    activeColor: activeColor,\n    outlineColor: outlineColor,\n    backgroundColor: backgroundColor\n  }), React.createElement(View, null, React.createElement(View, {\n    style: [styles.labelContainer, {\n      paddingTop: LABEL_PADDING_TOP,\n      minHeight: minHeight\n    }]\n  }, React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps,\n    labelBackground: LabelBackground,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-outlined'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor || placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, !multiline || multiline && height ? {\n      height: inputHeight\n    } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps)));\n};\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref3) {\n  var theme = _ref3.theme,\n      hasActiveOutline = _ref3.hasActiveOutline,\n      activeColor = _ref3.activeColor,\n      outlineColor = _ref3.outlineColor,\n      focused = _ref3.focused,\n      backgroundColor = _ref3.backgroundColor;\n  return React.createElement(View, {\n    testID: \"text-input-outline\",\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: focused ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  labelContainer: {\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","disabled","editable","error","underlineColor","outlineColor","render","props","multiline","rest","adornmentConfig","getAdornmentConfig","left","right","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","viewStyle","StyleSheet","fontSizeStyle","isTransparent","color","inputTextColor","activeColor","placeholderColor","activeOutlineColor","customOutlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","labelTranslationXOffset","isAdornmentLeftIcon","type","side","AdornmentSide","AdornmentType","ADORNMENT_SIZE","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","lineHeight","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","roundness","theme","maxFontSizeMultiplier","minHeight","rightLayout","leftAffixTopPosition","calculateOutlinedIconAndAffixTopPosition","affixHeight","leftLayout","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","isTextInputFocused","textStyle","visible","labeled","paddingTop","testID","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Outline","borderRadius","borderWidth","focused","borderColor","position","paddingHorizontal","top","bottom","labelContainer","paddingBottom","input","flexGrow","margin","zIndex","inputOutlined","inputOutlinedDense"],"mappings":";;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,kBAAA,IAAA,kBAAA,EAAA,yCAAA;AAMA,OAAA,UAAA;AACA,OAAA,eAAA;AAGA,SAAA,yBAAA,EAAA,yBAAA,EAAA,qBAAA,EAAA,cAAA,EAAA,gBAAA;AAQA,SAAA,yBAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,sBAAA,EAAA,wCAAA;AASA,SAAA,aAAA,EAAA,aAAA;AAEA,IAAMA,gCAAgC,GAAG,CAAzC,CAAA;AACA,IAAMC,iBAAiB,GAAvB,CAAA;AACA,IAAMC,UAAU,GAAhB,EAAA;AACA,IAAMC,gBAAgB,GAAtB,EAAA;AACA,IAAMC,wBAAwB,GAA9B,EAAA;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,IAAA,EA2BC;AAAA;;AA3BA,sBA2BA,IA3BA,CACzBC,QADyB;AAAA,MACzBA,QADyB,8BAAA,KAAA;AAAA,sBA2BA,IA3BA,CAEzBC,QAFyB;AAAA,MAEzBA,QAFyB,8BAAA,IAAA;AAAA,MAAA,KAAA,GA2BA,IA3BA,CAAA,KAAA;AAAA,mBA2BA,IA3BA,CAIzBC,KAJyB;AAAA,MAIzBA,KAJyB,2BAAA,KAAA;AAAA,MAAA,cAAA,GA2BA,IA3BA,CAAA,cAAA;AAAA,MAAA,eAAA,GA2BA,IA3BA,CAMzBC,cANyB;AAAA,MAAA,kBAAA,GA2BA,IA3BA,CAOzBC,YAPyB;AAAA,MAAA,kBAAA,GA2BA,IA3BA,CAAA,kBAAA;AAAA,MAAA,KAAA,GA2BA,IA3BA,CAAA,KAAA;AAAA,MAAA,KAAA,GA2BA,IA3BA,CAAA,KAAA;AAAA,MAAA,KAAA,GA2BA,IA3BA,CAAA,KAAA;AAAA,oBA2BA,IA3BA,CAYzBC,MAZyB;AAAA,MAYzBA,MAZyB,4BAYfC,UAAAA,KAAD;AAAA,WAAwB,KAAA,CAAA,aAAA,CAAA,eAAA,EAZR,KAYQ,CAAxB;AAAA,GAZgB;AAAA,uBA2BA,IA3BA,CAazBC,SAbyB;AAAA,MAazBA,SAbyB,+BAAA,KAAA;AAAA,MAAA,WAAA,GA2BA,IA3BA,CAAA,WAAA;AAAA,MAAA,QAAA,GA2BA,IA3BA,CAAA,QAAA;AAAA,MAAA,OAAA,GA2BA,IA3BA,CAAA,OAAA;AAAA,MAAA,UAAA,GA2BA,IA3BA,CAAA,UAAA;AAAA,MAAA,MAAA,GA2BA,IA3BA,CAAA,MAAA;AAAA,MAAA,YAAA,GA2BA,IA3BA,CAAA,YAAA;AAAA,MAAA,oBAAA,GA2BA,IA3BA,CAAA,oBAAA;AAAA,MAAA,uBAAA,GA2BA,IA3BA,CAAA,uBAAA;AAAA,MAAA,wBAAA,GA2BA,IA3BA,CAAA,wBAAA;AAAA,MAAA,IAAA,GA2BA,IA3BA,CAAA,IAAA;AAAA,MAAA,KAAA,GA2BA,IA3BA,CAAA,KAAA;AAAA,MAAA,oBAAA,GA2BA,IA3BA,CAAA,oBAAA;AAAA,MA0BtBC,IA1BsB,4BA2BA,IA3BA;;AA4BzB,MAAMC,eAAe,GAAGC,kBAAkB,CAAC;AAAEC,IAAAA,IAAF,EAAEA,IAAF;AAAQC,IAAAA,KAAAA,EAAAA;AAAR,GAAD,CAA1C;AAEA,MAAM,MAAN,GAAA,KAAA,CAAM,MAAN;AAAA,MAAgBC,KAAhB,GAAA,KAAA,CAAgBA,KAAhB;AACA,MAAMC,IAAI,GAAGD,KAAK,CAAlB,OAAA;AACA,MAAME,gBAAgB,GAAGC,WAAW,CAAXA,OAAAA,IAAzB,KAAA;;AAEA,cAQKK,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KARL,EAAA;AAAA,MAAM,aAAN,SACEJ,QADF;AAAA,MAAM,UAAN,SAAM,UAAN;AAAA,MAAM,UAAN,SAAM,UAAN;AAAA,MAAM,MAAN,SAAM,MAAN;AAAA,oCAKEC,eALF;AAAA,MAKEA,eALF,sCAKoBC,MAAM,CALpB,UAAN;AAAA,MAAM,SAAN,SAAM,SAAN;AAAA,MAOKC,SAPL;;AASA,MAAMH,QAAQ,GAAGK,aAAa,IAA9B,yBAAA;AAEA,MAAA,cAAA,EAAA,WAAA,EAAA,YAAA,EAAA,gBAAA,EAAA,UAAA;;AAEA,MAAA,QAAA,EAAc;AACZ,QAAMC,aAAa,GAAGC,KAAK,CAALA,kBAAK,CAALA,CAAAA,KAAAA,OAAtB,CAAA;AACAC,IAAAA,cAAc,GAAGC,WAAW,GAAGF,KAAK,CAACL,MAAM,CAAZK,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAA/BC,MAA+BD,EAA/BC;AAIAE,IAAAA,gBAAgB,GAAGR,MAAM,CAAzBQ,QAAAA;AACAvB,IAAAA,YAAY,GAAGmB,aAAa,GAAA,kBAAA,GAAwBJ,MAAM,CAA1Df,QAAAA;AAPF,GAAA,MAQO;AACLqB,IAAAA,cAAc,GAAGN,MAAM,CAAvBM,IAAAA;AACAC,IAAAA,WAAW,GAAGxB,KAAK,GAAGiB,MAAM,CAAT,KAAA,GAAkBS,kBAAkB,IAAIT,MAAM,CAAjEO,OAAAA;AACAC,IAAAA,gBAAgB,GAAGR,MAAM,CAAzBQ,WAAAA;AACAvB,IAAAA,YAAY,GAAGyB,kBAAkB,IAAIV,MAAM,CAA3Cf,WAAAA;AACA0B,IAAAA,UAAU,GAAGX,MAAM,CAAnBW,KAAAA;AACD;;AAED,MAAMC,UAAU,GAAGC,yBAAyB,GAA5C,QAAA;AACA,MAAMC,SAAS,GAAGC,yBAAyB,GAA3C,QAAA;AAEA,MAAMC,UAAU,GAAGnB,WAAW,CAAXA,WAAAA,CAAnB,KAAA;AACA,MAAMoB,WAAW,GAAGpB,WAAW,CAAXA,WAAAA,CAApB,MAAA;AACA,MAAMqB,cAAc,GAAGF,UAAU,GAAjC,CAAA;AACA,MAAMG,eAAe,GAAGF,WAAW,GAAnC,CAAA;AAEA,MAAMG,mBAAmB,GACvB,CAACC,WAAW,CAAXA,KAAAA,GAAAA,CAAAA,GAAwB,CAAzB,CAAA,KACCH,cAAc,GACZN,UAAU,GAAX,UAACA,GADFM,CAAAA,GAEC,CAACpB,QAAQ,GAAT,yBAAA,IAJJ,UACE,CADF;AAMA,MAAIwB,uBAAuB,GAA3B,CAAA;AACA,MAAMC,mBAAmB,GAAG,eAAe,CAAf,IAAA,CAC1B,UAAA,KAAA,EAAA;AAAA,QAAC,IAAD,GAAA,KAAA,CAAC,IAAD;AAAA,QAASC,IAAT,GAAA,KAAA,CAASA,IAAT;AAAA,WACEC,IAAI,KAAKC,aAAa,CAAtBD,IAAAA,IAA+BD,IAAI,KAAKG,aAAa,CADvD,IAAA;AADF,GAA4B,CAA5B;;AAIA,MAAA,mBAAA,EAAyB;AACvBL,IAAAA,uBAAuB,GACrB,CAACD,WAAW,CAAXA,KAAAA,GAAoB,CAApBA,CAAAA,GAAD,CAAA,KAAgCO,cAAc,GAAdA,gBAAAA,GADlCN,CACE,CADFA;AAED;;AAED,MAAMO,cAAc,GAClB,CAACC,KAAK,GAAA,gBAAA,GAAN,UAAA,IADF,iBAAA;AAGA,MAAMC,WAAW,GAAGC,oBAAoB,CAAA,WAAA,EAAA,MAAA,EAAxC,cAAwC,CAAxC;AAEA,MAAMC,WAAW,GAAGC,yBAAyB,CAAA,WAAA,EAAA,WAAA,EAA7C,iBAA6C,CAA7C;;AAMA,MAAIC,MAAM,IAAI,OAAA,MAAA,KAAd,QAAA,EAA0C;AAExCC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,kDAAAA;AACD;;AAED,MAAMC,eAAe,GAAG;AACtBF,IAAAA,MAAM,EAAEA,MAAM,GAAG,CAAH,MAAA,GADQ,IAAA;AAEtBhB,IAAAA,eAFsB,EAEtBA,eAFsB;AAGtBmB,IAAAA,MAAM,EAHgB,iBAAA;AAItBlD,IAAAA,SAAS,EAAEA,SAAS,GAAA,SAAA,GAJE,IAAA;AAKtB0C,IAAAA,KAAK,EAAEA,KAAK,GAAA,KAAA,GALU,IAAA;AAMtBG,IAAAA,WANsB,EAMtBA,WANsB;AAOtBnC,IAAAA,QAPsB,EAOtBA,QAPsB;AAQtByC,IAAAA,UARsB,EAQtBA,UARsB;AAStBC,IAAAA,KATsB,EAStBA,KATsB;AAUtBC,IAAAA,KAAK,EAViB,SAAA;AAWtBC,IAAAA,SAAS,EAAEC,QAAQ,CAARA,EAAAA,KAXW,SAAA;AAYtBC,IAAAA,MAAM,EAAE1C,UAAU,CAAVA,OAAAA,CACN4B,KAAK,GAAGc,MAAM,CAAT,kBAAA,GAA+BA,MAAM,CADpC1C,aAAAA;AAZc,GAAxB;AAiBA,MAAM2C,GAAG,GAAGC,gBAAgB,CAA5B,eAA4B,CAA5B;AAEA,MAAMC,UAAU,GAAGC,gBAAgB,iCAAC,eAAD;AAAuBH,IAAAA,GAAAA,EAAAA;AAAvB,KAAnC;AAEA,MAAMI,mBAAmB,GACvB,CAAA,eAAA,IAAoBhB,WAAW,GADjC,gCACE,CADF;AAGA,MAAMiB,kBAAkB,GAAGtD,gBAAgB,GACvCuD,sBAAsB,CAACtD,WAAW,CAAZ,OAAA,EADiB,gBACjB,CADiB,GAEvCA,WAAW,CAAXA,WAAAA,CAAAA,QAAAA,GAAAA,CAAAA,GAFJ,CAAA;AAMA,MAAMuD,UAAU,GAAG;AACjBZ,IAAAA,KADiB,EACjBA,KADiB;AAEjBa,IAAAA,oBAFiB,EAEjBA,oBAFiB;AAGjBH,IAAAA,kBAHiB,EAGjBA,kBAHiB;AAIjBnE,IAAAA,KAJiB,EAIjBA,KAJiB;AAKjBuE,IAAAA,gBAAgB,EAAEV,MAAM,CALP,WAAA;AAMjBK,IAAAA,mBANiB,EAMjBA,mBANiB;AAOjB7B,IAAAA,mBAPiB,EAOjBA,mBAPiB;AAQjBzB,IAAAA,IARiB,EAQjBA,IARiB;AASjBG,IAAAA,QATiB,EASjBA,QATiB;AAUjByD,IAAAA,UAViB,EAUjBA,UAViB;AAWjB3C,IAAAA,UAXiB,EAWjBA,UAXiB;AAYjB4C,IAAAA,aAAa,EAZI,qBAAA;AAajBvB,IAAAA,WAbiB,EAajBA,WAbiB;AAcjBrC,IAAAA,gBAdiB,EAcjBA,gBAdiB;AAejBW,IAAAA,WAfiB,EAejBA,WAfiB;AAgBjBC,IAAAA,gBAhBiB,EAgBjBA,gBAhBiB;AAiBjBT,IAAAA,eAAe,EAjBE,eAAA;AAkBjBY,IAAAA,UAlBiB,EAkBjBA,UAlBiB;AAmBjBW,IAAAA,uBAnBiB,EAmBjBA,uBAnBiB;AAoBjBmC,IAAAA,SAAS,EAAEC,KAAK,CApBC,SAAA;AAqBjBC,IAAAA,qBAAqB,EAAEtE,IAAI,CAACsE;AArBX,GAAnB;AAwBA,MAAMC,SAAS,GAAIzB,MAAM,KACtBL,KAAK,GAAA,gBAAA,GADR,UAAyB,CAAzB;AAGA,MAAM,UAAN,GAAA,WAAA,CAAM,UAAN;AAAA,MAAoB+B,WAApB,GAAA,WAAA,CAAoBA,WAApB;AAEA,MAAMC,oBAAoB,GAAGC,wCAAwC,CAAC;AACpE5B,IAAAA,MAAM,EAD8D,SAAA;AAEpE6B,IAAAA,WAAW,EAAEC,UAAU,CAAVA,MAAAA,IAFuD,CAAA;AAGpEC,IAAAA,YAAY,EAAE,CAAC3F;AAHqD,GAAD,CAArE;AAMA,MAAM4F,qBAAqB,GAAGJ,wCAAwC,CAAC;AACrE5B,IAAAA,MAAM,EAD+D,SAAA;AAErE6B,IAAAA,WAAW,EAAEH,WAAW,CAAXA,MAAAA,IAFwD,CAAA;AAGrEK,IAAAA,YAAY,EAAE,CAAC3F;AAHsD,GAAD,CAAtE;AAKA,MAAM6F,eAAe,GAAGL,wCAAwC,CAAC;AAC/D5B,IAAAA,MAAM,EADyD,SAAA;AAE/D6B,IAAAA,WAAW,EAFoD,cAAA;AAG/DE,IAAAA,YAAY,EAAE,CAAC3F;AAHgD,GAAD,CAAhE;AAMA,MAAM8F,eAAe,GAAG5E,KAAK,GACzBoE,WAAW,CAAXA,KAAAA,IADyB,cAAA,GAA7B,cAAA;AAIA,MAAMS,cAAc,GAAG9E,IAAI,GACvByE,UAAU,CAAVA,KAAAA,IADuB,cAAA,GAA3B,cAAA;AAIA,MAAMM,sCAAsC,GAC1CC,yCAAyC,CAAC;AACxClF,IAAAA,eADwC,EACxCA,eADwC;AAExC+E,IAAAA,eAFwC,EAExCA,eAFwC;AAGxCC,IAAAA,cAHwC,EAGxCA,cAHwC;AAIxCG,IAAAA,IAAI,EAAE;AAJkC,GAAD,CAD3C;AAOA,MAAMC,gBAAgB,+DACnBhD,aAAa,CAAd,IADoB,EAAG,oBAAH,sCAEnBA,aAAa,CAAd,KAFoB,EAEGyC,qBAFH,qBAAtB;AAIA,MAAMQ,aAAa,yDAChBjD,aAAa,CAAd,IADiB,EAAG,uBAAH,mCAEhBA,aAAa,CAAd,KAFiB,EAEMkD,wBAFN,kBAAnB;AAKA,MAAIC,cAAuC,GAAG;AAC5CvF,IAAAA,eAD4C,EAC5CA,eAD4C;AAE5CwF,IAAAA,UAF4C,EAE5CA,UAF4C;AAG5C7C,IAAAA,WAAW,oDACRN,aAAa,CAAd,IADS,EAAE,eAAF,iCAERA,aAAa,CAAd,KAFS,EAEc+C,gBAFd,gBAHiC;AAO5CC,IAAAA,aAP4C,EAO5CA,aAP4C;AAQ5CI,IAAAA,kBAAkB,EAAElF,WAAW,CARa,OAAA;AAS5C8D,IAAAA,qBAAqB,EAAEtE,IAAI,CAACsE;AATgB,GAA9C;;AAWA,MAAIrE,eAAe,CAAnB,MAAA,EAA4B;AAC1BuF,IAAAA,cAAc,mCAAG,cAAH;AAEZrF,MAAAA,IAFe,EAEfA,IAFY;AAGZC,MAAAA,KAHe,EAGfA,KAHY;AAIZuF,MAAAA,SAAS,kCAAE,IAAF;AAAalF,QAAAA,QAAX,EAAWA,QAAb;AAAuByD,QAAAA,UAAAA,EAAAA;AAAvB,QAJG;AAKZ0B,MAAAA,OAAO,EAAEpF,WAAW,CAACqF;AALT,MAAdL;AAOD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE5E;AAAb,GAAA,EAME,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACE,IAAA,KAAK,EADP,KAAA;AAEE,IAAA,gBAAgB,EAFlB,gBAAA;AAGE,IAAA,OAAO,EAAEJ,WAAW,CAHtB,OAAA;AAIE,IAAA,WAAW,EAJb,WAAA;AAKE,IAAA,YAAY,EALd,YAAA;AAME,IAAA,eAAe,EAAEE;AANnB,GAAA,CANF,EAcE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACL6C,MAAM,CADD,cAAA,EAEL;AACEuC,MAAAA,UAAU,EADZ,iBAAA;AAEEvB,MAAAA,SAAAA,EAAAA;AAFF,KAFK;AADT,GAAA,EASE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AACE,IAAA,WAAW,EADb,WAAA;AAEE,IAAA,UAAU,EAFZ,UAAA;AAGE,IAAA,eAAe,EAHjB,eAAA;AAIE,IAAA,qBAAqB,EAAEvE,IAAI,CAACsE;AAJ9B,GAAA,CATF,EAeGzE,MAfH,KAAA,IAeGA,IAAAA,MAfH,KAAA,KAAA,CAeGA,GAfH,KAAA,CAeGA,GAAAA,MAAM;AACLkG,IAAAA,MAAM,EADE;AAAH,KAAG,IAAH;AAGLC,IAAAA,GAAG,EAHK,QAAH;AAILC,IAAAA,YAJQ,EAIRA,YAJK;AAKLC,IAAAA,WAAW,EAAE/C,KAAK,GAAG3C,WAAW,CAAd,WAAA,GAA6BR,IAAI,CAL3C,WAAH;AAMLmG,IAAAA,oBAAoB,EAAEA,oBAAoB,IANlC,gBAAH;AAOL1G,IAAAA,QAAQ,EAAE,CAAA,QAAA,IAPF,QAAH;AAQL2G,IAAAA,cAAc,EACZ,OAAA,cAAA,KAAA,WAAA,GAAA,WAAA,GATM,cAAH;AAYLC,IAAAA,OAZQ,EAYRA,OAZK;AAaLC,IAAAA,MAbQ,EAaRA,MAbK;AAcLC,IAAAA,qBAAqB,EAdb,aAAH;AAeLxG,IAAAA,SAfQ,EAeRA,SAfK;AAgBLyG,IAAAA,KAAK,EAAE,CACLjD,MAAM,CADD,KAAA,EAEL,CAAA,SAAA,IAAexD,SAAS,IAAxB,MAAA,GACI;AAAE+C,MAAAA,MAAM,EAAEJ;AAAV,KADJ,GAFK,EAAA,EAAA,UAAA,kCAML,IANK;AAQHjC,MAAAA,QAFF,EAEEA,QARG;AASHyD,MAAAA,UAHF,EAGEA,UATG;AAUHlD,MAAAA,KAAK,EAJP,cANK;AAWHyF,MAAAA,iBAAiB,EAAE1G,SAAS,GAAA,KAAA,GAL9B,QANK;AAYH2G,MAAAA,SAAS,EAAEA,SAAS,GAAA,SAAA,GAEhB1E,WAAW,CAAXA,KAAAA,GAAAA,OAAAA,GAEA;AAhBD,QAkBLsB,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAyB;AAAEqD,MAAAA,OAAO,EAAE;AAAX,KAlBpB,EAAA,sCAAA;AAhBF,KAfT,CADF,EAuDE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAtEN,cAsEM,CAvDF,CAdF,CADF;AAhOF,CAAA;;AA4SA,eAAA,iBAAA;;AAWA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA;AAAA,MAAC,KAAD,GAAA,KAAA,CAAC,KAAD;AAAA,MAAC,gBAAD,GAAA,KAAA,CAAC,gBAAD;AAAA,MAAC,WAAD,GAAA,KAAA,CAAC,WAAD;AAAA,MAAC,YAAD,GAAA,KAAA,CAAC,YAAD;AAAA,MAAC,OAAD,GAAA,KAAA,CAAC,OAAD;AAAA,MAMdlG,eANc,GAAA,KAAA,CAMdA,eANc;AAAA,SAQd,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,MAAM,EADR,oBAAA;AAEE,IAAA,aAAa,EAFf,MAAA;AAGE,IAAA,KAAK,EAAE,CACL6C,MAAM,CADD,OAAA,EAGL;AACE7C,MAAAA,eADF,EACEA,eADF;AAEEmG,MAAAA,YAAY,EAAExC,KAAK,CAFrB,SAAA;AAGEyC,MAAAA,WAAW,EAAEC,OAAO,GAAA,CAAA,GAHtB,CAAA;AAIEC,MAAAA,WAAW,EAAEzG,gBAAgB,GAAA,WAAA,GAAiBX;AAJhD,KAHK;AAHT,GAAA,CARc;AAAhB,CAAA;;AAwBA,IAAM2D,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/B2C,EAAAA,WAAW,EAAE;AACXe,IAAAA,QAAQ,EADG,UAAA;AAEX9G,IAAAA,IAAI,EAFO,CAAA;AAGX+G,IAAAA,iBAAiB,EAAE5H;AAHR,GADkB;AAM/BqH,EAAAA,OAAO,EAAE;AACPM,IAAAA,QAAQ,EADD,UAAA;AAEP9G,IAAAA,IAAI,EAFG,CAAA;AAGPC,IAAAA,KAAK,EAHE,CAAA;AAIP+G,IAAAA,GAAG,EAJI,CAAA;AAKPC,IAAAA,MAAM,EAAE;AALD,GANsB;AAa/BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,aAAa,EAAE;AADD,GAbe;AAgB/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,CAAA;AAELN,IAAAA,iBAAiB,EAFZ,wBAAA;AAGLO,IAAAA,MAAM,EAHD,CAAA;AAILC,IAAAA,MAAM,EAAE;AAJH,GAhBwB;AAsB/BC,EAAAA,aAAa,EAAE;AACb7B,IAAAA,UAAU,EADG,CAAA;AAEbwB,IAAAA,aAAa,EAAE;AAFF,GAtBgB;AA0B/BM,EAAAA,kBAAkB,EAAE;AAClB9B,IAAAA,UAAU,EADQ,CAAA;AAElBwB,IAAAA,aAAa,EAAE;AAFG;AA1BW,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nconst TextInputOutlined = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor: _underlineColor,\n  outlineColor: customOutlineColor,\n  activeOutlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const adornmentConfig = getAdornmentConfig({ left, right });\n\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    lineHeight,\n    height,\n    backgroundColor = colors.background,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n  if (disabled) {\n    const isTransparent = color(customOutlineColor).alpha() === 0;\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    outlineColor = customOutlineColor || colors.placeholder;\n    errorColor = colors.error;\n  }\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n    (labelHalfWidth -\n      (labelScale * labelWidth) / 2 -\n      (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n  let labelTranslationXOffset = 0;\n  const isAdornmentLeftIcon = adornmentConfig.some(\n    ({ side, type }) =>\n      side === AdornmentSide.Left && type === AdornmentType.Icon\n  );\n  if (isAdornmentLeftIcon) {\n    labelTranslationXOffset =\n      (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n  }\n\n  const minInputHeight =\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    LABEL_PADDING_TOP\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: LABEL_PADDING_TOP,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid: Platform.OS === 'android',\n    styles: StyleSheet.flatten(\n      dense ? styles.inputOutlinedDense : styles.inputOutlined\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    backgroundColor: backgroundColor as ColorValue,\n    errorColor,\n    labelTranslationXOffset,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n\n  const minHeight = (height ||\n    (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: leftLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: rightLayout.height || 0,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n  const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n    height: minHeight,\n    affixHeight: ADORNMENT_SIZE,\n    labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n  });\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      mode: 'outlined',\n    });\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Icon]: iconTopPosition,\n      [AdornmentType.Affix]: affixTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={viewStyle}>\n      {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n      <Outline\n        theme={theme}\n        hasActiveOutline={hasActiveOutline}\n        focused={parentState.focused}\n        activeColor={activeColor}\n        outlineColor={outlineColor}\n        backgroundColor={backgroundColor}\n      />\n      <View>\n        <View\n          style={[\n            styles.labelContainer,\n            {\n              paddingTop: LABEL_PADDING_TOP,\n              minHeight,\n            },\n          ]}\n        >\n          <InputLabel\n            parentState={parentState}\n            labelProps={labelProps}\n            labelBackground={LabelBackground}\n            maxFontSizeMultiplier={rest.maxFontSizeMultiplier}\n          />\n          {render?.({\n            testID: 'text-input-outlined',\n            ...rest,\n            ref: innerRef,\n            onChangeText,\n            placeholder: label ? parentState.placeholder : rest.placeholder,\n            placeholderTextColor: placeholderTextColor || placeholderColor,\n            editable: !disabled && editable,\n            selectionColor:\n              typeof selectionColor === 'undefined'\n                ? activeColor\n                : selectionColor,\n            onFocus,\n            onBlur,\n            underlineColorAndroid: 'transparent',\n            multiline,\n            style: [\n              styles.input,\n              !multiline || (multiline && height)\n                ? { height: inputHeight }\n                : {},\n              paddingOut,\n              {\n                ...font,\n                fontSize,\n                fontWeight,\n                color: inputTextColor,\n                textAlignVertical: multiline ? 'top' : 'center',\n                textAlign: textAlign\n                  ? textAlign\n                  : I18nManager.isRTL\n                  ? 'right'\n                  : 'left',\n              },\n              Platform.OS === 'web' && { outline: 'none' },\n              adornmentStyleAdjustmentForNativeInput,\n            ],\n          } as RenderProps)}\n        </View>\n        <TextInputAdornment {...adornmentProps} />\n      </View>\n    </View>\n  );\n};\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}