{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"trigger\", \"closeOnSelect\", \"children\", \"onOpen\", \"onClose\", \"isOpen\", \"defaultIsOpen\", \"placement\"],\n    _excluded2 = [\"_overlay\", \"_presenceTransition\", \"_backdrop\"],\n    _excluded3 = [\"menuRef\", \"children\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { Popper } from \"../Popper\";\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { useControllableState } from \"../../../hooks\";\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from \"./useMenu\";\nimport Backdrop from \"../Backdrop\";\nimport { PresenceTransition } from \"../Transitions\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from \"./MenuContext\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Menu = function Menu(_ref, ref) {\n  var trigger = _ref.trigger,\n      _ref$closeOnSelect = _ref.closeOnSelect,\n      closeOnSelect = _ref$closeOnSelect === void 0 ? true : _ref$closeOnSelect,\n      children = _ref.children,\n      onOpen = _ref.onOpen,\n      onClose = _ref.onClose,\n      isOpenProp = _ref.isOpen,\n      defaultIsOpen = _ref.defaultIsOpen,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom left' : _ref$placement,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var triggerRef = React.useRef(null);\n\n  var _useControllableState = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: function onChange(value) {\n      value ? onOpen && onOpen() : onClose && onClose();\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      isOpen = _useControllableState2[0],\n      setIsOpen = _useControllableState2[1];\n\n  var _usePropsResolution = usePropsResolution('Menu', props),\n      _overlay = _usePropsResolution._overlay,\n      _presenceTransition = _usePropsResolution._presenceTransition,\n      _backdrop = _usePropsResolution._backdrop,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var handleOpen = React.useCallback(function () {\n    setIsOpen(true);\n  }, [setIsOpen]);\n  var handleClose = React.useCallback(function () {\n    setIsOpen(false);\n  }, [setIsOpen]);\n  var triggerProps = useMenuTrigger({\n    handleOpen: handleOpen,\n    isOpen: isOpen\n  });\n\n  var updatedTrigger = function updatedTrigger() {\n    return trigger(_objectSpread(_objectSpread({}, triggerProps), {}, {\n      ref: triggerRef,\n      onPress: handleOpen\n    }), {\n      open: isOpen\n    });\n  };\n\n  React.useEffect(function () {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, updatedTrigger(), React.createElement(Overlay, _extends({\n    isOpen: isOpen,\n    onRequestClose: handleClose,\n    useRNModalOnAndroid: true\n  }, _overlay, {\n    unmountOnExit: true\n  }), React.createElement(PresenceTransition, _extends({\n    visible: isOpen\n  }, _presenceTransition), React.createElement(Popper, _extends({\n    triggerRef: triggerRef,\n    onClose: handleClose,\n    placement: placement\n  }, resolvedProps), React.createElement(Backdrop, _extends({\n    onPress: handleClose\n  }, _backdrop)), React.createElement(Popper.Content, {\n    isOpen: isOpen\n  }, React.createElement(MenuContext.Provider, {\n    value: {\n      closeOnSelect: closeOnSelect,\n      onClose: handleClose\n    }\n  }, React.createElement(FocusScope, {\n    contain: true,\n    restoreFocus: true,\n    autoFocus: true\n  }, React.createElement(MenuContent, _extends({\n    menuRef: ref\n  }, resolvedProps), children))))))));\n};\n\nvar MenuContent = function MenuContent(_ref2) {\n  var menuRef = _ref2.menuRef,\n      children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded3);\n\n  var menuProps = useMenu();\n  var typeaheadProps = useMenuTypeahead(menuProps);\n  return React.createElement(Box, _extends({}, props, menuProps, typeaheadProps, {\n    ref: menuRef\n  }), React.createElement(ScrollView, null, children));\n};\n\nexport default memo(forwardRef(Menu));","map":{"version":3,"sources":["Menu.tsx"],"names":["Menu","closeOnSelect","isOpen","placement","props","triggerRef","React","useControllableState","value","defaultValue","onChange","onOpen","onClose","resolvedProps","usePropsResolution","handleOpen","setIsOpen","handleClose","triggerProps","useMenuTrigger","updatedTrigger","trigger","ref","onPress","open","AccessibilityInfo","useHasResponsiveProps","MenuContent","menuProps","useMenu","typeaheadProps","useMenuTypeahead","menuRef","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport type { IMenuProps } from './types';\nimport Box from '../../primitives/Box';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { Popper } from '../Popper';\nimport { AccessibilityInfo, ScrollView } from 'react-native';\nimport { useControllableState } from '../../../hooks';\nimport { useMenuTrigger, useMenu, useMenuTypeahead } from './useMenu';\nimport Backdrop from '../Backdrop';\nimport { PresenceTransition } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { MenuContext } from './MenuContext';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Menu = (\n  {\n    trigger,\n    closeOnSelect = true,\n    children,\n    onOpen,\n    onClose,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    placement = 'bottom left',\n    ...props\n  }: IMenuProps,\n  ref?: any\n) => {\n  const triggerRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useControllableState({\n    value: isOpenProp,\n    defaultValue: defaultIsOpen,\n    onChange: (value) => {\n      value ? onOpen && onOpen() : onClose && onClose();\n    },\n  });\n\n  const {\n    _overlay,\n    _presenceTransition,\n    _backdrop,\n    ...resolvedProps\n  } = usePropsResolution('Menu', props);\n  const handleOpen = React.useCallback(() => {\n    setIsOpen(true);\n  }, [setIsOpen]);\n\n  const handleClose = React.useCallback(() => {\n    setIsOpen(false);\n  }, [setIsOpen]);\n\n  const triggerProps = useMenuTrigger({\n    handleOpen,\n    isOpen,\n  });\n\n  const updatedTrigger = () => {\n    return trigger(\n      {\n        ...triggerProps,\n        ref: triggerRef,\n        onPress: handleOpen,\n      },\n      { open: isOpen }\n    );\n  };\n\n  React.useEffect(() => {\n    if (isOpen) {\n      AccessibilityInfo.announceForAccessibility('Popup window');\n    }\n  }, [isOpen]);\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(resolvedProps)) {\n    return null;\n  }\n  return (\n    <>\n      {updatedTrigger()}\n      <Overlay\n        isOpen={isOpen}\n        onRequestClose={handleClose}\n        useRNModalOnAndroid\n        {..._overlay}\n        unmountOnExit\n      >\n        <PresenceTransition visible={isOpen} {..._presenceTransition}>\n          <Popper\n            triggerRef={triggerRef}\n            onClose={handleClose}\n            placement={placement}\n            {...resolvedProps}\n          >\n            <Backdrop onPress={handleClose} {..._backdrop} />\n            <Popper.Content isOpen={isOpen}>\n              <MenuContext.Provider\n                value={{ closeOnSelect, onClose: handleClose }}\n              >\n                <FocusScope contain restoreFocus autoFocus>\n                  <MenuContent menuRef={ref} {...resolvedProps}>\n                    {children}\n                  </MenuContent>\n                </FocusScope>\n              </MenuContext.Provider>\n            </Popper.Content>\n          </Popper>\n        </PresenceTransition>\n      </Overlay>\n    </>\n  );\n};\n\nconst MenuContent = ({\n  menuRef,\n  children,\n  ...props\n}: Omit<IMenuProps, 'trigger'> & { menuRef: any }) => {\n  const menuProps = useMenu();\n  const typeaheadProps = useMenuTypeahead(menuProps);\n\n  return (\n    <Box {...props} {...menuProps} {...typeaheadProps} ref={menuRef}>\n      <ScrollView>{children}</ScrollView>\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Menu));\n"]},"metadata":{},"sourceType":"module"}