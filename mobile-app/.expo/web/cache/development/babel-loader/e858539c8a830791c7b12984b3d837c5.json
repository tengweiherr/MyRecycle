{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\n\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n      width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n\n  var state = _ref2.state,\n      navigation = _ref2.navigation,\n      descriptors = _ref2.descriptors,\n      defaultStatus = _ref2.defaultStatus,\n      _ref2$drawerContent = _ref2.drawerContent,\n      drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n    return React.createElement(DrawerContent, props);\n  } : _ref2$drawerContent,\n      _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n      _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n      useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n      _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n      drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n      _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n      drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n      _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n      drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n      drawerStyle = _descriptors$focusedR.drawerStyle,\n      _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n      drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n    ios: 'slide',\n    default: 'front'\n  }) : _descriptors$focusedR5,\n      gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n      _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n      keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n      _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n      overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n      _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n      swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n      _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n      swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n      _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n      swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n\n  var _React$useState = React.useState([focusedRouteKey]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n\n  var dimensions = useSafeAreaFrame();\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n\n    return function () {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n          _descriptor$options$l = _descriptor$options.lazy,\n          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n          unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n\n      var _descriptor$options2 = descriptor.options,\n          _descriptor$options2$ = _descriptor$options2.header,\n          header = _descriptor$options2$ === void 0 ? function (_ref3) {\n        var _options$headerLeft;\n\n        var layout = _ref3.layout,\n            options = _ref3.options;\n        return React.createElement(Header, _extends({}, options, {\n          layout: layout,\n          title: getHeaderTitle(options, route.name),\n          headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {\n            return React.createElement(DrawerToggleButton, props);\n          }\n        }));\n      } : _descriptor$options2$,\n          sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: descriptor.options.headerShown,\n        headerTransparent: descriptor.options.headerTransparent,\n        headerStatusBarHeight: descriptor.options.headerStatusBarHeight,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\n\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n      rest = _objectWithoutProperties(_ref4, _excluded);\n\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","drawerContent","props","detachInactiveScreens","useLegacyImplementation","Reanimated","Drawer","require","focusedRouteKey","state","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","drawerStatusBarAnimation","drawerType","ios","default","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","descriptors","React","loaded","setLoaded","dimensions","useSafeAreaFrame","colors","useTheme","drawerStatus","getDrawerStatusFromState","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","handleHardwareBack","defaultStatus","handleEscape","e","subscription","BackHandler","renderDrawerContent","renderSceneContent","styles","content","descriptor","route","lazy","unmountOnBlur","isFocused","header","options","getHeaderTitle","sceneContainerStyle","StyleSheet","zIndex","layout","backgroundColor","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","rest","flex"],"mappings":"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","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Reanimated 2 is not configured\n  // @ts-expect-error: the type definitions are incomplete\n  useLegacyImplementation = !Reanimated.isConfigured?.(),\n}: Props) {\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerTransparent={descriptor.options.headerTransparent}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}