{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { NativeBaseProvider, Box, Button, ScrollView, Stack, Center, Accordion, Text, Divider, List, Image, PresenceTransition, Pressable, VStack, Heading, HStack, FlatList, Spinner } from 'native-base';\nimport { LoadingContext, UserContext } from \"../context/context\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar Countdown = function Countdown(_ref) {\n  var focused = _ref.focused;\n  var Navigation = useNavigation();\n\n  var _useContext = useContext(LoadingContext),\n      setIsLoading = _useContext.setIsLoading;\n\n  var _useContext2 = useContext(UserContext),\n      user = _useContext2.user;\n\n  var _useState = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      countdown = _useState2[0],\n      setCountdown = _useState2[1];\n\n  var deadlineRef = useRef(user.last_played ? new Date(new Date().setTime(new Date(user.last_played).getTime() + 24 * 60 * 60 * 1000)) : 0);\n  var diffFromLastPlayed = useRef(new Date());\n  useEffect(function () {\n    setIsLoading(true);\n    deadlineRef.current = user.last_played ? new Date(new Date().setTime(new Date(user.last_played).getTime() + 24 * 60 * 60 * 1000)) : 0;\n    var timerId = setInterval(function () {\n      var Difference_In_Time = deadlineRef.current - new Date();\n      var Difference_In_Days = Difference_In_Time / (1000 * 3600 * 24);\n      var Difference_In_Hours = Difference_In_Days * 24;\n      var Difference_In_Minutes = (Difference_In_Hours - parseInt(Difference_In_Hours.toString().split(\".\")[0])) * 60;\n      var Difference_In_Seconds = (Difference_In_Minutes - parseInt(Difference_In_Minutes.toString().split(\".\")[0])) * 60;\n      diffFromLastPlayed.current = Difference_In_Time / (1000 * 3600 * 24);\n      setCountdown({\n        hours: Difference_In_Hours.toString().split(\".\")[0],\n        minutes: Difference_In_Minutes.toString().split(\".\")[0],\n        seconds: Difference_In_Seconds.toString().split(\".\")[0]\n      });\n      setIsLoading(false);\n    }, 1000);\n    return function () {\n      clearInterval(timerId);\n    };\n  }, [user.last_played]);\n  return _jsx(_Fragment, {\n    children: diffFromLastPlayed.current < 0 ? _jsx(VStack, {\n      justifyContent: \"flex-end\",\n      h: \"full\",\n      children: _jsx(TouchableOpacity, {\n        onPress: function onPress() {\n          return Navigation.navigate(\"Game\");\n        },\n        children: _jsx(Center, {\n          backgroundColor: \"#FC8B10\",\n          px: \"3\",\n          py: \"1\",\n          rounded: \"2xl\",\n          borderWidth: \"1\",\n          borderColor: \"#FC8B10\",\n          children: _jsx(Text, {\n            fontSize: \"sm\",\n            color: \"white\",\n            bold: true,\n            children: \"Play Now\"\n          })\n        })\n      })\n    }) : _jsxs(VStack, {\n      justifyContent: \"space-between\",\n      h: \"full\",\n      space: 1,\n      children: [_jsxs(VStack, {\n        children: [_jsx(Text, {\n          textAlign: \"right\",\n          fontSize: 12,\n          bold: true,\n          color: \"red.500\",\n          children: \"Next game in\"\n        }), _jsxs(Text, {\n          textAlign: \"right\",\n          fontSize: 12,\n          bold: true,\n          color: \"red.500\",\n          children: [countdown.hours > 9 ? countdown.hours : \"0\" + countdown.hours, \":\", countdown.minutes > 10 ? countdown.minutes : \"0\" + countdown.minutes, \":\", countdown.seconds > 9 ? countdown.seconds : \"0\" + countdown.seconds]\n        })]\n      }), _jsx(TouchableOpacity, {\n        children: _jsx(Center, {\n          backgroundColor: \"gray.400\",\n          px: \"3\",\n          py: \"1\",\n          rounded: \"2xl\",\n          borderWidth: \"1\",\n          borderColor: \"gray.400\",\n          children: _jsx(Text, {\n            fontSize: \"sm\",\n            color: \"white\",\n            bold: true,\n            children: \"Play Now\"\n          })\n        })\n      })]\n    })\n  });\n};\n\nexport default (function () {\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Countdown, {})\n  });\n});","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/components/Countdown.js"],"names":["React","useContext","useEffect","useRef","useState","NativeBaseProvider","Box","Button","ScrollView","Stack","Center","Accordion","Text","Divider","List","Image","PresenceTransition","Pressable","VStack","Heading","HStack","FlatList","Spinner","LoadingContext","UserContext","useNavigation","Countdown","focused","Navigation","setIsLoading","user","hours","minutes","seconds","countdown","setCountdown","deadlineRef","last_played","Date","setTime","getTime","diffFromLastPlayed","current","timerId","setInterval","Difference_In_Time","Difference_In_Days","Difference_In_Hours","Difference_In_Minutes","parseInt","toString","split","Difference_In_Seconds","clearInterval","navigate"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { NativeBaseProvider, Box, Button, ScrollView, Stack, Center, Accordion, Text, Divider, List, Image, PresenceTransition, Pressable, VStack, Heading, HStack, FlatList, Spinner } from 'native-base';\nimport { LoadingContext,UserContext } from \"../context/context\";\nimport { TouchableOpacity } from \"react-native\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst Countdown = ({focused}) => {\n\n    const Navigation = useNavigation(); \n\n    const { setIsLoading } = useContext(LoadingContext);\n    const { user } = useContext(UserContext);\n\n    const [countdown, setCountdown] = useState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n\n    const deadlineRef = useRef(user.last_played\n      ? new Date(new Date().setTime(new Date(user.last_played).getTime()+(24*60*60*1000)))\n      : 0);\n    const diffFromLastPlayed = useRef(new Date());\n  \n    useEffect(() => {\n\n      setIsLoading(true);\n\n      deadlineRef.current = user.last_played\n      ? new Date(new Date().setTime(new Date(user.last_played).getTime()+(24*60*60*1000)))\n      : 0;\n\n        const timerId = setInterval(() => {\n            \n          var Difference_In_Time = deadlineRef.current - new Date();\n          var Difference_In_Days = (Difference_In_Time/(1000 * 3600 * 24));\n          var Difference_In_Hours = Difference_In_Days*24;\n          var Difference_In_Minutes = (Difference_In_Hours-parseInt(Difference_In_Hours.toString().split(\".\")[0]))*60;\n          var Difference_In_Seconds = (Difference_In_Minutes-parseInt(Difference_In_Minutes.toString().split(\".\")[0]))*60;\n    \n          diffFromLastPlayed.current = Difference_In_Time / (1000 * 3600 * 24);\n    \n          setCountdown({\n            hours: Difference_In_Hours.toString().split(\".\")[0],\n            minutes: Difference_In_Minutes.toString().split(\".\")[0],\n            seconds: Difference_In_Seconds.toString().split(\".\")[0]\n          });\n\n          setIsLoading(false);\n\n        }, 1000);\n        return () => {\n          clearInterval(timerId);\n        };\n\n    }, [user.last_played])\n    \n    // useEffect(() => {\n    //   const timerId = setInterval(() => {\n    //     timerRef.current -= 1;\n    //     if (timerRef.current < 0) {\n    //       clearInterval(timerId);\n    //     } else {\n    //       setTime(timerRef.current);\n    //     }\n    //   }, 1000);\n    //   return () => {\n    //     clearInterval(timerId);\n    //   };\n    // }, []);\n  \n  return (\n      <>\n      {diffFromLastPlayed.current < 0 ? \n      <VStack justifyContent=\"flex-end\" h=\"full\">\n        {/* <Text fontSize={10} textAlign=\"right\">Available</Text> */}\n        <TouchableOpacity onPress={()=>Navigation.navigate(\"Game\")}>\n          <Center backgroundColor=\"#FC8B10\" px=\"3\" py=\"1\" rounded=\"2xl\" borderWidth=\"1\" borderColor=\"#FC8B10\">\n            <Text fontSize=\"sm\" color=\"white\" bold>Play Now</Text>\n          </Center>\n        </TouchableOpacity> \n      </VStack>\n      :\n      <VStack justifyContent=\"space-between\" h=\"full\" space={1}>\n        <VStack>\n          <Text textAlign=\"right\" fontSize={12} bold color=\"red.500\">Next game in</Text>\n          <Text textAlign=\"right\" fontSize={12} bold color=\"red.500\">{countdown.hours>9?countdown.hours:\"0\"+countdown.hours}:{countdown.minutes>10?countdown.minutes:\"0\"+countdown.minutes}:{countdown.seconds>9?countdown.seconds:\"0\"+countdown.seconds}</Text>\n        </VStack>\n        <TouchableOpacity>\n          <Center backgroundColor=\"gray.400\" px=\"3\" py=\"1\" rounded=\"2xl\" borderWidth=\"1\" borderColor=\"gray.400\">\n            <Text fontSize=\"sm\" color=\"white\" bold>Play Now</Text>\n          </Center>\n        </TouchableOpacity> \n      </VStack>\n      }\n      </>\n  );\n};\n\nexport default () => {\n    return (\n      <NativeBaseProvider>\n          <Countdown />\n      </NativeBaseProvider>\n    )\n};\n"]},"metadata":{},"sourceType":"module"}