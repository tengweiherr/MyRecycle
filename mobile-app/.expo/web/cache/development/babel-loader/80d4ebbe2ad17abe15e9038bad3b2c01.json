{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"defaultValue\", \"keepWithinRange\", \"value\", \"min\", \"max\", \"onChange\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { useThemeProps } from \"../../../hooks\";\nimport { useFormControlContext } from \"../FormControl\";\nimport { NumberInputContext } from \"./Context\";\nimport Box from \"../../primitives/Box\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar NumberInput = function NumberInput(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useThemeProps = useThemeProps('NumberInput', props),\n      defaultValue = _useThemeProps.defaultValue,\n      keepWithinRange = _useThemeProps.keepWithinRange,\n      value = _useThemeProps.value,\n      min = _useThemeProps.min,\n      max = _useThemeProps.max,\n      onChange = _useThemeProps.onChange,\n      newProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n\n  var formControlContext = useFormControlContext();\n\n  var _React$useState = React.useState(parseInt(value || defaultValue, 10)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      numberInputValue = _React$useState2[0],\n      setNumberInputValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      numberInputStepper = _React$useState4[0],\n      setNumberInputStepper = _React$useState4[1];\n\n  var handleChange = function handleChange(newValue) {\n    var temp = newValue;\n    setNumberInputValue(temp);\n\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);else if (newValue > max) setNumberInputValue(max);\n    }\n\n    onChange && onChange(temp);\n  };\n\n  var handleChangeWithoutCheck = function handleChangeWithoutCheck(newValue) {\n    var temp = newValue;\n    setNumberInputValue(temp);\n  };\n\n  React.useEffect(function () {\n    if (value !== undefined && value != numberInputValue) setNumberInputValue(value);\n  }, [value, numberInputValue, setNumberInputValue]);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, {\n    ref: ref\n  }, React.createElement(NumberInputContext.Provider, {\n    value: _objectSpread(_objectSpread(_objectSpread({}, formControlContext), newProps), {}, {\n      min: min,\n      max: max,\n      handleChange: handleChange,\n      handleChangeWithoutCheck: handleChangeWithoutCheck,\n      numberInputValue: numberInputValue,\n      numberInputStepper: numberInputStepper,\n      setNumberInputStepper: setNumberInputStepper,\n      isControlled: value !== undefined\n    })\n  }, children));\n};\n\nexport default React.memo(React.forwardRef(NumberInput));","map":{"version":3,"sources":["NumberInput.tsx"],"names":["NumberInput","props","newProps","useThemeProps","formControlContext","useFormControlContext","React","parseInt","value","handleChange","newValue","temp","setNumberInputValue","onChange","handleChangeWithoutCheck","useHasResponsiveProps","ref","min","max","numberInputValue","numberInputStepper","setNumberInputStepper","isControlled","undefined"],"mappings":";;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,aAAA;AACA,SAAA,qBAAA;AAEA,SAAA,kBAAA;AACA,OAAA,GAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAAA,GAAA,EAA0D;AAAA,MAAzD,QAAyD,QAAzD,QAAyD;AAAA,MAA1CC,KAA0C;;AAC5E,uBAQIE,aAAa,CAAA,aAAA,EARjB,KAQiB,CARjB;AAAA,MAAM,YAAN,kBAAM,YAAN;AAAA,MAAM,eAAN,kBAAM,eAAN;AAAA,MAAM,KAAN,kBAAM,KAAN;AAAA,MAAM,GAAN,kBAAM,GAAN;AAAA,MAAM,GAAN,kBAAM,GAAN;AAAA,MAAM,QAAN,kBAAM,QAAN;AAAA,MAOKD,QAPL;;AASA,MAAME,kBAAkB,GAAGC,qBAA3B,EAAA;;AAEA,wBAAgDC,KAAK,CAALA,QAAAA,CAC9CC,QAAQ,CAACC,KAAK,IAAN,YAAA,EADV,EACU,CADsCF,CAAhD;AAAA;AAAA,MAAM,gBAAN;AAAA,MAAM,mBAAN;;AAGA,yBAAoDA,KAAK,CAALA,QAAAA,CAApD,IAAoDA,CAApD;AAAA;AAAA,MAAM,kBAAN;AAAA,MAAM,qBAAN;;AACA,MAAMG,YAAY,GAAIC,SAAhBD,YAAgBC,CAAAA,QAAD,EAAsB;AACzC,QAAMC,IAAI,GAAV,QAAA;AACAC,IAAAA,mBAAmB,CAAnBA,IAAmB,CAAnBA;;AACA,QAAA,eAAA,EAAqB;AACnB,UAAIF,QAAQ,GAAZ,GAAA,EAAoBE,mBAAmB,CAAvC,GAAuC,CAAnBA,CAApB,KACK,IAAIF,QAAQ,GAAZ,GAAA,EAAoBE,mBAAmB,CAAnBA,GAAmB,CAAnBA;AALc;;AAQzCC,IAAAA,QAAQ,IAAIA,QAAQ,CAApBA,IAAoB,CAApBA;AARF,GAAA;;AAUA,MAAMC,wBAAwB,GAAIJ,SAA5BI,wBAA4BJ,CAAAA,QAAD,EAAsB;AACrD,QAAMC,IAAI,GAAV,QAAA;AACAC,IAAAA,mBAAmB,CAAnBA,IAAmB,CAAnBA;AAFF,GAAA;;AAKAN,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAIE,KAAK,KAALA,SAAAA,IAAuBA,KAAK,IAAhC,gBAAA,EACEI,mBAAmB,CAAnBA,KAAmB,CAAnBA;AAFJN,GAAAA,EAGG,CAAA,KAAA,EAAA,gBAAA,EAlCyE,mBAkCzE,CAHHA;;AAKA,MAAIS,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,IAAA,GAAG,EAAEC;AAAV,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,gDAAE,kBAAF,GAAE,QAAF;AAGHC,MAAAA,GAHK,EAGLA,GAHG;AAIHC,MAAAA,GAJK,EAILA,GAJG;AAKHT,MAAAA,YALK,EAKLA,YALG;AAMHK,MAAAA,wBANK,EAMLA,wBANG;AAOHK,MAAAA,gBAPK,EAOLA,gBAPG;AAQHC,MAAAA,kBARK,EAQLA,kBARG;AASHC,MAAAA,qBATK,EASLA,qBATG;AAUHC,MAAAA,YAAY,EAAEd,KAAK,KAAKe;AAVrB;AADP,GAAA,EAFJ,QAEI,CADF,CADF;AAvCF,CAAA;;AA6DA,eAAejB,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,WAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { useThemeProps } from '../../../hooks';\nimport { useFormControlContext } from '../FormControl';\nimport type { INumberInputProps } from './types';\nimport { NumberInputContext } from './Context';\nimport Box from '../../primitives/Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInput = ({ children, ...props }: INumberInputProps, ref?: any) => {\n  const {\n    defaultValue,\n    keepWithinRange,\n    value,\n    min,\n    max,\n    onChange,\n    ...newProps\n  } = useThemeProps('NumberInput', props);\n  const formControlContext = useFormControlContext();\n\n  const [numberInputValue, setNumberInputValue] = React.useState(\n    parseInt(value || defaultValue, 10)\n  );\n  const [numberInputStepper, setNumberInputStepper] = React.useState(null);\n  const handleChange = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n    if (keepWithinRange) {\n      if (newValue < min) setNumberInputValue(min);\n      else if (newValue > max) setNumberInputValue(max);\n    }\n    //NOTE: only calling onChange on stepper click or blur event of input.\n    onChange && onChange(temp);\n  };\n  const handleChangeWithoutCheck = (newValue: number) => {\n    const temp = newValue;\n    setNumberInputValue(temp);\n  };\n\n  React.useEffect(() => {\n    if (value !== undefined && value != numberInputValue)\n      setNumberInputValue(value);\n  }, [value, numberInputValue, setNumberInputValue]);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <Box ref={ref}>\n      <NumberInputContext.Provider\n        value={{\n          ...formControlContext,\n          ...newProps,\n          min,\n          max,\n          handleChange,\n          handleChangeWithoutCheck,\n          numberInputValue,\n          numberInputStepper,\n          setNumberInputStepper,\n          isControlled: value !== undefined,\n        }}\n      >\n        {children}\n      </NumberInputContext.Provider>\n    </Box>\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInput));\n"]},"metadata":{},"sourceType":"module"}