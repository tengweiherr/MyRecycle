{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\nimport { PitchCorrectionQuality } from \"./AV.types\";\nexport var _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS = 500;\nexport var _DEFAULT_INITIAL_PLAYBACK_STATUS = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false\n};\nexport function getNativeSourceFromSource(source) {\n  var uri = null;\n  var overridingExtension = null;\n  var headers;\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension: overridingExtension,\n      headers: headers\n    };\n  }\n\n  var asset = _getAssetFromPlaybackSource(source);\n\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (source != null && typeof source !== 'number' && 'uri' in source && typeof source.uri === 'string') {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (source != null && typeof source !== 'number' && 'overrideFileExtensionAndroid' in source && typeof source.overrideFileExtensionAndroid === 'string') {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (source != null && typeof source !== 'number' && 'headers' in source && typeof source.headers === 'object') {\n    headers = source.headers;\n  }\n\n  return {\n    uri: uri,\n    overridingExtension: overridingExtension,\n    headers: headers\n  };\n}\n\nfunction _getAssetFromPlaybackSource(source) {\n  if (source == null) {\n    return null;\n  }\n\n  var asset = null;\n\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n\n  return asset;\n}\n\nexport function assertStatusValuesInBounds(status) {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\nexport function getNativeSourceAndFullInitialStatusForLoadAsync(source, initialStatus, downloadFirst) {\n  var fullInitialStatus, asset, nativeSource;\n  return _regeneratorRuntime.async(function getNativeSourceAndFullInitialStatusForLoadAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fullInitialStatus = initialStatus == null ? _DEFAULT_INITIAL_PLAYBACK_STATUS : _objectSpread(_objectSpread({}, _DEFAULT_INITIAL_PLAYBACK_STATUS), initialStatus);\n          assertStatusValuesInBounds(fullInitialStatus);\n\n          if (!(typeof source === 'string' && Platform.OS === 'web')) {\n            _context.next = 4;\n            break;\n          }\n\n          return _context.abrupt(\"return\", {\n            nativeSource: {\n              uri: source,\n              overridingExtension: null\n            },\n            fullInitialStatus: fullInitialStatus\n          });\n\n        case 4:\n          asset = _getAssetFromPlaybackSource(source);\n\n          if (!(downloadFirst && asset)) {\n            _context.next = 8;\n            break;\n          }\n\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(asset.downloadAsync());\n\n        case 8:\n          nativeSource = getNativeSourceFromSource(source);\n\n          if (!(nativeSource === null)) {\n            _context.next = 11;\n            break;\n          }\n\n          throw new Error(\"Cannot load an AV asset from a null playback source\");\n\n        case 11:\n          return _context.abrupt(\"return\", {\n            nativeSource: nativeSource,\n            fullInitialStatus: fullInitialStatus\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUnloadedStatus() {\n  var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return _objectSpread({\n    isLoaded: false\n  }, error ? {\n    error: error\n  } : null);\n}\nexport var PlaybackMixin = {\n  playAsync: function playAsync() {\n    var _this = this;\n\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", _this.setStatusAsync({\n                shouldPlay: true\n              }));\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  playFromPositionAsync: function playFromPositionAsync(positionMillis) {\n    var _arguments = arguments,\n        _this2 = this;\n\n    return function _callee2() {\n      var tolerances;\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              tolerances = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n              return _context3.abrupt(\"return\", _this2.setStatusAsync({\n                positionMillis: positionMillis,\n                shouldPlay: true,\n                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n                seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  pauseAsync: function pauseAsync() {\n    var _this3 = this;\n\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", _this3.setStatusAsync({\n                shouldPlay: false\n              }));\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  stopAsync: function stopAsync() {\n    var _this4 = this;\n\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", _this4.setStatusAsync({\n                positionMillis: 0,\n                shouldPlay: false\n              }));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setPositionAsync: function setPositionAsync(positionMillis) {\n    var _arguments2 = arguments,\n        _this5 = this;\n\n    return function _callee5() {\n      var tolerances;\n      return _regeneratorRuntime.async(function _callee5$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              tolerances = _arguments2.length > 1 && _arguments2[1] !== undefined ? _arguments2[1] : {};\n              return _context6.abrupt(\"return\", _this5.setStatusAsync({\n                positionMillis: positionMillis,\n                seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n                seekMillisToleranceBefore: tolerances.toleranceMillisBefore\n              }));\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setRateAsync: function setRateAsync(rate) {\n    var _arguments3 = arguments,\n        _this6 = this;\n\n    return function _callee6() {\n      var shouldCorrectPitch, pitchCorrectionQuality;\n      return _regeneratorRuntime.async(function _callee6$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              shouldCorrectPitch = _arguments3.length > 1 && _arguments3[1] !== undefined ? _arguments3[1] : false;\n              pitchCorrectionQuality = _arguments3.length > 2 && _arguments3[2] !== undefined ? _arguments3[2] : PitchCorrectionQuality.Low;\n              return _context7.abrupt(\"return\", _this6.setStatusAsync({\n                rate: rate,\n                shouldCorrectPitch: shouldCorrectPitch,\n                pitchCorrectionQuality: pitchCorrectionQuality\n              }));\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setVolumeAsync: function setVolumeAsync(volume) {\n    var _this7 = this;\n\n    return function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", _this7.setStatusAsync({\n                volume: volume\n              }));\n\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setIsMutedAsync: function setIsMutedAsync(isMuted) {\n    var _this8 = this;\n\n    return function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", _this8.setStatusAsync({\n                isMuted: isMuted\n              }));\n\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setIsLoopingAsync: function setIsLoopingAsync(isLooping) {\n    var _this9 = this;\n\n    return function _callee9() {\n      return _regeneratorRuntime.async(function _callee9$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", _this9.setStatusAsync({\n                isLooping: isLooping\n              }));\n\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  setProgressUpdateIntervalAsync: function setProgressUpdateIntervalAsync(progressUpdateIntervalMillis) {\n    var _this10 = this;\n\n    return function _callee10() {\n      return _regeneratorRuntime.async(function _callee10$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              return _context11.abrupt(\"return\", _this10.setStatusAsync({\n                progressUpdateIntervalMillis: progressUpdateIntervalMillis\n              }));\n\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nexport * from \"./AV.types\";","map":{"version":3,"sources":["../src/AV.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport { Platform } from 'expo-modules-core';\n\nimport {\n  AVPlaybackSource,\n  AVPlaybackNativeSource,\n  AVPlaybackStatus,\n  AVPlaybackStatusToSet,\n  PitchCorrectionQuality,\n} from './AV.types';\n\n// TODO add:\n//  disableFocusOnAndroid\n//  audio routes (at least did become noisy on android)\n//  pan\n//  pitch\n//  API to explicitly request audio focus / session\n//  API to select stream type on Android\n//  subtitles API\n\nexport const _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS: number = 500;\nexport const _DEFAULT_INITIAL_PLAYBACK_STATUS: AVPlaybackStatusToSet = {\n  positionMillis: 0,\n  progressUpdateIntervalMillis: _DEFAULT_PROGRESS_UPDATE_INTERVAL_MILLIS,\n  shouldPlay: false,\n  rate: 1.0,\n  shouldCorrectPitch: false,\n  volume: 1.0,\n  isMuted: false,\n  isLooping: false,\n};\n\nexport function getNativeSourceFromSource(\n  source?: AVPlaybackSource | null\n): AVPlaybackNativeSource | null {\n  let uri: string | null = null;\n  let overridingExtension: string | null = null;\n  let headers: { [fieldName: string]: string } | undefined;\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      uri: source,\n      overridingExtension,\n      headers,\n    };\n  }\n\n  const asset: Asset | null = _getAssetFromPlaybackSource(source);\n  if (asset != null) {\n    uri = asset.localUri || asset.uri;\n  } else if (\n    source != null &&\n    typeof source !== 'number' &&\n    'uri' in source &&\n    typeof source.uri === 'string'\n  ) {\n    uri = source.uri;\n  }\n\n  if (uri == null) {\n    return null;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'overrideFileExtensionAndroid' in source &&\n    typeof source.overrideFileExtensionAndroid === 'string'\n  ) {\n    overridingExtension = source.overrideFileExtensionAndroid;\n  }\n\n  if (\n    source != null &&\n    typeof source !== 'number' &&\n    'headers' in source &&\n    typeof source.headers === 'object'\n  ) {\n    headers = source.headers;\n  }\n  return { uri, overridingExtension, headers };\n}\n\nfunction _getAssetFromPlaybackSource(source?: AVPlaybackSource | null): Asset | null {\n  if (source == null) {\n    return null;\n  }\n\n  let asset: Asset | null = null;\n  if (typeof source === 'number') {\n    asset = Asset.fromModule(source);\n  } else if (source instanceof Asset) {\n    asset = source;\n  }\n  return asset;\n}\n\nexport function assertStatusValuesInBounds(status: AVPlaybackStatusToSet): void {\n  if (typeof status.rate === 'number' && (status.rate < 0 || status.rate > 32)) {\n    throw new RangeError('Rate value must be between 0.0 and 32.0');\n  }\n  if (typeof status.volume === 'number' && (status.volume < 0 || status.volume > 1)) {\n    throw new RangeError('Volume value must be between 0.0 and 1.0');\n  }\n}\n\nexport async function getNativeSourceAndFullInitialStatusForLoadAsync(\n  source: AVPlaybackSource | null,\n  initialStatus: AVPlaybackStatusToSet | null,\n  downloadFirst: boolean\n): Promise<{\n  nativeSource: AVPlaybackNativeSource;\n  fullInitialStatus: AVPlaybackStatusToSet;\n}> {\n  // Get the full initial status\n  const fullInitialStatus: AVPlaybackStatusToSet =\n    initialStatus == null\n      ? _DEFAULT_INITIAL_PLAYBACK_STATUS\n      : {\n          ..._DEFAULT_INITIAL_PLAYBACK_STATUS,\n          ...initialStatus,\n        };\n  assertStatusValuesInBounds(fullInitialStatus);\n\n  if (typeof source === 'string' && Platform.OS === 'web') {\n    return {\n      nativeSource: {\n        uri: source,\n        overridingExtension: null,\n      },\n      fullInitialStatus,\n    };\n  }\n\n  // Download first if necessary.\n  const asset = _getAssetFromPlaybackSource(source);\n  if (downloadFirst && asset) {\n    // TODO we can download remote uri too once @nikki93 has integrated this into Asset\n    await asset.downloadAsync();\n  }\n\n  // Get the native source\n  const nativeSource: AVPlaybackNativeSource | null = getNativeSourceFromSource(source);\n\n  if (nativeSource === null) {\n    throw new Error(`Cannot load an AV asset from a null playback source`);\n  }\n\n  return { nativeSource, fullInitialStatus };\n}\n\nexport function getUnloadedStatus(error: string | null = null): AVPlaybackStatus {\n  return {\n    isLoaded: false,\n    ...(error ? { error } : null),\n  };\n}\n\nexport interface AV {\n  setStatusAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n  getStatusAsync(): Promise<AVPlaybackStatus>;\n}\n\nexport interface Playback extends AV {\n  playAsync(): Promise<AVPlaybackStatus>;\n  loadAsync(\n    source: AVPlaybackSource,\n    initialStatus: AVPlaybackStatusToSet,\n    downloadAsync: boolean\n  ): Promise<AVPlaybackStatus>;\n  unloadAsync(): Promise<AVPlaybackStatus>;\n  playFromPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<AVPlaybackStatus>;\n  pauseAsync(): Promise<AVPlaybackStatus>;\n  stopAsync(): Promise<AVPlaybackStatus>;\n  replayAsync(status: AVPlaybackStatusToSet): Promise<AVPlaybackStatus>;\n  setPositionAsync(\n    positionMillis: number,\n    tolerances?: { toleranceMillisBefore?: number; toleranceMillisAfter?: number }\n  ): Promise<AVPlaybackStatus>;\n  setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean,\n    pitchCorrectionQuality?: PitchCorrectionQuality\n  ): Promise<AVPlaybackStatus>;\n  setVolumeAsync(volume: number): Promise<AVPlaybackStatus>;\n  setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus>;\n  setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus>;\n  setProgressUpdateIntervalAsync(progressUpdateIntervalMillis: number): Promise<AVPlaybackStatus>;\n}\n\n/**\n * A mixin that defines common playback methods for A/V classes so they implement the `Playback`\n * interface\n */\nexport const PlaybackMixin = {\n  async playAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: true });\n  },\n\n  async playFromPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      shouldPlay: true,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async pauseAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ shouldPlay: false });\n  },\n\n  async stopAsync(): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ positionMillis: 0, shouldPlay: false });\n  },\n\n  async setPositionAsync(\n    positionMillis: number,\n    tolerances: { toleranceMillisBefore?: number; toleranceMillisAfter?: number } = {}\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      positionMillis,\n      seekMillisToleranceAfter: tolerances.toleranceMillisAfter,\n      seekMillisToleranceBefore: tolerances.toleranceMillisBefore,\n    });\n  },\n\n  async setRateAsync(\n    rate: number,\n    shouldCorrectPitch: boolean = false,\n    pitchCorrectionQuality: PitchCorrectionQuality = PitchCorrectionQuality.Low\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({\n      rate,\n      shouldCorrectPitch,\n      pitchCorrectionQuality,\n    });\n  },\n\n  async setVolumeAsync(volume: number): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ volume });\n  },\n\n  async setIsMutedAsync(isMuted: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isMuted });\n  },\n\n  async setIsLoopingAsync(isLooping: boolean): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ isLooping });\n  },\n\n  async setProgressUpdateIntervalAsync(\n    progressUpdateIntervalMillis: number\n  ): Promise<AVPlaybackStatus> {\n    return (this as any as Playback).setStatusAsync({ progressUpdateIntervalMillis });\n  },\n};\n\nexport * from './AV.types';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}