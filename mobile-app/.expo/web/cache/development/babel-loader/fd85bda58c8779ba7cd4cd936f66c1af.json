{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Marker from \"./MapMarker\";\nimport Polyline from \"./MapPolyline\";\nimport Polygon from \"./MapPolygon\";\nimport { ColorPropType } from \"react-native-web/dist/index\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar propTypes = {\n  geojson: PropTypes.object.isRequired,\n  strokeColor: ColorPropType,\n  fillColor: ColorPropType,\n  strokeWidth: PropTypes.number,\n  lineDashPhase: PropTypes.number,\n  tappable: PropTypes.boolean,\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n  miterLimit: PropTypes.number,\n  zIndex: PropTypes.number,\n  onPress: PropTypes.func,\n  markerComponent: PropTypes.node,\n  title: PropTypes.string\n};\n\nvar Geojson = function Geojson(props) {\n  var title = props.title,\n      image = props.image,\n      zIndex = props.zIndex,\n      _onPress = props.onPress,\n      lineCap = props.lineCap,\n      lineJoin = props.lineJoin,\n      tappable = props.tappable,\n      miterLimit = props.miterLimit,\n      lineDashPhase = props.lineDashPhase,\n      lineDashPattern = props.lineDashPattern,\n      markerComponent = props.markerComponent;\n  var overlays = makeOverlays(props.geojson.features);\n  return _jsx(React.Fragment, {\n    children: overlays.map(function (overlay, index) {\n      var fillColor = getColor(props, overlay, 'fill', 'fillColor');\n      var strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\n      var markerColor = getColor(props, overlay, 'marker-color', 'color');\n      var strokeWidth = getStrokeWidth(props, overlay);\n\n      if (overlay.type === 'point') {\n        return _jsx(Marker, {\n          coordinate: overlay.coordinates,\n          image: image,\n          title: title,\n          pinColor: markerColor,\n          zIndex: zIndex,\n          onPress: function onPress() {\n            return _onPress && _onPress(overlay);\n          },\n          children: markerComponent\n        }, index);\n      }\n\n      if (overlay.type === 'polygon') {\n        return _jsx(Polygon, {\n          coordinates: overlay.coordinates,\n          holes: overlay.holes,\n          strokeColor: strokeColor,\n          fillColor: fillColor,\n          strokeWidth: strokeWidth,\n          tappable: tappable,\n          onPress: function onPress() {\n            return _onPress && _onPress(overlay);\n          },\n          zIndex: zIndex\n        }, index);\n      }\n\n      if (overlay.type === 'polyline') {\n        return _jsx(Polyline, {\n          coordinates: overlay.coordinates,\n          strokeColor: strokeColor,\n          strokeWidth: strokeWidth,\n          lineDashPhase: lineDashPhase,\n          lineDashPattern: lineDashPattern,\n          lineCap: lineCap,\n          lineJoin: lineJoin,\n          miterLimit: miterLimit,\n          zIndex: zIndex,\n          tappable: tappable,\n          onPress: function onPress() {\n            return _onPress && _onPress(overlay);\n          }\n        }, index);\n      }\n    })\n  });\n};\n\nGeojson.propTypes = propTypes;\nexport default Geojson;\nexport var makeOverlays = function makeOverlays(features) {\n  var points = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'point'\n    });\n  });\n  var lines = features.filter(function (f) {\n    return f.geometry && (f.geometry.type === 'LineString' || f.geometry.type === 'MultiLineString');\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polyline'\n    });\n  });\n  var multipolygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'MultiPolygon';\n  }).map(function (feature) {\n    return makeCoordinates(feature).map(function (coordinates) {\n      return makeOverlay(coordinates, feature);\n    });\n  }).reduce(flatten, []);\n  var polygons = features.filter(function (f) {\n    return f.geometry && f.geometry.type === 'Polygon';\n  }).map(function (feature) {\n    return makeOverlay(makeCoordinates(feature), feature);\n  }).reduce(flatten, []).concat(multipolygons).map(function (overlay) {\n    return _objectSpread(_objectSpread({}, overlay), {}, {\n      type: 'polygon'\n    });\n  });\n  return points.concat(lines).concat(polygons);\n};\n\nvar flatten = function flatten(prev, curr) {\n  return prev.concat(curr);\n};\n\nvar makeOverlay = function makeOverlay(coordinates, feature) {\n  var overlay = {\n    feature: feature\n  };\n\n  if (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon') {\n    overlay.coordinates = coordinates[0];\n\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n\n  return overlay;\n};\n\nvar makePoint = function makePoint(c) {\n  return {\n    latitude: c[1],\n    longitude: c[0]\n  };\n};\n\nvar makeLine = function makeLine(l) {\n  return l.map(makePoint);\n};\n\nvar makeCoordinates = function makeCoordinates(feature) {\n  var g = feature.geometry;\n\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map(function (p) {\n      return p.map(makeLine);\n    });\n  } else {\n    return [];\n  }\n};\n\nvar doesOverlayContainProperty = function doesOverlayContainProperty(overlay, property) {\n  return overlay.feature && overlay.feature.properties && overlay.feature.properties[property];\n};\n\nvar getRgbaFromHex = function getRgbaFromHex(hex) {\n  var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var _hex$match$map = hex.match(/\\w\\w/g).map(function (x) {\n    return parseInt(x, 16);\n  }),\n      _hex$match$map2 = _slicedToArray(_hex$match$map, 3),\n      r = _hex$match$map2[0],\n      g = _hex$match$map2[1],\n      b = _hex$match$map2[2];\n\n  return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n};\n\nvar getColor = function getColor(props, overlay, colorType, overrideColorProp) {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    var color = overlay.feature.properties[colorType];\n    var opacityProperty = colorType + '-opacity';\n\n    if (doesOverlayContainProperty(overlay, opacityProperty) && color[0] === '#') {\n      color = getRgbaFromHex(color, overlay.feature.properties[opacityProperty]);\n    }\n\n    return color;\n  }\n\n  return;\n};\n\nvar getStrokeWidth = function getStrokeWidth(props, overlay) {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props.strokeWidth;\n  }\n\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n\n  return;\n};","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/node_modules/react-native-maps/lib/components/Geojson.js"],"names":["React","PropTypes","Marker","Polyline","Polygon","ColorPropType","propTypes","geojson","object","isRequired","strokeColor","fillColor","strokeWidth","number","lineDashPhase","tappable","boolean","lineDashPattern","arrayOf","lineCap","oneOf","lineJoin","miterLimit","zIndex","onPress","func","markerComponent","node","title","string","Geojson","props","image","overlays","makeOverlays","features","map","overlay","index","getColor","markerColor","getStrokeWidth","type","coordinates","holes","points","filter","f","geometry","feature","makeCoordinates","makeOverlay","reduce","flatten","lines","multipolygons","polygons","concat","prev","curr","length","slice","makePoint","c","latitude","longitude","makeLine","l","g","p","doesOverlayContainProperty","property","properties","getRgbaFromHex","hex","alpha","match","x","parseInt","r","b","colorType","overrideColorProp","hasOwnProperty","color","opacityProperty"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Marker from './MapMarker';\nimport Polyline from './MapPolyline';\nimport Polygon from './MapPolygon';\nimport { ColorPropType } from 'react-native';\n\nconst propTypes = {\n  /**\n   * [Geojson](https://geojson.org/) description of object.\n   */\n  geojson: PropTypes.object.isRequired,\n\n  /**\n   * The stroke color to use for the path.\n   */\n  strokeColor: ColorPropType,\n\n  /**\n   * The fill color to use for the path.\n   */\n  fillColor: ColorPropType,\n\n  /**\n   * The stroke width to use for the path.\n   */\n  strokeWidth: PropTypes.number,\n\n  /**\n   * The offset (in points) at which to start drawing the dash pattern.\n   *\n   * Use this property to start drawing a dashed line partway through a segment or gap. For\n   * example, a phase value of 6 for the patter 5-2-3-2 would cause drawing to begin in the\n   * middle of the first gap.\n   *\n   * The default value of this property is 0.\n   *\n   * @platform ios\n   */\n  lineDashPhase: PropTypes.number,\n\n  /**\n   * Make the `Polygon` or `Polyline` tappable\n   *\n   */\n  tappable: PropTypes.boolean,\n\n  /**\n   * An array of numbers specifying the dash pattern to use for the path.\n   *\n   * The array contains one or more numbers that indicate the lengths (measured in points) of the\n   * line segments and gaps in the pattern. The values in the array alternate, starting with the\n   * first line segment length, followed by the first gap length, followed by the second line\n   * segment length, and so on.\n   *\n   * This property is set to `null` by default, which indicates no line dash pattern.\n   *\n   * @platform ios\n   */\n  lineDashPattern: PropTypes.arrayOf(PropTypes.number),\n\n  /**\n   * The line cap style to apply to the open ends of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineCap: PropTypes.oneOf(['butt', 'round', 'square']),\n\n  /**\n   * The line join style to apply to corners of the path.\n   * The default style is `round`.\n   *\n   * @platform ios\n   */\n  lineJoin: PropTypes.oneOf(['miter', 'round', 'bevel']),\n\n  /**\n   * The limiting value that helps avoid spikes at junctions between connected line segments.\n   * The miter limit helps you avoid spikes in paths that use the `miter` `lineJoin` style. If\n   * the ratio of the miter length—that is, the diagonal length of the miter join—to the line\n   * thickness exceeds the miter limit, the joint is converted to a bevel join. The default\n   * miter limit is 10, which results in the conversion of miters whose angle at the joint\n   * is less than 11 degrees.\n   *\n   * @platform ios\n   */\n  miterLimit: PropTypes.number,\n\n  /**\n   * The order in which this tile overlay is drawn with respect to other overlays. An overlay\n   * with a larger z-index is drawn over overlays with smaller z-indices. The order of overlays\n   * with the same z-index is arbitrary. The default zIndex is 0.\n   *\n   * @platform android\n   */\n  zIndex: PropTypes.number,\n\n  /**\n   * Callback that is called when the user presses on the polygon\n   */\n  onPress: PropTypes.func,\n\n  /**\n   * Component to render in place of the default marker when the overlay type is a `point`\n   *\n   */\n  markerComponent: PropTypes.node,\n\n  /**\n   * The title of the marker. This is only used if the <Marker /> component has no children that\n   * are a `<Callout />`, in which case the default callout behavior will be used, which\n   * will show both the `title` and the `description`, if provided.\n   */\n  title: PropTypes.string,\n};\n\nconst Geojson = (props) => {\n  const {\n    title,\n    image,\n    zIndex,\n    onPress,\n    lineCap,\n    lineJoin,\n    tappable,\n    miterLimit,\n    lineDashPhase,\n    lineDashPattern,\n    markerComponent,\n  } = props;\n  const overlays = makeOverlays(props.geojson.features);\n  return (\n    <React.Fragment>\n      {overlays.map((overlay, index) => {\n        const fillColor = getColor(props, overlay, 'fill', 'fillColor');\n        const strokeColor = getColor(props, overlay, 'stroke', 'strokeColor');\n        const markerColor = getColor(props, overlay, 'marker-color', 'color');\n        const strokeWidth = getStrokeWidth(props, overlay);\n        if (overlay.type === 'point') {\n          return (\n            <Marker\n              key={index}\n              coordinate={overlay.coordinates}\n              image={image}\n              title={title}\n              pinColor={markerColor}\n              zIndex={zIndex}\n              onPress={() => onPress && onPress(overlay)}\n            >\n              {markerComponent}\n            </Marker>\n          );\n        }\n        if (overlay.type === 'polygon') {\n          return (\n            <Polygon\n              key={index}\n              coordinates={overlay.coordinates}\n              holes={overlay.holes}\n              strokeColor={strokeColor}\n              fillColor={fillColor}\n              strokeWidth={strokeWidth}\n              tappable={tappable}\n              onPress={() => onPress && onPress(overlay)}\n              zIndex={zIndex}\n            />\n          );\n        }\n        if (overlay.type === 'polyline') {\n          return (\n            <Polyline\n              key={index}\n              coordinates={overlay.coordinates}\n              strokeColor={strokeColor}\n              strokeWidth={strokeWidth}\n              lineDashPhase={lineDashPhase}\n              lineDashPattern={lineDashPattern}\n              lineCap={lineCap}\n              lineJoin={lineJoin}\n              miterLimit={miterLimit}\n              zIndex={zIndex}\n              tappable={tappable}\n              onPress={() => onPress && onPress(overlay)}\n            />\n          );\n        }\n      })}\n    </React.Fragment>\n  );\n};\n\nGeojson.propTypes = propTypes;\n\nexport default Geojson;\n\nexport const makeOverlays = (features) => {\n  const points = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'Point' || f.geometry.type === 'MultiPoint')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'point' }));\n\n  const lines = features\n    .filter(\n      (f) =>\n        f.geometry &&\n        (f.geometry.type === 'LineString' ||\n          f.geometry.type === 'MultiLineString')\n    )\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, [])\n    .map((overlay) => ({ ...overlay, type: 'polyline' }));\n\n  const multipolygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'MultiPolygon')\n    .map((feature) =>\n      makeCoordinates(feature).map((coordinates) =>\n        makeOverlay(coordinates, feature)\n      )\n    )\n    .reduce(flatten, []);\n\n  const polygons = features\n    .filter((f) => f.geometry && f.geometry.type === 'Polygon')\n    .map((feature) => makeOverlay(makeCoordinates(feature), feature))\n    .reduce(flatten, [])\n    .concat(multipolygons)\n    .map((overlay) => ({ ...overlay, type: 'polygon' }));\n\n  return points.concat(lines).concat(polygons);\n};\n\nconst flatten = (prev, curr) => prev.concat(curr);\n\nconst makeOverlay = (coordinates, feature) => {\n  let overlay = {\n    feature,\n  };\n  if (\n    feature.geometry.type === 'Polygon' ||\n    feature.geometry.type === 'MultiPolygon'\n  ) {\n    overlay.coordinates = coordinates[0];\n    if (coordinates.length > 1) {\n      overlay.holes = coordinates.slice(1);\n    }\n  } else {\n    overlay.coordinates = coordinates;\n  }\n  return overlay;\n};\n\nconst makePoint = (c) => ({ latitude: c[1], longitude: c[0] });\n\nconst makeLine = (l) => l.map(makePoint);\n\nconst makeCoordinates = (feature) => {\n  const g = feature.geometry;\n  if (g.type === 'Point') {\n    return [makePoint(g.coordinates)];\n  } else if (g.type === 'MultiPoint') {\n    return g.coordinates.map(makePoint);\n  } else if (g.type === 'LineString') {\n    return [makeLine(g.coordinates)];\n  } else if (g.type === 'MultiLineString') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'Polygon') {\n    return g.coordinates.map(makeLine);\n  } else if (g.type === 'MultiPolygon') {\n    return g.coordinates.map((p) => p.map(makeLine));\n  } else {\n    return [];\n  }\n};\n\nconst doesOverlayContainProperty = (overlay, property) => {\n  // Geojson may have 0 for the opacity when intention is to not specify the\n  // opacity. Therefore, we evaluate the truthiness of the propery where 0\n  // would return false.\n  return (\n    overlay.feature &&\n    overlay.feature.properties &&\n    overlay.feature.properties[property]\n  );\n};\n\nconst getRgbaFromHex = (hex, alpha = 1) => {\n  const [r, g, b] = hex.match(/\\w\\w/g).map((x) => parseInt(x, 16));\n  return `rgba(${r},${g},${b},${alpha})`;\n};\n\nconst getColor = (props, overlay, colorType, overrideColorProp) => {\n  if (props.hasOwnProperty(overrideColorProp)) {\n    return props[overrideColorProp];\n  }\n  if (doesOverlayContainProperty(overlay, colorType)) {\n    let color = overlay.feature.properties[colorType];\n    const opacityProperty = colorType + '-opacity';\n    if (\n      doesOverlayContainProperty(overlay, opacityProperty) &&\n      color[0] === '#'\n    ) {\n      color = getRgbaFromHex(\n        color,\n        overlay.feature.properties[opacityProperty]\n      );\n    }\n    return color;\n  }\n  return;\n};\n\nconst getStrokeWidth = (props, overlay) => {\n  if (props.hasOwnProperty('strokeWidth')) {\n    return props.strokeWidth;\n  }\n  if (doesOverlayContainProperty(overlay, 'stroke-width')) {\n    return overlay.feature.properties['stroke-width'];\n  }\n  return;\n};\n"]},"metadata":{},"sourceType":"module"}