{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nimport React from 'react';\n\nfunction createContext(rootComponentName) {\n  var Context = React.createContext(null);\n\n  function Provider(props) {\n    var children = props.children,\n        providerProps = _objectWithoutProperties(props, _excluded);\n\n    var value = React.useMemo(function () {\n      return providerProps;\n    }, Object.values(providerProps));\n    return React.createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n\n  function useContext(consumerName) {\n    var context = React.useContext(Context);\n\n    if (context === null) {\n      throw new Error(\"`\".concat(consumerName, \"` must be used within `\").concat(rootComponentName, \"`\"));\n    }\n\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n\nexport { createContext };","map":{"version":3,"sources":["createContext.tsx"],"names":["Context","React","providerProps","value","Object","context","Provider","rootComponentName"],"mappings":";;AAAA,OAAA,KAAA,MAAA,OAAA;;AAEA,SAAA,aAAA,CAAA,iBAAA,EAEE;AACA,MAAMA,OAAO,GAAGC,KAAK,CAALA,aAAAA,CAAhB,IAAgBA,CAAhB;;AAEA,WAAA,QAAA,CAAA,KAAA,EAA2E;AACzE,QAAM,QAAN,GADyE,KACzE,CAAM,QAAN;AAAA,QAAqBC,aAArB,4BADyE,KACzE;;AAEA,QAAMC,KAAK,GAAGF,KAAK,CAALA,OAAAA,CACZ;AAAA,aADYA,aACZ;AAAA,KADYA,EAGZG,MAAM,CAANA,MAAAA,CAHF,aAGEA,CAHYH,CAAd;AAKA,WAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,QAAA,EAAA;AAAkB,MAAA,KAAK,EAAEE;AAAzB,KAAA,EAAP,QAAO,CAAP;AACD;;AAED,WAAA,UAAA,CAAA,YAAA,EAA0C;AACxC,QAAME,OAAO,GAAGJ,KAAK,CAALA,UAAAA,CAAhB,OAAgBA,CAAhB;;AACA,QAAII,OAAO,KAAX,IAAA,EAAsB;AACpB,YAAM,IAAA,KAAA,CAAA,IAAA,MAAA,CAAA,YAAA,EAAA,yBAAA,EAAA,MAAA,CAAA,iBAAA,EAAN,GAAM,CAAA,CAAN;AAGD;;AACD,WAAA,OAAA;AACD;;AAEDC,EAAAA,QAAQ,CAARA,WAAAA,GAAuBC,iBAAiB,GAAxCD,UAAAA;AACA,SAAO,CAAA,QAAA,EAAP,UAAO,CAAP;AACD;;AAED,SAAA,aAAA","sourcesContent":["import React from 'react';\n\nfunction createContext<ContextValueType extends object>(\n  rootComponentName: string\n) {\n  const Context = React.createContext<ContextValueType>(null as any);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...providerProps } = props;\n    // Only re-memoize when prop values change\n    const value = React.useMemo(\n      () => providerProps,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Object.values(providerProps)\n    ) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context === null) {\n      throw new Error(\n        `\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``\n      );\n    }\n    return context;\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\nexport { createContext };\n"]},"metadata":{},"sourceType":"module"}