{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"icon\", \"children\", \"isHovered\", \"isPressed\", \"isFocused\", \"isFocusVisible\", \"isDisabled\"],\n    _excluded2 = [\"_icon\", \"onPressIn\", \"onPressOut\", \"onHoverIn\", \"onHoverOut\", \"onFocus\", \"onBlur\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Pressable } from \"../../primitives/Pressable\";\nimport { Icon } from \"../../primitives/Icon\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nimport { composeEventHandlers } from \"../../../utils\";\nimport { useHover, useFocus, useIsPressed } from \"../../primitives/Pressable/Pressable\";\nimport { useFocusRing } from '@react-native-aria/focus';\n\nvar IconButton = function IconButton(_ref, ref) {\n  var icon = _ref.icon,\n      children = _ref.children,\n      isHoveredProp = _ref.isHovered,\n      isPressedProp = _ref.isPressed,\n      isFocusedProp = _ref.isFocused,\n      isFocusVisibleProp = _ref.isFocusVisible,\n      isDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useHover = useHover(),\n      hoverProps = _useHover.hoverProps,\n      isHovered = _useHover.isHovered;\n\n  var _useIsPressed = useIsPressed(),\n      pressableProps = _useIsPressed.pressableProps,\n      isPressed = _useIsPressed.isPressed;\n\n  var _useFocus = useFocus(),\n      focusProps = _useFocus.focusProps,\n      isFocused = _useFocus.isFocused;\n\n  var _useFocusRing = useFocusRing(),\n      isFocusVisible = _useFocusRing.isFocusVisible,\n      focusRingProps = _useFocusRing.focusProps;\n\n  var _usePropsResolution = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled: isDisabled\n  }),\n      _icon = _usePropsResolution._icon,\n      onPressIn = _usePropsResolution.onPressIn,\n      onPressOut = _usePropsResolution.onPressOut,\n      onHoverIn = _usePropsResolution.onHoverIn,\n      onHoverOut = _usePropsResolution.onHoverOut,\n      onFocus = _usePropsResolution.onFocus,\n      onBlur = _usePropsResolution.onBlur,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var clonedIcon;\n\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, _objectSpread(_objectSpread({}, _icon), icon === null || icon === void 0 ? void 0 : icon.props));\n  }\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Pressable, _extends({\n    accessibilityRole: \"button\",\n    ref: ref,\n    onPressIn: composeEventHandlers(onPressIn, pressableProps.onPressIn),\n    onPressOut: composeEventHandlers(onPressOut, pressableProps.onPressOut),\n    onHoverIn: composeEventHandlers(onHoverIn, hoverProps.onHoverIn),\n    onHoverOut: composeEventHandlers(onHoverOut, hoverProps.onHoverOut),\n    onFocus: composeEventHandlers(composeEventHandlers(onFocus, focusProps.onFocus), focusRingProps.onFocus),\n    onBlur: composeEventHandlers(composeEventHandlers(onBlur, focusProps.onBlur), focusRingProps.onBlur)\n  }, resolvedProps), clonedIcon || React.createElement(Icon, _icon, children));\n};\n\nexport default memo(forwardRef(IconButton));","map":{"version":3,"sources":["index.tsx"],"names":["IconButton","isHovered","isPressed","isFocused","isFocusVisible","props","useHover","useIsPressed","useFocus","focusProps","focusRingProps","useFocusRing","resolvedProps","usePropsResolution","isHoveredProp","isPressedProp","isFocusedProp","isFocusVisibleProp","isDisabled","clonedIcon","icon","useHasResponsiveProps","composeEventHandlers","pressableProps","hoverProps","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,SAAA;AACA,SAAA,IAAA;AACA,SAAA,kBAAA;AACA,SAAA,qBAAA;AACA,SAAA,oBAAA;AAEA,SAAA,QAAA,EAAA,QAAA,EAAA,YAAA;AAKA,SAAA,YAAA,QAAA,0BAAA;;AAEA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAAA,GAAA,EAYd;AAAA,MAXH,IAWG,QAXH,IAWG;AAAA,MAXH,QAWG,QAXH,QAWG;AAAA,MAXH,aAWG,QARDC,SAQC;AAAA,MAXH,aAWG,QAPDC,SAOC;AAAA,MAXH,aAWG,QANDC,SAMC;AAAA,MAXH,kBAWG,QALDC,cAKC;AAAA,MAXH,UAWG,QAXH,UAWG;AAAA,MAHEC,KAGF;;AACH,kBAAkCC,QAAlC,EAAA;AAAA,MAAM,UAAN,aAAM,UAAN;AAAA,MAAoBL,SAApB,aAAoBA,SAApB;;AACA,sBAAsCM,YAAtC,EAAA;AAAA,MAAM,cAAN,iBAAM,cAAN;AAAA,MAAwBL,SAAxB,iBAAwBA,SAAxB;;AACA,kBAAkCM,QAAlC,EAAA;AAAA,MAAM,UAAN,aAAM,UAAN;AAAA,MAAoBL,SAApB,aAAoBA,SAApB;;AACA,sBAA4DQ,YAA5D,EAAA;AAAA,MAAM,cAAN,iBAAM,cAAN;AAAA,MAAoCD,cAApC,iBAAwBD,UAAxB;;AAEA,4BASII,kBAAkB,CAAA,YAAA,EAAA,KAAA,EAAsB;AAC1CZ,IAAAA,SAAS,EAAEa,aAAa,IADkB,SAAA;AAE1CZ,IAAAA,SAAS,EAAEa,aAAa,IAFkB,SAAA;AAG1CZ,IAAAA,SAAS,EAAEa,aAAa,IAHkB,SAAA;AAI1CZ,IAAAA,cAAc,EAAEa,kBAAkB,IAJQ,cAAA;AAK1CC,IAAAA,UAAAA,EAAAA;AAL0C,GAAtB,CATtB;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,SAAN,uBAAM,SAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,SAAN,uBAAM,SAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,OAAN,uBAAM,OAAN;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAQKN,aARL;;AAiBA,MAAA,UAAA;;AACA,MAAA,IAAA,EAAU;AACRO,IAAAA,UAAU,GAAG,KAAK,CAAL,YAAA,CAAA,IAAA,kCAAyB,KAAzB,GAERC,IAAH,KAAA,IAAGA,IAAAA,IAAH,KAAA,KAAA,CAAGA,GAAH,KAAA,CAAGA,GAAAA,IAAI,CAAP,KAFW,EAAbD;AAzBC;;AAgCH,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,IAAA,iBAAiB,EADnB,QAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,SAAS,EAAEC,oBAAoB,CAAA,SAAA,EAAYC,cAAc,CAH3D,SAGiC,CAHjC;AAIE,IAAA,UAAU,EAAED,oBAAoB,CAAA,UAAA,EAAaC,cAAc,CAJ7D,UAIkC,CAJlC;AAME,IAAA,SAAS,EAAED,oBAAoB,CAAA,SAAA,EAAYE,UAAU,CANvD,SAMiC,CANjC;AAQE,IAAA,UAAU,EAAEF,oBAAoB,CAAA,UAAA,EAAaE,UAAU,CARzD,UAQkC,CARlC;AAUE,IAAA,OAAO,EAAEF,oBAAoB,CAC3BA,oBAAoB,CAAA,OAAA,EAAUb,UAAU,CADb,OACP,CADO,EAE3BC,cAAc,CAZlB,OAU+B,CAV/B;AAeE,IAAA,MAAM,EAAEY,oBAAoB,CAC1BA,oBAAoB,CAAA,MAAA,EAASb,UAAU,CADb,MACN,CADM,EAE1BC,cAAc,CAFY,MAAA;AAf9B,GAAA,EAAA,aAAA,CAAA,EAqBGS,UAAU,IAAI,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,KAAA,EAtBnB,QAsBmB,CArBjB,CADF;AAhDF,CAAA;;AA2EA,eAAeM,IAAI,CAACC,UAAU,CAA9B,UAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Pressable } from '../../primitives/Pressable';\nimport { Icon } from '../../primitives/Icon';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { composeEventHandlers } from '../../../utils';\nimport type { IIconButtonProps } from './types';\nimport {\n  useHover,\n  useFocus,\n  useIsPressed,\n} from '../../primitives/Pressable/Pressable';\nimport { useFocusRing } from '@react-native-aria/focus';\n\nconst IconButton = (\n  {\n    icon,\n    children,\n    isHovered: isHoveredProp,\n    isPressed: isPressedProp,\n    isFocused: isFocusedProp,\n    isFocusVisible: isFocusVisibleProp,\n    isDisabled,\n    ...props\n  }: IIconButtonProps,\n  ref: any\n) => {\n  const { hoverProps, isHovered } = useHover();\n  const { pressableProps, isPressed } = useIsPressed();\n  const { focusProps, isFocused } = useFocus();\n  const { isFocusVisible, focusProps: focusRingProps }: any = useFocusRing();\n\n  const {\n    _icon,\n    onPressIn,\n    onPressOut,\n    onHoverIn,\n    onHoverOut,\n    onFocus,\n    onBlur,\n    ...resolvedProps\n  } = usePropsResolution('IconButton', props, {\n    isHovered: isHoveredProp || isHovered,\n    isPressed: isPressedProp || isPressed,\n    isFocused: isFocusedProp || isFocused,\n    isFocusVisible: isFocusVisibleProp || isFocusVisible,\n    isDisabled,\n  });\n\n  let clonedIcon;\n  if (icon) {\n    clonedIcon = React.cloneElement(icon, {\n      ..._icon,\n      ...icon?.props,\n    });\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Pressable\n      accessibilityRole=\"button\"\n      ref={ref}\n      onPressIn={composeEventHandlers(onPressIn, pressableProps.onPressIn)}\n      onPressOut={composeEventHandlers(onPressOut, pressableProps.onPressOut)}\n      // @ts-ignore - web only\n      onHoverIn={composeEventHandlers(onHoverIn, hoverProps.onHoverIn)}\n      // @ts-ignore - web only\n      onHoverOut={composeEventHandlers(onHoverOut, hoverProps.onHoverOut)}\n      // @ts-ignore - web only\n      onFocus={composeEventHandlers(\n        composeEventHandlers(onFocus, focusProps.onFocus),\n        focusRingProps.onFocus\n      )}\n      // @ts-ignore - web only\n      onBlur={composeEventHandlers(\n        composeEventHandlers(onBlur, focusProps.onBlur),\n        focusRingProps.onBlur\n      )}\n      {...resolvedProps}\n    >\n      {clonedIcon || <Icon {..._icon}>{children}</Icon>}\n    </Pressable>\n  );\n};\n\nexport default memo(forwardRef(IconButton));\nexport type { IIconButtonProps };\n"]},"metadata":{},"sourceType":"module"}