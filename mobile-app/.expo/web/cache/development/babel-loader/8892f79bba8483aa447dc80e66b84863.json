{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useRef, forwardRef, useImperativeHandle } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport styles from \"./styles\";\nimport findIndexInArr from \"./helpers/findIndexInArr\";\nimport calculateDropdownHeight from \"./helpers/calculateDropdownHeight\";\nimport isExist from \"./helpers/isExist\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    height = _Dimensions$get.height;\n\nvar SelectDropdown = function SelectDropdown(_ref, ref) {\n  var data = _ref.data,\n      onSelect = _ref.onSelect,\n      defaultButtonText = _ref.defaultButtonText,\n      buttonTextAfterSelection = _ref.buttonTextAfterSelection,\n      rowTextForSelection = _ref.rowTextForSelection,\n      defaultValue = _ref.defaultValue,\n      defaultValueByIndex = _ref.defaultValueByIndex,\n      disabled = _ref.disabled,\n      disableAutoScroll = _ref.disableAutoScroll,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      buttonStyle = _ref.buttonStyle,\n      buttonTextStyle = _ref.buttonTextStyle,\n      renderCustomizedButtonChild = _ref.renderCustomizedButtonChild,\n      renderDropdownIcon = _ref.renderDropdownIcon,\n      dropdownIconPosition = _ref.dropdownIconPosition,\n      statusBarTranslucent = _ref.statusBarTranslucent,\n      dropdownStyle = _ref.dropdownStyle,\n      dropdownOverlayColor = _ref.dropdownOverlayColor,\n      rowStyle = _ref.rowStyle,\n      rowTextStyle = _ref.rowTextStyle,\n      renderCustomizedRowChild = _ref.renderCustomizedRowChild;\n  useImperativeHandle(ref, function () {\n    return {\n      reset: function reset() {\n        _reset();\n      },\n      openDropdown: function openDropdown() {\n        _openDropdown();\n      },\n      closeDropdown: function closeDropdown() {\n        _closeDropdown();\n      }\n    };\n  });\n  var DropdownButton = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dropdownPX = _useState4[0],\n      setDropdownPX = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dropdownPY = _useState6[0],\n      setDropdownPY = _useState6[1];\n\n  var _useState7 = useState(function () {\n    return calculateDropdownHeight(dropdownStyle, rowStyle, (data == null ? void 0 : data.length) || 0);\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dropdownHEIGHT = _useState8[0],\n      setDropdownHEIGHT = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dropdownWIDTH = _useState10[0],\n      setDropdownWIDTH = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      selectedItem = _useState12[0],\n      setSelectedItem = _useState12[1];\n\n  var _useState13 = useState(-1),\n      _useState14 = _slicedToArray(_useState13, 2),\n      index = _useState14[0],\n      setIndex = _useState14[1];\n\n  var dropDownFlatlistRef = useRef(null);\n  useEffect(function () {\n    if (!data || data.length == 0) {\n      _reset();\n    }\n  }, [data]);\n  useEffect(function () {\n    if (isExist(defaultValueByIndex)) {\n      if (data && isExist(data[defaultValueByIndex])) {\n        setDefault(defaultValueByIndex);\n      }\n    }\n  }, [defaultValueByIndex]);\n  useEffect(function () {\n    if (isExist(defaultValue)) {\n      if (data && findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [defaultValue]);\n  useEffect(function () {\n    setDropdownHEIGHT(calculateDropdownHeight(dropdownStyle, rowStyle, (data == null ? void 0 : data.length) || 0));\n  }, [dropdownStyle, rowStyle, data]);\n\n  var _openDropdown = function _openDropdown() {\n    DropdownButton.current.measure(function (fx, fy, w, h, px, py) {\n      if (height - 18 < py + h + dropdownHEIGHT) {\n        setDropdownPX(px);\n        setDropdownPY(py - 2 - dropdownHEIGHT);\n      } else {\n        setDropdownPX(px);\n        setDropdownPY(py + h + 2);\n      }\n\n      setDropdownWIDTH((dropdownStyle == null ? void 0 : dropdownStyle.width) || w);\n      setIsVisible(true);\n      onFocus && onFocus();\n    });\n  };\n\n  var _closeDropdown = function _closeDropdown() {\n    setIsVisible(false);\n    onBlur && onBlur();\n  };\n\n  var _reset = function _reset() {\n    setSelectedItem(null);\n    setIndex(-1);\n  };\n\n  var setDefault = function setDefault(index) {\n    setSelectedItem(data[index]);\n    setIndex(index);\n  };\n\n  var getItemLayout = function getItemLayout(data, index) {\n    return {\n      index: index,\n      length: (data == null ? void 0 : data.length) || 0,\n      offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index\n    };\n  };\n\n  var onLayout = function onLayout() {\n    if (disableAutoScroll) {\n      return;\n    }\n\n    if (index >= 3 && dropDownFlatlistRef) {\n      dropDownFlatlistRef.current.scrollToOffset({\n        offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n        animated: true\n      });\n    }\n  };\n\n  var onSelectItem = function onSelectItem(item, index) {\n    _closeDropdown();\n\n    onSelect(item, index);\n    setSelectedItem(item);\n    setIndex(index);\n  };\n\n  var renderFlatlistItem = function renderFlatlistItem(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return _jsx(TouchableOpacity, {\n      activeOpacity: 0.8,\n      style: _objectSpread(_objectSpread({}, styles.dropdownRow), rowStyle),\n      onPress: function onPress() {\n        return onSelectItem(item, index);\n      },\n      children: renderCustomizedRowChild ? _jsx(View, {\n        style: styles.dropdownCustomizedRowParent,\n        children: renderCustomizedRowChild(item, index)\n      }) : _jsx(Text, {\n        numberOfLines: 1,\n        allowFontScaling: false,\n        style: [styles.dropdownRowText, rowTextStyle],\n        children: rowTextForSelection ? rowTextForSelection(item, index) : item.toString()\n      })\n    });\n  };\n\n  var renderDropdown = function renderDropdown() {\n    return isVisible && _jsxs(Modal, {\n      supportedOrientations: ['portrait', 'landscape'],\n      animationType: \"none\",\n      transparent: true,\n      statusBarTranslucent: statusBarTranslucent || false,\n      visible: isVisible,\n      children: [_jsx(TouchableOpacity, {\n        activeOpacity: 1,\n        onPress: function onPress() {\n          return _closeDropdown();\n        },\n        style: _objectSpread(_objectSpread({}, styles.dropdownOverlay), dropdownOverlayColor && {\n          backgroundColor: dropdownOverlayColor\n        })\n      }), _jsx(View, {\n        style: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, styles.dropdownOverlayView), styles.shadow), dropdownStyle), {\n          position: 'absolute',\n          top: dropdownPY,\n          height: dropdownHEIGHT,\n          width: dropdownWIDTH,\n          borderTopWidth: 0,\n          overflow: 'hidden'\n        }), I18nManager.isRTL ? {\n          right: (dropdownStyle == null ? void 0 : dropdownStyle.right) || dropdownPX\n        } : {\n          left: (dropdownStyle == null ? void 0 : dropdownStyle.left) || dropdownPX\n        }),\n        children: !data || data.length == 0 ? _jsx(View, {\n          style: styles.dropdownActivityIndicatorView,\n          children: _jsx(ActivityIndicator, {\n            size: \"small\",\n            color: '#999999'\n          })\n        }) : _jsx(FlatList, {\n          data: data,\n          keyExtractor: function keyExtractor(item, index) {\n            return index.toString();\n          },\n          ref: function ref(_ref3) {\n            return dropDownFlatlistRef.current = _ref3;\n          },\n          renderItem: renderFlatlistItem,\n          getItemLayout: getItemLayout,\n          onLayout: onLayout\n        })\n      })]\n    });\n  };\n\n  return _jsxs(TouchableOpacity, {\n    ref: DropdownButton,\n    disabled: disabled,\n    activeOpacity: 0.8,\n    style: _objectSpread(_objectSpread(_objectSpread({}, styles.dropdownButton), dropdownIconPosition == 'left' ? {\n      flexDirection: 'row'\n    } : {\n      flexDirection: 'row-reverse'\n    }), buttonStyle),\n    onPress: function onPress() {\n      return _openDropdown();\n    },\n    children: [renderDropdown(), renderDropdownIcon && renderDropdownIcon(isVisible), renderCustomizedButtonChild ? _jsx(View, {\n      style: styles.dropdownCustomizedButtonParent,\n      children: renderCustomizedButtonChild(selectedItem, index)\n    }) : _jsx(Text, {\n      numberOfLines: 1,\n      allowFontScaling: false,\n      style: _objectSpread(_objectSpread({}, styles.dropdownButtonText), buttonTextStyle),\n      children: isExist(selectedItem) ? buttonTextAfterSelection ? buttonTextAfterSelection(selectedItem, index) : selectedItem.toString() : defaultButtonText || 'Select an option.'\n    })]\n  });\n};\n\nexport default forwardRef(function (props, ref) {\n  return SelectDropdown(props, ref);\n});","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/node_modules/react-native-select-dropdown/src/SelectDropdown.js"],"names":["React","useEffect","useState","useRef","forwardRef","useImperativeHandle","styles","findIndexInArr","calculateDropdownHeight","isExist","Dimensions","get","height","SelectDropdown","ref","data","onSelect","defaultButtonText","buttonTextAfterSelection","rowTextForSelection","defaultValue","defaultValueByIndex","disabled","disableAutoScroll","onFocus","onBlur","buttonStyle","buttonTextStyle","renderCustomizedButtonChild","renderDropdownIcon","dropdownIconPosition","statusBarTranslucent","dropdownStyle","dropdownOverlayColor","rowStyle","rowTextStyle","renderCustomizedRowChild","reset","openDropdown","closeDropdown","DropdownButton","isVisible","setIsVisible","dropdownPX","setDropdownPX","dropdownPY","setDropdownPY","length","dropdownHEIGHT","setDropdownHEIGHT","dropdownWIDTH","setDropdownWIDTH","selectedItem","setSelectedItem","index","setIndex","dropDownFlatlistRef","setDefault","current","measure","fx","fy","w","h","px","py","width","getItemLayout","offset","onLayout","scrollToOffset","animated","onSelectItem","item","renderFlatlistItem","dropdownRow","dropdownCustomizedRowParent","dropdownRowText","toString","renderDropdown","dropdownOverlay","backgroundColor","dropdownOverlayView","shadow","position","top","borderTopWidth","overflow","I18nManager","isRTL","right","left","dropdownActivityIndicatorView","dropdownButton","flexDirection","dropdownCustomizedButtonParent","dropdownButtonText","props"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useRef, forwardRef, useImperativeHandle} from 'react';\nimport {View, Text, TouchableOpacity, FlatList, Dimensions, ActivityIndicator, Modal, I18nManager} from 'react-native';\nimport styles from './styles';\nimport findIndexInArr from './helpers/findIndexInArr';\nimport calculateDropdownHeight from './helpers/calculateDropdownHeight';\nimport isExist from './helpers/isExist';\nconst {height} = Dimensions.get('window');\n\nconst SelectDropdown = (\n  {\n    data /* array */,\n    onSelect /* function  */,\n    defaultButtonText /* String */,\n    buttonTextAfterSelection /* function */,\n    rowTextForSelection /* function */,\n    defaultValue /* any */,\n    defaultValueByIndex /* integer */,\n    disabled /* boolean */,\n    disableAutoScroll /* boolean */,\n    onFocus /* function  */,\n    onBlur /* function  */,\n    /////////////////////////////\n    buttonStyle /* style object for button */,\n    buttonTextStyle /* style object for button text */,\n    renderCustomizedButtonChild /* function returns React component for customized button */,\n    /////////////////////////////\n    renderDropdownIcon,\n    dropdownIconPosition,\n    statusBarTranslucent,\n    dropdownStyle,\n    dropdownOverlayColor /* string */,\n    /////////////////////////////\n    rowStyle /* style object for row */,\n    rowTextStyle /* style object for row text */,\n    renderCustomizedRowChild /* function returns React component for customized row */,\n  },\n  ref,\n) => {\n  ///////////////////////////////////////////////////////\n  useImperativeHandle(ref, () => ({\n    reset: () => {\n      reset();\n    },\n    openDropdown: () => {\n      openDropdown();\n    },\n    closeDropdown: () => {\n      closeDropdown();\n    },\n  }));\n  ///////////////////////////////////////////////////////\n  const DropdownButton = useRef(); // button ref to get positions\n  const [isVisible, setIsVisible] = useState(false); // dropdown visible ?\n  const [dropdownPX, setDropdownPX] = useState(0); // position x\n  const [dropdownPY, setDropdownPY] = useState(0); // position y\n  const [dropdownHEIGHT, setDropdownHEIGHT] = useState(() => {\n    return calculateDropdownHeight(dropdownStyle, rowStyle, data?.length || 0);\n  }); // dropdown height\n  const [dropdownWIDTH, setDropdownWIDTH] = useState(0); // dropdown width\n  ///////////////////////////////////////////////////////\n  const [selectedItem, setSelectedItem] = useState(null); // selected item from dropdown\n  const [index, setIndex] = useState(-1); // index of selected item from dropdown\n  const dropDownFlatlistRef = useRef(null); // ref to the drop down flatlist\n  ///////////////////////////////////////////////////////\n  /* ******************* useEffect ******************* */\n  // data array changes\n  useEffect(() => {\n    if (!data || data.length == 0) {\n      reset();\n    }\n  }, [data]);\n  // default value by index added or changed\n  useEffect(() => {\n    // defaultValueByIndex may be equals zero\n    if (isExist(defaultValueByIndex)) {\n      if (data && isExist(data[defaultValueByIndex])) {\n        setDefault(defaultValueByIndex);\n      }\n    }\n  }, [defaultValueByIndex]);\n  // default value added or changed\n  useEffect(() => {\n    // defaultValue may be equals zero\n    if (isExist(defaultValue)) {\n      if (data && findIndexInArr(defaultValue, data) >= 0) {\n        setDefault(findIndexInArr(defaultValue, data));\n      }\n    }\n  }, [defaultValue]);\n  // for height changes\n  useEffect(() => {\n    setDropdownHEIGHT(calculateDropdownHeight(dropdownStyle, rowStyle, data?.length || 0));\n  }, [dropdownStyle, rowStyle, data]);\n  ///////////////////////////////////////////////////////\n  /* ******************** Methods ******************** */\n  const openDropdown = () => {\n    DropdownButton.current.measure((fx, fy, w, h, px, py) => {\n      // console.log('position y => ', py, '\\nheight', h, '\\nposition x => ', px)\n      if (height - 18 < py + h + dropdownHEIGHT) {\n        setDropdownPX(px);\n        setDropdownPY(py - 2 - dropdownHEIGHT);\n      } else {\n        setDropdownPX(px);\n        setDropdownPY(py + h + 2);\n      }\n      setDropdownWIDTH(dropdownStyle?.width || w);\n      setIsVisible(true);\n      onFocus && onFocus();\n    });\n  };\n  const closeDropdown = () => {\n    setIsVisible(false);\n    onBlur && onBlur();\n  };\n  const reset = () => {\n    setSelectedItem(null);\n    setIndex(-1);\n  };\n  const setDefault = index => {\n    setSelectedItem(data[index]);\n    setIndex(index);\n  };\n  const getItemLayout = (data, index) => ({\n    index,\n    length: data?.length || 0,\n    offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n  });\n  const onLayout = () => {\n    if (disableAutoScroll) {\n      return;\n    }\n    if (index >= 3 && dropDownFlatlistRef) {\n      dropDownFlatlistRef.current.scrollToOffset({\n        offset: rowStyle && rowStyle.height ? rowStyle.height * index : 50 * index,\n        animated: true,\n      });\n    }\n  };\n  const onSelectItem = (item, index) => {\n    closeDropdown();\n    onSelect(item, index);\n    setSelectedItem(item);\n    setIndex(index);\n  };\n  ///////////////////////////////////////////////////////\n  /* ******************** Render Methods ******************** */\n  const renderFlatlistItem = ({item, index}) => {\n    return (\n      <TouchableOpacity\n        activeOpacity={0.8}\n        style={{...styles.dropdownRow, ...rowStyle}}\n        onPress={() => onSelectItem(item, index)}>\n        {renderCustomizedRowChild ? (\n          <View style={styles.dropdownCustomizedRowParent}>{renderCustomizedRowChild(item, index)}</View>\n        ) : (\n          <Text numberOfLines={1} allowFontScaling={false} style={[styles.dropdownRowText, rowTextStyle]}>\n            {rowTextForSelection ? rowTextForSelection(item, index) : item.toString()}\n          </Text>\n        )}\n      </TouchableOpacity>\n    );\n  };\n  const renderDropdown = () => {\n    return (\n      isVisible && (\n        <Modal\n          supportedOrientations={['portrait', 'landscape']}\n          animationType=\"none\"\n          transparent={true}\n          statusBarTranslucent={statusBarTranslucent || false}\n          visible={isVisible}>\n          <TouchableOpacity\n            activeOpacity={1}\n            onPress={() => closeDropdown()}\n            style={{\n              ...styles.dropdownOverlay,\n              ...(dropdownOverlayColor && {\n                backgroundColor: dropdownOverlayColor,\n              }),\n            }}\n          />\n          <View\n            style={{\n              ...styles.dropdownOverlayView,\n              ...styles.shadow,\n              ...dropdownStyle,\n              ...{\n                position: 'absolute',\n                top: dropdownPY,\n                height: dropdownHEIGHT,\n                width: dropdownWIDTH,\n                borderTopWidth: 0,\n                overflow: 'hidden',\n              },\n              ...(I18nManager.isRTL\n                ? {right: dropdownStyle?.right || dropdownPX}\n                : {left: dropdownStyle?.left || dropdownPX}),\n            }}>\n            {!data || data.length == 0 ? (\n              <View style={styles.dropdownActivityIndicatorView}>\n                <ActivityIndicator size=\"small\" color={'#999999'} />\n              </View>\n            ) : (\n              <FlatList\n                data={data}\n                keyExtractor={(item, index) => index.toString()}\n                ref={ref => (dropDownFlatlistRef.current = ref)}\n                renderItem={renderFlatlistItem}\n                getItemLayout={getItemLayout}\n                onLayout={onLayout}\n              />\n            )}\n          </View>\n        </Modal>\n      )\n    );\n  };\n  ///////////////////////////////////////////////////////\n  return (\n    <TouchableOpacity\n      ref={DropdownButton}\n      disabled={disabled}\n      activeOpacity={0.8}\n      style={{\n        ...styles.dropdownButton,\n        ...(dropdownIconPosition == 'left' ? {flexDirection: 'row'} : {flexDirection: 'row-reverse'}),\n        ...buttonStyle,\n      }}\n      onPress={() => openDropdown()}>\n      {renderDropdown()}\n      {renderDropdownIcon && renderDropdownIcon(isVisible)}\n      {renderCustomizedButtonChild ? (\n        <View style={styles.dropdownCustomizedButtonParent}>{renderCustomizedButtonChild(selectedItem, index)}</View>\n      ) : (\n        <Text numberOfLines={1} allowFontScaling={false} style={{...styles.dropdownButtonText, ...buttonTextStyle}}>\n          {isExist(selectedItem)\n            ? buttonTextAfterSelection\n              ? buttonTextAfterSelection(selectedItem, index)\n              : selectedItem.toString()\n            : defaultButtonText || 'Select an option.'}\n        </Text>\n      )}\n    </TouchableOpacity>\n  );\n};\n\nexport default forwardRef((props, ref) => SelectDropdown(props, ref));\n"]},"metadata":{},"sourceType":"module"}