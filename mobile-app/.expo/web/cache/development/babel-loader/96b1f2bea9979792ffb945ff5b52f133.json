{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nexport default {\n  get name() {\n    return 'ExpoSharing';\n  },\n\n  isAvailableAsync: function isAvailableAsync() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(typeof navigator === 'undefined')) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", false);\n\n            case 2:\n              return _context.abrupt(\"return\", !!navigator.share);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  shareAsync: function shareAsync(url) {\n    var _arguments = arguments;\n    return function _callee2() {\n      var options;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              options = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : {};\n\n              if (!navigator.share) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(navigator.share(_objectSpread(_objectSpread({}, options), {}, {\n                url: url\n              })));\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              throw new UnavailabilityError('navigator', 'share');\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};","map":{"version":3,"sources":["../src/ExpoSharing.web.ts"],"names":[],"mappings":";;;;;;;AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAIA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,aAAP;AACD,GAHY;;AAIP,EAAA,gBAJO,8BAIS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAChB,OAAO,SAAP,KAAqB,WADL;AAAA;AAAA;AAAA;;AAAA,+CAEX,KAFW;;AAAA;AAAA,+CAKb,CAAC,CAAC,SAAS,CAAC,KALC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMrB,GAVY;AAWP,EAAA,UAXO,sBAWI,GAXJ,EAW2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA1B,cAAA,OAA0B,0EAAF,EAAE;;AAAA,mBAElD,SAAS,CAAC,KAFwC;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAG9C,SAAS,CAAC,KAAV,iCAAqB,OAArB;AAA8B,gBAAA,GAAG,EAAH;AAA9B,iBAH8C;;AAAA;AAAA;AAAA;;AAAA;AAAA,oBAK9C,IAAI,mBAAJ,CAAwB,WAAxB,EAAqC,OAArC,CAL8C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOvD;AAlBY,CAAf","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\ntype ShareOptions = { title?: string; text?: string; url?: string };\n\nexport default {\n  get name(): string {\n    return 'ExpoSharing';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return !!navigator.share;\n  },\n  async shareAsync(url: string, options: ShareOptions = {}): Promise<void> {\n    // NOTE: `navigator.share` is only available via HTTPS\n    if (navigator.share) {\n      await navigator.share({ ...options, url });\n    } else {\n      throw new UnavailabilityError('navigator', 'share');\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}