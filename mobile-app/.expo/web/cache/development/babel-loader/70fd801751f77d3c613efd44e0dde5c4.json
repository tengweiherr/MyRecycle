{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"status\", \"variant\", \"_icon\", \"colorScheme\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { AlertContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Alert = function Alert(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Alert', props),\n      status = _usePropsResolution.status,\n      variant = _usePropsResolution.variant,\n      _icon = _usePropsResolution._icon,\n      colorScheme = _usePropsResolution.colorScheme,\n      newProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(AlertContext.Provider, {\n    value: {\n      status: status,\n      variant: variant,\n      _icon: _icon,\n      colorScheme: colorScheme\n    }\n  }, React.createElement(Box, _extends({}, newProps, {\n    ref: ref\n  }), children));\n};\n\nexport default memo(forwardRef(Alert));","map":{"version":3,"sources":["Alert.tsx"],"names":["Alert","props","newProps","usePropsResolution","useHasResponsiveProps","status","variant","_icon","colorScheme","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AAEA,SAAA,kBAAA;AAEA,SAAA,YAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,KAAK,GAAG,SAARA,KAAQ,OAAA,GAAA,EAAoD;AAAA,MAAnD,QAAmD,QAAnD,QAAmD;AAAA,MAApCC,KAAoC;;AAChE,4BAMIE,kBAAkB,CAAA,OAAA,EAP0C,KAO1C,CANtB;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAAM,OAAN,uBAAM,OAAN;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,WAAN,uBAAM,WAAN;AAAA,MAKKD,QALL;;AAQA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,MADK,EACLA,MADK;AAELC,MAAAA,OAFK,EAELA,OAFK;AAGLC,MAAAA,KAHK,EAGLA,KAHK;AAILC,MAAAA,WAAAA,EAAAA;AAJK;AADT,GAAA,EAQE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,QAAA,EAAA;AAAmB,IAAA,GAAG,EAAEC;AAAxB,GAAA,CAAA,EATJ,QASI,CARF,CADF;AAZF,CAAA;;AA4BA,eAAeC,IAAI,CAACC,UAAU,CAA9B,KAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\n// import { HStack } from '../../primitives/Stack';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAlertProps } from './types';\nimport { AlertContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Alert = ({ children, ...props }: IAlertProps, ref?: any) => {\n  const {\n    status,\n    variant,\n    _icon,\n    colorScheme,\n    ...newProps\n  } = usePropsResolution('Alert', props);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <AlertContext.Provider\n      value={{\n        status,\n        variant,\n        _icon,\n        colorScheme,\n      }}\n    >\n      <Box {...newProps} ref={ref}>\n        {children}\n      </Box>\n    </AlertContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Alert));\n"]},"metadata":{},"sourceType":"module"}