{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"startColor\", \"endColor\", \"lines\", \"isLoaded\", \"_line\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from \"../../../hooks\";\nimport { Stack } from \"../../primitives/Stack\";\nimport Skeleton from \"./Skeleton\";\n\nvar SkeletonText = function SkeletonText(props, ref) {\n  var _usePropsResolution = usePropsResolution('SkeletonText', props),\n      children = _usePropsResolution.children,\n      startColor = _usePropsResolution.startColor,\n      endColor = _usePropsResolution.endColor,\n      lines = _usePropsResolution.lines,\n      isLoaded = _usePropsResolution.isLoaded,\n      _line = _usePropsResolution._line,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded);\n\n  var computedChildren = [];\n\n  for (var i = 0; i < lines; i++) {\n    if (i === lines - 1 && lines !== 1) {\n      computedChildren.push(React.createElement(Skeleton, _extends({\n        key: i,\n        endColor: endColor,\n        startColor: startColor,\n        w: \"75%\"\n      }, _line)));\n    } else computedChildren.push(React.createElement(Skeleton, _extends({\n      key: i,\n      endColor: endColor,\n      startColor: startColor\n    }, _line)));\n  }\n\n  return isLoaded ? children : React.createElement(Stack, _extends({}, resolvedProps, {\n    ref: ref\n  }), computedChildren);\n};\n\nexport default memo(forwardRef(SkeletonText));","map":{"version":3,"sources":["SkeletonText.tsx"],"names":["SkeletonText","resolvedProps","usePropsResolution","computedChildren","i","lines","startColor","isLoaded","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,kBAAA;AACA,SAAA,KAAA;AACA,OAAA,QAAA;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe,CAAA,KAAA,EAAA,GAAA,EAIhB;AAEH,4BAQIE,kBAAkB,CAAA,cAAA,EARtB,KAQsB,CARtB;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAM,KAAN,uBAAM,KAAN;AAAA,MAOKD,aAPL;;AAUA,MAAME,gBAAgB,GAZnB,EAYH;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAjB,KAAA,EAA2BA,CAA3B,EAAA,EAAgC;AAE9B,QAAIA,CAAC,KAAKC,KAAK,GAAXD,CAAAA,IAAmBC,KAAK,KAA5B,CAAA,EAAoC;AAClCF,MAAAA,gBAAgB,CAAhBA,IAAAA,CAEE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,QAAA,GAAG,EADL,CAAA;AAEE,QAAA,QAAQ,EAFV,QAAA;AAGE,QAAA,UAAU,EAHZ,UAAA;AAIE,QAAA,CAAC,EAAC;AAJJ,OAAA,EAFFA,KAEE,CAAA,CAFFA;AADF,KAAA,MAYEA,gBAAgB,CAAhBA,IAAAA,CACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA;AACE,MAAA,GAAG,EADL,CAAA;AAEE,MAAA,QAAQ,EAFV,QAAA;AAGE,MAAA,UAAU,EAAEG;AAHd,KAAA,EADFH,KACE,CAAA,CADFA;AAQH;;AACD,SAAOI,QAAQ,GAAA,QAAA,GAGb,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAA0B,IAAA,GAAG,EAAEC;AAA/B,GAAA,CAAA,EAHF,gBAGE,CAHF;AAzCF,CAAA;;AAkDA,eAAeC,IAAI,CAACC,UAAU,CAA9B,YAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks';\nimport { Stack } from '../../primitives/Stack';\nimport Skeleton from './Skeleton';\nimport type { ISkeletonTextProps } from './types';\n\nconst SkeletonText = (\n  //@ts-ignore\n  props: ISkeletonTextProps,\n  ref: any\n) => {\n  // const { children, ...props } = allProps;\n  const {\n    children,\n    startColor,\n    endColor,\n    lines,\n    isLoaded,\n    _line,\n    ...resolvedProps\n  } = usePropsResolution('SkeletonText', props);\n\n  const computedChildren = [];\n  //generating an array of skeleton components (same length as noOfLines)\n  for (let i = 0; i < lines; i++) {\n    //check for last line (to change the width of last line)\n    if (i === lines - 1 && lines !== 1) {\n      computedChildren.push(\n        //Using Skeleton component with required props\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          w=\"75%\"\n          {..._line}\n        />\n      );\n    } else\n      computedChildren.push(\n        <Skeleton\n          key={i}\n          endColor={endColor}\n          startColor={startColor}\n          {..._line}\n        />\n      );\n  }\n  return isLoaded ? (\n    children\n  ) : (\n    <Stack {...resolvedProps} ref={ref}>\n      {computedChildren}\n    </Stack>\n  );\n};\n\nexport default memo(forwardRef(SkeletonText));\n"]},"metadata":{},"sourceType":"module"}