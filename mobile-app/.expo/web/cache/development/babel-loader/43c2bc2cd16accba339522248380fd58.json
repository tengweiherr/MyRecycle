{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"progress\", \"onPress\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from 'react-native-reanimated';\nvar interpolateDeprecated = Animated.interpolate,\n    interpolateNode = Animated.interpolateNode,\n    cond = Animated.cond,\n    greaterThan = Animated.greaterThan;\nvar interpolate = interpolateNode !== null && interpolateNode !== void 0 ? interpolateNode : interpolateDeprecated;\nvar PROGRESS_EPSILON = 0.05;\nvar Overlay = React.forwardRef(function Overlay(_ref, ref) {\n  var progress = _ref.progress,\n      onPress = _ref.onPress,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var animatedStyle = {\n    opacity: interpolate(progress, {\n      inputRange: Platform.OS === 'windows' || Platform.OS === 'macos' ? [0, 1] : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1]\n    }),\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1)\n  };\n  return React.createElement(Animated.View, _extends({}, props, {\n    ref: ref,\n    style: [styles.overlay, overlayStyle, animatedStyle, style]\n  }), React.createElement(Pressable, {\n    onPress: onPress,\n    style: styles.pressable\n  }));\n});\nvar overlayStyle = Platform.select({\n  web: {\n    WebkitTapHighlightColor: 'transparent'\n  },\n  default: {}\n});\nvar styles = StyleSheet.create({\n  overlay: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    backgroundColor: 'rgba(0, 0, 0, 0.5)'\n  }),\n  pressable: {\n    flex: 1\n  }\n});\nexport default Overlay;","map":{"version":3,"sources":["Overlay.tsx"],"names":["interpolate","greaterThan","interpolateNode","PROGRESS_EPSILON","Overlay","props","animatedStyle","opacity","inputRange","Platform","outputRange","zIndex","cond","styles","pressable","overlayStyle","web","WebkitTapHighlightColor","default","overlay","StyleSheet","backgroundColor","flex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,OAAA,QAAA,MAAA,yBAAA;AAEA,IAAM,qBAAN,GAAA,QAAA,CAEEA,WAFF;AAAA,IAAM,eAAN,GAAA,QAAA,CAAM,eAAN;AAAA,IAAM,IAAN,GAAA,QAAA,CAAM,IAAN;AAAA,IAKEC,WALF,GAAA,QAAA,CAKEA,WALF;AAQA,IAAMD,WAAmC,GACvCE,eADuC,KAAA,IACvCA,IAAAA,eADuC,KAAA,KAAA,CACvCA,GADuC,eACvCA,GADF,qBAAA;AAGA,IAAMC,gBAAgB,GAAtB,IAAA;AAOA,IAAMC,OAAO,GAAG,KAAK,CAAL,UAAA,CAAiB,SAAA,OAAA,CAAA,IAAA,EAAA,GAAA,EAG/B;AAFA,MAAA,QAAA,GAEA,IAFA,CAAA,QAAA;AAAA,MAAA,OAAA,GAEA,IAFA,CAAA,OAAA;AAAA,MAAA,KAAA,GAEA,IAFA,CAAA,KAAA;AAAA,MAA+BC,KAA/B,4BAEA,IAFA;;AAGA,MAAMC,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAEP,WAAW,CAAA,QAAA,EAAW;AAK7BQ,MAAAA,UAAU,EACRC,QAAQ,CAARA,EAAAA,KAAAA,SAAAA,IAA6BA,QAAQ,CAARA,EAAAA,KAA7BA,OAAAA,GACI,CAAA,CAAA,EADJA,CACI,CADJA,GAEI,CAAA,gBAAA,EARuB,CAQvB,CARuB;AAS7BC,MAAAA,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;AATgB,KAAX,CADA;AAepBC,IAAAA,MAAM,EAAEC,IAAI,CAACX,WAAW,CAAA,QAAA,EAAZ,gBAAY,CAAZ,EAAA,CAAA,EAA6C,CAA7C,CAAA;AAfQ,GAAtB;AAkBA,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,KAAK,EAAE,CAACY,MAAM,CAAP,OAAA,EAAA,YAAA,EAAA,aAAA,EAAA,KAAA;AAHT,GAAA,CAAA,EAKE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,IAAA,OAAO,EAAlB,OAAA;AAA6B,IAAA,KAAK,EAAEA,MAAM,CAACC;AAA3C,GAAA,CALF,CADF;AAtBF,CAAgB,CAAhB;AAiCA,IAAMC,YAAY,GAAG,QAAQ,CAAR,MAAA,CAAwC;AAC3DC,EAAAA,GAAG,EAAE;AAGHC,IAAAA,uBAAuB,EAAE;AAHtB,GADsD;AAM3DC,EAAAA,OAAO,EAAE;AANkD,CAAxC,CAArB;AASA,IAAML,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BM,EAAAA,OAAO,kCACFC,UAAU,CADN,kBAAF;AAELC,IAAAA,eAAe,EAAE;AAFZ,IADwB;AAK/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAE;AADG;AALoB,CAAlB,CAAf;AAUA,eAAA,OAAA","sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  // @ts-expect-error: this is to support reanimated 1\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateNode =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n  onPress: () => void;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, onPress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    >\n      <Pressable onPress={onPress} style={styles.pressable} />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"]},"metadata":{},"sourceType":"module"}