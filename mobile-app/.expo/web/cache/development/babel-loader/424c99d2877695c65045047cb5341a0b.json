{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { useRef as $Qsto2$useRef, useState as $Qsto2$useState, useMemo as $Qsto2$useMemo } from \"react\";\nimport { useControlledState as $Qsto2$useControlledState } from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nvar $7af3f5b51489e0b5$exports = {};\n$parcel$export($7af3f5b51489e0b5$exports, \"useMultipleSelectionState\", function () {\n  return $7af3f5b51489e0b5$export$253fe78d46329472;\n});\n\nvar $e40ea825a81a3709$export$52baac22726c72bf = function (_Set) {\n  _inherits($e40ea825a81a3709$export$52baac22726c72bf, _Set);\n\n  var _super = _createSuper($e40ea825a81a3709$export$52baac22726c72bf);\n\n  function $e40ea825a81a3709$export$52baac22726c72bf(keys, anchorKey, currentKey) {\n    var _this;\n\n    _classCallCheck(this, $e40ea825a81a3709$export$52baac22726c72bf);\n\n    _this = _super.call(this, keys);\n\n    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {\n      _this.anchorKey = anchorKey || keys.anchorKey;\n      _this.currentKey = currentKey || keys.currentKey;\n    } else {\n      _this.anchorKey = anchorKey;\n      _this.currentKey = currentKey;\n    }\n\n    return _this;\n  }\n\n  return _createClass($e40ea825a81a3709$export$52baac22726c72bf);\n}(_wrapNativeSuper(Set));\n\nfunction $7af3f5b51489e0b5$var$equalSets(setA, setB) {\n  if (setA.size !== setB.size) return false;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(setA), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n    if (!setB.has(item)) return false;\n  }\n\n  return true;\n}\n\nfunction $7af3f5b51489e0b5$export$253fe78d46329472(props) {\n  var _props$selectionMode = props.selectionMode,\n      selectionMode = _props$selectionMode === void 0 ? 'none' : _props$selectionMode,\n      disallowEmptySelection = props.disallowEmptySelection,\n      allowDuplicateSelectionEvents = props.allowDuplicateSelectionEvents;\n  var isFocusedRef = $Qsto2$useRef(false);\n\n  var _$Qsto2$useState = $Qsto2$useState(false),\n      _$Qsto2$useState2 = _slicedToArray(_$Qsto2$useState, 2),\n      _setFocused = _$Qsto2$useState2[1];\n\n  var focusedKeyRef = $Qsto2$useRef(null);\n  var childFocusStrategyRef = $Qsto2$useRef(null);\n\n  var _$Qsto2$useState3 = $Qsto2$useState(null),\n      _$Qsto2$useState4 = _slicedToArray(_$Qsto2$useState3, 2),\n      _setFocusedKey = _$Qsto2$useState4[1];\n\n  var selectedKeysProp = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys);\n  }, [props.selectedKeys]);\n  var defaultSelectedKeys = $Qsto2$useMemo(function () {\n    return $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf());\n  }, [props.defaultSelectedKeys]);\n\n  var _$Qsto2$useControlled = $Qsto2$useControlledState(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange),\n      _$Qsto2$useControlled2 = _slicedToArray(_$Qsto2$useControlled, 2),\n      selectedKeys = _$Qsto2$useControlled2[0],\n      _setSelectedKeys = _$Qsto2$useControlled2[1];\n\n  var disabledKeysProp = $Qsto2$useMemo(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n\n  var _$Qsto2$useState5 = $Qsto2$useState(props.selectionBehavior || 'toggle'),\n      _$Qsto2$useState6 = _slicedToArray(_$Qsto2$useState5, 2),\n      selectionBehavior = _$Qsto2$useState6[0],\n      setSelectionBehavior = _$Qsto2$useState6[1];\n\n  if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');\n  return {\n    selectionMode: selectionMode,\n    disallowEmptySelection: disallowEmptySelection,\n    selectionBehavior: selectionBehavior,\n    setSelectionBehavior: setSelectionBehavior,\n\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n\n    setFocused: function setFocused(f) {\n      isFocusedRef.current = f;\n\n      _setFocused(f);\n    },\n\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n\n    setFocusedKey: function setFocusedKey(k) {\n      var childFocusStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'first';\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n\n      _setFocusedKey(k);\n    },\n    selectedKeys: selectedKeys,\n    setSelectedKeys: function setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) _setSelectedKeys(keys);\n    },\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {\n  if (!selection) return defaultValue;\n  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);\n}\n\nvar $d496c0a20b6e58ec$exports = {};\n$parcel$export($d496c0a20b6e58ec$exports, \"SelectionManager\", function () {\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n});\n\nvar $d496c0a20b6e58ec$export$6c8a5aaad13c9852 = function () {\n  function $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, state, options) {\n    _classCallCheck(this, $d496c0a20b6e58ec$export$6c8a5aaad13c9852);\n\n    this.collection = collection;\n    this.state = state;\n    var ref;\n    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;\n    this._isSelectAll = null;\n  }\n\n  _createClass($d496c0a20b6e58ec$export$6c8a5aaad13c9852, [{\n    key: \"selectionMode\",\n    get: function get() {\n      return this.state.selectionMode;\n    }\n  }, {\n    key: \"disallowEmptySelection\",\n    get: function get() {\n      return this.state.disallowEmptySelection;\n    }\n  }, {\n    key: \"selectionBehavior\",\n    get: function get() {\n      return this.state.selectionBehavior;\n    }\n  }, {\n    key: \"setSelectionBehavior\",\n    value: function setSelectionBehavior(selectionBehavior) {\n      this.state.setSelectionBehavior(selectionBehavior);\n    }\n  }, {\n    key: \"isFocused\",\n    get: function get() {\n      return this.state.isFocused;\n    }\n  }, {\n    key: \"setFocused\",\n    value: function setFocused(isFocused) {\n      this.state.setFocused(isFocused);\n    }\n  }, {\n    key: \"focusedKey\",\n    get: function get() {\n      return this.state.focusedKey;\n    }\n  }, {\n    key: \"childFocusStrategy\",\n    get: function get() {\n      return this.state.childFocusStrategy;\n    }\n  }, {\n    key: \"setFocusedKey\",\n    value: function setFocusedKey(key, childFocusStrategy) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }, {\n    key: \"selectedKeys\",\n    get: function get() {\n      return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n    }\n  }, {\n    key: \"rawSelection\",\n    get: function get() {\n      return this.state.selectedKeys;\n    }\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(key) {\n      if (this.state.selectionMode === 'none') return false;\n      key = this.getKey(key);\n      return this.state.selectedKeys === 'all' ? !this.state.disabledKeys.has(key) : this.state.selectedKeys.has(key);\n    }\n  }, {\n    key: \"isEmpty\",\n    get: function get() {\n      return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n    }\n  }, {\n    key: \"isSelectAll\",\n    get: function get() {\n      if (this.isEmpty) return false;\n      if (this.state.selectedKeys === 'all') return true;\n      if (this._isSelectAll != null) return this._isSelectAll;\n      var allKeys = this.getSelectAllKeys();\n      var selectedKeys = this.state.selectedKeys;\n      this._isSelectAll = allKeys.every(function (k) {\n        return selectedKeys.has(k);\n      });\n      return this._isSelectAll;\n    }\n  }, {\n    key: \"firstSelectedKey\",\n    get: function get() {\n      var first = null;\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step2; !(_step2 = _iterator2()).done;) {\n        var key = _step2.value;\n        var item = this.collection.getItem(key);\n        if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;\n      }\n\n      return first === null || first === void 0 ? void 0 : first.key;\n    }\n  }, {\n    key: \"lastSelectedKey\",\n    get: function get() {\n      var last = null;\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(this.state.selectedKeys), _step3; !(_step3 = _iterator3()).done;) {\n        var key = _step3.value;\n        var item = this.collection.getItem(key);\n        if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;\n      }\n\n      return last === null || last === void 0 ? void 0 : last.key;\n    }\n  }, {\n    key: \"extendSelection\",\n    value: function extendSelection(toKey) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        this.replaceSelection(toKey);\n        return;\n      }\n\n      toKey = this.getKey(toKey);\n      var selection;\n      if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {\n        var selectedKeys = this.state.selectedKeys;\n        var anchorKey = selectedKeys.anchorKey || toKey;\n        selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);\n\n        for (var _iterator4 = _createForOfIteratorHelperLoose(this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)), _step4; !(_step4 = _iterator4()).done;) {\n          var key = _step4.value;\n          selection.delete(key);\n        }\n\n        for (var _iterator5 = _createForOfIteratorHelperLoose(this.getKeyRange(toKey, anchorKey)), _step5; !(_step5 = _iterator5()).done;) {\n          var key1 = _step5.value;\n          if (!this.state.disabledKeys.has(key1)) selection.add(key1);\n        }\n      }\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getKeyRange\",\n    value: function getKeyRange(from, to) {\n      var fromItem = this.collection.getItem(from);\n      var toItem = this.collection.getItem(to);\n\n      if (fromItem && toItem) {\n        if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);\n        return this.getKeyRangeInternal(to, from);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKeyRangeInternal\",\n    value: function getKeyRangeInternal(from, to) {\n      var keys = [];\n      var key = from;\n\n      while (key) {\n        var item = this.collection.getItem(key);\n        if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n        if (key === to) return keys;\n        key = this.collection.getKeyAfter(key);\n      }\n\n      return [];\n    }\n  }, {\n    key: \"getKey\",\n    value: function getKey(key) {\n      var item = this.collection.getItem(key);\n      if (!item) return key;\n      if (item.type === 'cell' && this.allowsCellSelection) return key;\n\n      while (item.type !== 'item' && item.parentKey != null) {\n        item = this.collection.getItem(item.parentKey);\n      }\n\n      if (!item || item.type !== 'item') return null;\n      return item.key;\n    }\n  }, {\n    key: \"toggleSelection\",\n    value: function toggleSelection(key) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single' && !this.isSelected(key)) {\n        this.replaceSelection(key);\n        return;\n      }\n\n      key = this.getKey(key);\n      if (key == null) return;\n      var keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n      if (keys.has(key)) keys.delete(key);else {\n        keys.add(key);\n        keys.anchorKey = key;\n        keys.currentKey = key;\n      }\n      if (this.disallowEmptySelection && keys.size === 0) return;\n      this.state.setSelectedKeys(keys);\n    }\n  }, {\n    key: \"replaceSelection\",\n    value: function replaceSelection(key) {\n      if (this.selectionMode === 'none') return;\n      key = this.getKey(key);\n      if (key == null) return;\n      this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key));\n    }\n  }, {\n    key: \"setSelectedKeys\",\n    value: function setSelectedKeys(keys) {\n      if (this.selectionMode === 'none') return;\n      var selection = new $e40ea825a81a3709$export$52baac22726c72bf();\n\n      for (var _iterator6 = _createForOfIteratorHelperLoose(keys), _step6; !(_step6 = _iterator6()).done;) {\n        var key = _step6.value;\n        key = this.getKey(key);\n\n        if (key != null) {\n          selection.add(key);\n          if (this.selectionMode === 'single') break;\n        }\n      }\n\n      this.state.setSelectedKeys(selection);\n    }\n  }, {\n    key: \"getSelectAllKeys\",\n    value: function getSelectAllKeys() {\n      var _this2 = this;\n\n      var keys = [];\n\n      var addKeys = function addKeys(key) {\n        while (key) {\n          if (!_this2.state.disabledKeys.has(key)) {\n            var item = _this2.collection.getItem(key);\n\n            if (item.type === 'item') keys.push(key);\n            if (item.hasChildNodes && (_this2.allowsCellSelection || item.type !== 'item')) addKeys(_toConsumableArray(item.childNodes)[0].key);\n          }\n\n          key = _this2.collection.getKeyAfter(key);\n        }\n      };\n\n      addKeys(this.collection.getFirstKey());\n      return keys;\n    }\n  }, {\n    key: \"selectAll\",\n    value: function selectAll() {\n      if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());\n    }\n  }, {\n    key: \"toggleSelectAll\",\n    value: function toggleSelectAll() {\n      if (this.isSelectAll) this.clearSelection();else this.selectAll();\n    }\n  }, {\n    key: \"select\",\n    value: function select(key, e) {\n      if (this.selectionMode === 'none') return;\n\n      if (this.selectionMode === 'single') {\n        if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n      } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) this.toggleSelection(key);else this.replaceSelection(key);\n    }\n  }, {\n    key: \"isSelectionEqual\",\n    value: function isSelectionEqual(selection) {\n      if (selection === this.state.selectedKeys) return true;\n      var selectedKeys = this.selectedKeys;\n      if (selection.size !== selectedKeys.size) return false;\n\n      for (var _iterator7 = _createForOfIteratorHelperLoose(selection), _step7; !(_step7 = _iterator7()).done;) {\n        var key = _step7.value;\n        if (!selectedKeys.has(key)) return false;\n      }\n\n      for (var _iterator8 = _createForOfIteratorHelperLoose(selectedKeys), _step8; !(_step8 = _iterator8()).done;) {\n        var key2 = _step8.value;\n        if (!selection.has(key2)) return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"canSelectItem\",\n    value: function canSelectItem(key) {\n      if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n      var item = this.collection.getItem(key);\n      if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;\n      return true;\n    }\n  }]);\n\n  return $d496c0a20b6e58ec$export$6c8a5aaad13c9852;\n}();\n\nvar $63d397230baf7bd4$exports = {};\nexport { $7af3f5b51489e0b5$export$253fe78d46329472 as useMultipleSelectionState, $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"sources":["packages/@react-stately/selection/src/useMultipleSelectionState.ts","packages/@react-stately/selection/src/Selection.ts","packages/@react-stately/selection/src/SelectionManager.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key, useMemo, useRef, useState} from 'react';\nimport {MultipleSelection, SelectionBehavior, SelectionMode} from '@react-types/shared';\nimport {MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\nimport {useControlledState} from '@react-stately/utils';\n\nfunction equalSets(setA, setB) {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  for (let item of setA) {\n    if (!setB.has(item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport interface MultipleSelectionStateProps extends MultipleSelection {\n  /** How multiple selection should behave in the collection. */\n  selectionBehavior?: SelectionBehavior,\n  /** Whether onSelectionChange should fire even if the new set of keys is the same as the last. */\n  allowDuplicateSelectionEvents?: boolean\n}\n\n/**\n * Manages state for multiple selection and focus in a collection.\n */\nexport function useMultipleSelectionState(props: MultipleSelectionStateProps): MultipleSelectionState {\n  let {\n    selectionMode = 'none' as SelectionMode,\n    disallowEmptySelection,\n    allowDuplicateSelectionEvents\n  } = props;\n\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).\n  let isFocusedRef = useRef(false);\n  let [, setFocused] = useState(false);\n  let focusedKeyRef = useRef(null);\n  let childFocusStrategyRef = useRef(null);\n  let [, setFocusedKey] = useState(null);\n  let selectedKeysProp = useMemo(() => convertSelection(props.selectedKeys), [props.selectedKeys]);\n  let defaultSelectedKeys = useMemo(() => convertSelection(props.defaultSelectedKeys, new Selection()), [props.defaultSelectedKeys]);\n  let [selectedKeys, setSelectedKeys] = useControlledState(\n    selectedKeysProp,\n    defaultSelectedKeys,\n    props.onSelectionChange\n  );\n  let disabledKeysProp = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n  let [selectionBehavior, setSelectionBehavior] = useState(props.selectionBehavior || 'toggle');\n\n  // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press\n  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.\n  if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) {\n    setSelectionBehavior('replace');\n  }\n\n  return {\n    selectionMode,\n    disallowEmptySelection,\n    selectionBehavior,\n    setSelectionBehavior,\n    get isFocused() {\n      return isFocusedRef.current;\n    },\n    setFocused(f) {\n      isFocusedRef.current = f;\n      setFocused(f);\n    },\n    get focusedKey() {\n      return focusedKeyRef.current;\n    },\n    get childFocusStrategy() {\n      return childFocusStrategyRef.current;\n    },\n    setFocusedKey(k, childFocusStrategy = 'first') {\n      focusedKeyRef.current = k;\n      childFocusStrategyRef.current = childFocusStrategy;\n      setFocusedKey(k);\n    },\n    selectedKeys,\n    setSelectedKeys(keys) {\n      if (allowDuplicateSelectionEvents || !equalSets(keys, selectedKeys)) {\n        setSelectedKeys(keys);\n      }\n    },\n    disabledKeys: disabledKeysProp\n  };\n}\n\nfunction convertSelection(selection: 'all' | Iterable<Key>, defaultValue?: Selection): 'all' | Selection {\n  if (!selection) {\n    return defaultValue;\n  }\n\n  return selection === 'all'\n    ? 'all'\n    : new Selection(selection);\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Key} from 'react';\n\n/**\n * A Selection is a special Set containing Keys, which also has an anchor\n * and current selected key for use when range selecting.\n */\nexport class Selection extends Set<Key> {\n  anchorKey: Key;\n  currentKey: Key;\n\n  constructor(keys?: Iterable<Key> | Selection, anchorKey?: Key, currentKey?: Key) {\n    super(keys);\n    if (keys instanceof Selection) {\n      this.anchorKey = anchorKey || keys.anchorKey;\n      this.currentKey = currentKey || keys.currentKey;\n    } else {\n      this.anchorKey = anchorKey;\n      this.currentKey = currentKey;\n    }\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  Selection as ISelection,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {Key} from 'react';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key, childFocusStrategy?: FocusStrategy) {\n    this.state.setFocusedKey(key, childFocusStrategy);\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? !this.state.disabledKeys.has(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item?.index < first.index) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item?.index > last.index) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (!this.state.disabledKeys.has(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (fromItem.index <= toItem.index) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    this.state.setSelectedKeys(new Selection([key], key, key));\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key) {\n        if (!this.state.disabledKeys.has(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys([...item.childNodes][0].key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}