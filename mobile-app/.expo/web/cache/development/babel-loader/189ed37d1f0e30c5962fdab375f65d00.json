{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"as\"],\n    _excluded2 = [\"size\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from \"../../../hooks\";\nimport SVGIcon from \"./SVGIcon\";\nimport { Factory } from \"../../../factory\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Icon = function Icon(_ref, ref) {\n  var as = _ref.as,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _usePropsResolution = usePropsResolution('Icon', props),\n      size = _usePropsResolution.size,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var tokenizedFontSize = useToken('space', size);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  if (!as) {\n    return React.createElement(SVGIcon, _extends({\n      size: size\n    }, resolvedProps, {\n      ref: ref\n    }));\n  }\n\n  var isJSX = React.isValidElement(as);\n  var StyledAs = Factory(isJSX ? function (resolvedProps) {\n    return React.cloneElement(as, _objectSpread(_objectSpread({}, resolvedProps), as.props));\n  } : as);\n  return React.createElement(StyledAs, _extends({}, resolvedProps, {\n    fontSize: tokenizedFontSize,\n    lineHeight: tokenizedFontSize,\n    size: size,\n    ref: ref\n  }));\n};\n\nexport default memo(forwardRef(Icon));","map":{"version":3,"sources":["Icon.tsx"],"names":["Icon","props","resolvedProps","usePropsResolution","tokenizedFontSize","useToken","useHasResponsiveProps","size","ref","isJSX","React","StyledAs","Factory","as","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,QAAA,EAAA,kBAAA;AAEA,OAAA,OAAA;AACA,SAAA,OAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,IAAI,GAAG,SAAPA,IAAO,OAAA,GAAA,EAA6C;AAAA,MAA5C,EAA4C,QAA5C,EAA4C;AAAA,MAAnCC,KAAmC;;AACxD,4BAAmCE,kBAAkB,CAAA,MAAA,EAArD,KAAqD,CAArD;AAAA,MAAM,IAAN,uBAAM,IAAN;AAAA,MAAiBD,aAAjB;;AACA,MAAME,iBAAiB,GAAGC,QAAQ,CAAA,OAAA,EAFsB,IAEtB,CAAlC;;AAEA,MAAIC,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,MAAI,CAAJ,EAAA,EAAS;AACP,WAAO,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA,QAAA,CAAA;AAAS,MAAA,IAAI,EAAEC;AAAf,KAAA,EAAA,aAAA,EAAA;AAAwC,MAAA,GAAG,EAAEC;AAA7C,KAAA,CAAA,CAAP;AACD;;AACD,MAAMC,KAAK,GAAGC,KAAK,CAALA,cAAAA,CAAd,EAAcA,CAAd;AACA,MAAMC,QAAQ,GAAGC,OAAO,CACtBH,KAAK,GACAP,UAAAA,aAAD;AAAA,WACE,KAAK,CAAL,YAAA,CAAA,EAAA,kCAAuB,aAAvB,GAGKW,EAAE,CAACZ,KAHR,EADF;AAAA,GADC,GADP,EAAwB,CAAxB;AAWA,SACE,KAAA,CAAA,aAAA,CAAA,QAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA;AAEE,IAAA,QAAQ,EAFV,iBAAA;AAGE,IAAA,UAAU,EAHZ,iBAAA;AAIE,IAAA,IAAI,EAJN,IAAA;AAKE,IAAA,GAAG,EAAEO;AALP,GAAA,CAAA,CADF;AAtBF,CAAA;;AAiCA,eAAeM,IAAI,CAACC,UAAU,CAA9B,IAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { useToken, usePropsResolution } from '../../../hooks';\nimport type { IIconProps } from './types';\nimport SVGIcon from './SVGIcon';\nimport { Factory } from '../../../factory';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Icon = ({ as, ...props }: IIconProps, ref?: any) => {\n  const { size, ...resolvedProps } = usePropsResolution('Icon', props);\n  const tokenizedFontSize = useToken('space', size);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  if (!as) {\n    return <SVGIcon size={size} {...resolvedProps} ref={ref} />;\n  }\n  const isJSX = React.isValidElement(as);\n  const StyledAs = Factory(\n    isJSX\n      ? (resolvedProps) =>\n          React.cloneElement(as, {\n            ...resolvedProps,\n            //@ts-ignore\n            ...as.props,\n          })\n      : as\n  );\n\n  return (\n    <StyledAs\n      {...resolvedProps}\n      fontSize={tokenizedFontSize}\n      lineHeight={tokenizedFontSize}\n      size={size}\n      ref={ref}\n    />\n  );\n};\n\nexport default memo(forwardRef(Icon));\n"]},"metadata":{},"sourceType":"module"}