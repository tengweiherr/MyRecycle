{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"_image\", \"_badgeSize\", \"source\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { Box, Image } from \"../../primitives\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar Avatar = function Avatar(_ref, ref) {\n  var children = _ref.children,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      error = _React$useState2[0],\n      setError = _React$useState2[1];\n\n  var _usePropsResolution = usePropsResolution('Avatar', props),\n      _image = _usePropsResolution._image,\n      _badgeSize = _usePropsResolution._badgeSize,\n      source = _usePropsResolution.source,\n      resolvedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var Badge = React.createElement(React.Fragment, null);\n  var remainingChildren = [];\n  React.Children.map(children, function (child) {\n    if (typeof (child === null || child === void 0 ? void 0 : child.type) === 'object' && (child === null || child === void 0 ? void 0 : child.type.displayName) === 'AvatarBadge') {\n      Badge = React.cloneElement(child, {\n        size: _badgeSize[0]\n      });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(Box, resolvedProps, !!(source !== null && source !== void 0 && source.uri) && !error ? React.createElement(Image, _extends({\n    source: source,\n    onError: function onError() {\n      setError(true);\n    }\n  }, _image, {\n    ref: ref\n  })) : remainingChildren.length !== 0 && remainingChildren, Badge);\n};\n\nexport default memo(forwardRef(Avatar));","map":{"version":3,"sources":["Avatar.tsx"],"names":["Avatar","props","React","resolvedProps","usePropsResolution","Badge","remainingChildren","child","size","_badgeSize","useHasResponsiveProps","source","setError","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,GAAA,EAAA,KAAA;AACA,SAAA,kBAAA;AAEA,SAAA,qBAAA;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,OAAA,GAAA,EAAoD;AAAA,MAAnD,QAAmD,QAAnD,QAAmD;AAAA,MAApCC,KAAoC;;AACjE,wBAA0BC,KAAK,CAALA,QAAAA,CAA1B,KAA0BA,CAA1B;AAAA;AAAA,MAAM,KAAN;AAAA,MAAM,QAAN;;AACA,4BAAyDE,kBAAkB,CAAA,QAAA,EAA3E,KAA2E,CAA3E;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAAM,UAAN,uBAAM,UAAN;AAAA,MAAM,MAAN,uBAAM,MAAN;AAAA,MAAuCD,aAAvC;;AAKA,MAAIE,KAAK,GAAG,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAZ,IAAY,CAAZ;AACA,MAAMC,iBAAgC,GAR2B,EAQjE;AAEAJ,EAAAA,KAAK,CAALA,QAAAA,CAAAA,GAAAA,CAAAA,QAAAA,EAA8BK,UAAAA,KAAD,EAAW;AACtC,QACE,QAAOA,KAAP,KAAA,IAAOA,IAAAA,KAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,KAAK,CAAZ,IAAA,MAAA,QAAA,IACA,CAAA,KAAK,KAAL,IAAA,IAAA,KAAK,KAAA,KAAL,CAAA,GAAA,KAAA,CAAA,GAAA,KAAK,CAAL,IAAA,CAAA,WAAA,MAFF,aAAA,EAGE;AACAF,MAAAA,KAAK,GAAG,KAAK,CAAL,YAAA,CAAA,KAAA,EAA0B;AAAEG,QAAAA,IAAI,EAAEC,UAAU,CAAA,CAAA;AAAlB,OAA1B,CAARJ;AAJF,KAAA,MAKO;AACLC,MAAAA,iBAAiB,CAAjBA,IAAAA,CAAAA,KAAAA;AACD;AAlB8D,GAUjEJ;;AAYA,MAAIQ,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,aAAA,EACG,CAAC,EAACC,MAAD,KAAA,IAACA,IAAAA,MAAD,KAAA,KAAA,CAACA,IAAAA,MAAM,CAAR,GAAC,CAAD,IAAiB,CAAjB,KAAA,GACC,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,IAAA,MAAM,EADR,MAAA;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbC,MAAAA,QAAQ,CAARA,IAAQ,CAARA;AACD;AAJH,GAAA,EAAA,MAAA,EAAA;AAME,IAAA,GAAG,EAAEC;AANP,GAAA,CAAA,CADD,GAUCP,iBAAiB,CAAjBA,MAAAA,KAAAA,CAAAA,IAXJ,iBAAA,EADF,KACE,CADF;AA1BF,CAAA;;AA6CA,eAAeQ,IAAI,CAACC,UAAU,CAA9B,MAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { Box, Image } from '../../primitives';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IAvatarProps } from './types';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst Avatar = ({ children, ...props }: IAvatarProps, ref: any) => {\n  const [error, setError] = React.useState(false);\n  const { _image, _badgeSize, source, ...resolvedProps } = usePropsResolution(\n    'Avatar',\n    props\n  );\n\n  let Badge = <></>;\n  const remainingChildren: JSX.Element[] = [];\n  //  Pop Badge from children\n  React.Children.map(children, (child) => {\n    if (\n      typeof child?.type === 'object' &&\n      child?.type.displayName === 'AvatarBadge'\n    ) {\n      Badge = React.cloneElement(child, { size: _badgeSize[0] });\n    } else {\n      remainingChildren.push(child);\n    }\n  });\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return (\n    <Box {...resolvedProps}>\n      {!!source?.uri && !error ? (\n        <Image\n          source={source}\n          onError={() => {\n            setError(true);\n          }}\n          {..._image}\n          ref={ref}\n        />\n      ) : (\n        remainingChildren.length !== 0 && remainingChildren\n      )}\n      {Badge}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Avatar));\n"]},"metadata":{},"sourceType":"module"}