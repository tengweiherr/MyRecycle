{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"contentContainerStyle\", \"style\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\n\nfunction DrawerContentScrollView(_ref, ref) {\n  var contentContainerStyle = _ref.contentContainerStyle,\n      style = _ref.style,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var drawerPosition = React.useContext(DrawerPositionContext);\n  var insets = useSafeAreaInsets();\n  var isRight = I18nManager.isRTL ? drawerPosition === 'left' : drawerPosition === 'right';\n  return React.createElement(ScrollView, _extends({}, rest, {\n    ref: ref,\n    contentContainerStyle: [{\n      paddingTop: insets.top + 4,\n      paddingStart: !isRight ? insets.left : 0,\n      paddingEnd: isRight ? insets.right : 0\n    }, contentContainerStyle],\n    style: [styles.container, style]\n  }), children);\n}\n\nexport default React.forwardRef(DrawerContentScrollView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerContentScrollView.tsx"],"names":["rest","drawerPosition","React","insets","useSafeAreaInsets","isRight","I18nManager","paddingTop","paddingStart","paddingEnd","styles","container","flex"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAOA,SAAA,iBAAA,QAAA,gCAAA;AAEA,OAAA,qBAAA;;AAMA,SAAA,uBAAA,CAAA,IAAA,EAAA,GAAA,EAGE;AAFA,MAAA,qBAAA,GAEA,IAFA,CAAA,qBAAA;AAAA,MAAA,KAAA,GAEA,IAFA,CAAA,KAAA;AAAA,MAAA,QAAA,GAEA,IAFA,CAAA,QAAA;AAAA,MAA6CA,IAA7C,4BAEA,IAFA;;AAGA,MAAMC,cAAc,GAAGC,KAAK,CAALA,UAAAA,CAAvB,qBAAuBA,CAAvB;AACA,MAAMC,MAAM,GAAGC,iBAAf,EAAA;AAEA,MAAMC,OAAO,GAAGC,WAAW,CAAXA,KAAAA,GACZL,cAAc,KADFK,MAAAA,GAEZL,cAAc,KAFlB,OAAA;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,GAAG,EAFL,GAAA;AAGE,IAAA,qBAAqB,EAAE,CACrB;AACEM,MAAAA,UAAU,EAAEJ,MAAM,CAANA,GAAAA,GADd,CAAA;AAEEK,MAAAA,YAAY,EAAE,CAAA,OAAA,GAAWL,MAAM,CAAjB,IAAA,GAFhB,CAAA;AAGEM,MAAAA,UAAU,EAAEJ,OAAO,GAAGF,MAAM,CAAT,KAAA,GAAkB;AAHvC,KADqB,EAHzB,qBAGyB,CAHzB;AAWE,IAAA,KAAK,EAAE,CAACO,MAAM,CAAP,SAAA,EAAA,KAAA;AAXT,GAAA,CAAA,EADF,QACE,CADF;AAiBD;;AAED,eAAeR,KAAK,CAALA,UAAAA,CAAf,uBAAeA,CAAf;AAEA,IAAMQ,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  ScrollView,\n  ScrollViewProps,\n  StyleSheet,\n} from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = ScrollViewProps & {\n  children: React.ReactNode;\n};\n\nfunction DrawerContentScrollView(\n  { contentContainerStyle, style, children, ...rest }: Props,\n  ref?: React.Ref<ScrollView>\n) {\n  const drawerPosition = React.useContext(DrawerPositionContext);\n  const insets = useSafeAreaInsets();\n\n  const isRight = I18nManager.isRTL\n    ? drawerPosition === 'left'\n    : drawerPosition === 'right';\n\n  return (\n    <ScrollView\n      {...rest}\n      ref={ref}\n      contentContainerStyle={[\n        {\n          paddingTop: insets.top + 4,\n          paddingStart: !isRight ? insets.left : 0,\n          paddingEnd: isRight ? insets.right : 0,\n        },\n        contentContainerStyle,\n      ]}\n      style={[styles.container, style]}\n    >\n      {children}\n    </ScrollView>\n  );\n}\n\nexport default React.forwardRef(DrawerContentScrollView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}