{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"_hover\", \"_expanded\", \"_disabled\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Box from \"../../primitives/Box\";\nimport { AccordionItemContext } from \"./Context\";\nimport { useThemeProps } from \"../../../hooks\";\nimport { mergeRefs } from \"../../../utils\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar AccordionSummary = function AccordionSummary(_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var _React$useContext = React.useContext(AccordionItemContext),\n      index = _React$useContext.index,\n      isOpen = _React$useContext.isOpen,\n      isDisabled = _React$useContext.isDisabled,\n      onOpen = _React$useContext.onOpen,\n      onClose = _React$useContext.onClose;\n\n  var _useThemeProps = useThemeProps('AccordionSummary', props),\n      _hover = _useThemeProps._hover,\n      _expanded = _useThemeProps._expanded,\n      _disabled = _useThemeProps._disabled,\n      themedProps = _objectWithoutProperties(_useThemeProps, _excluded2);\n\n  var pressHandler = function pressHandler() {\n    isOpen ? onClose && onClose() : onOpen && onOpen();\n  };\n\n  var _ref = React.useRef(null);\n\n  var _useHover = useHover({}, _ref),\n      isHovered = _useHover.isHovered;\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 0.2,\n    disabled: isDisabled,\n    onPress: pressHandler,\n    accessible: true,\n    accessibilityRole: \"checkbox\",\n    ref: mergeRefs([ref, _ref])\n  }, React.createElement(Box, _extends({\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  }, themedProps, isHovered && _hover, isOpen && _expanded, isDisabled && _disabled, !index && {\n    borderTopColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    disabled: isDisabled,\n    cursor: isDisabled ? 'not-allowed' : 'auto'\n  } : {}), children));\n};\n\nexport default React.memo(React.forwardRef(AccordionSummary));","map":{"version":3,"sources":["AccordionSummary.tsx"],"names":["AccordionSummary","props","onClose","React","themedProps","useThemeProps","pressHandler","isOpen","onOpen","_ref","isHovered","useHover","useHasResponsiveProps","mergeRefs","isDisabled","borderTopColor","disabled","cursor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;;;AAEA,OAAA,GAAA;AAKA,SAAA,oBAAA;AACA,SAAA,aAAA;AACA,SAAA,SAAA;AACA,SAAA,QAAA,QAAA,iCAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAA,GAAA,EAGpB;AAAA,MAFH,QAEG,SAFH,QAEG;AAAA,MAFYC,KAEZ;;AACH,0BAMgCE,KAAK,CAALA,UAAAA,CANhC,oBAMgCA,CANhC;AAAA,MAAM,KAAN,qBAAM,KAAN;AAAA,MAAM,MAAN,qBAAM,MAAN;AAAA,MAAM,UAAN,qBAAM,UAAN;AAAA,MAAM,MAAN,qBAAM,MAAN;AAAA,MAKED,OALF,qBAKEA,OALF;;AAQA,uBAAyDG,aAAa,CAAA,kBAAA,EAAtE,KAAsE,CAAtE;AAAA,MAAM,MAAN,kBAAM,MAAN;AAAA,MAAM,SAAN,kBAAM,SAAN;AAAA,MAAM,SAAN,kBAAM,SAAN;AAAA,MAAyCD,WAAzC;;AAIA,MAAME,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBC,IAAAA,MAAM,GAAGL,OAAO,IAAIA,OAAd,EAAA,GAA0BM,MAAM,IAAIA,MAA1CD,EAAAA;AADF,GAAA;;AAIA,MAAME,IAAI,GAAGN,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb;;AACA,kBAAsBQ,QAAQ,CAAA,EAAA,EAlB3B,IAkB2B,CAA9B;AAAA,MAAQD,SAAR,aAAQA,SAAR;;AAEA,MAAIE,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AACE,IAAA,aAAa,EADf,GAAA;AAEE,IAAA,QAAQ,EAFV,UAAA;AAGE,IAAA,OAAO,EAHT,YAAA;AAIE,IAAA,UAAU,EAJZ,IAAA;AAKE,IAAA,iBAAiB,EALnB,UAAA;AAME,IAAA,GAAG,EAAEC,SAAS,CAAC,CAAA,GAAA,EAAD,IAAC,CAAD;AANhB,GAAA,EAQE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,OAAO,EADT,MAAA;AAEE,IAAA,aAAa,EAFf,KAAA;AAGE,IAAA,cAAc,EAHhB,eAAA;AAIE,IAAA,UAAU,EAAC;AAJb,GAAA,EAAA,WAAA,EAMOH,SAAS,IANhB,MAAA,EAOOH,MAAM,IAPb,SAAA,EAQOO,UAAU,IARjB,SAAA,EASO,CAAA,KAAA,IAAU;AAAEC,IAAAA,cAAc,EAAE;AAAlB,GATjB,EAUO,QAAQ,CAAR,EAAA,KAAA,KAAA,GACD;AACEC,IAAAA,QAAQ,EADV,UAAA;AAEEC,IAAAA,MAAM,EAAEH,UAAU,GAAA,aAAA,GAAmB;AAFvC,GADC,GAVP,EAAA,CAAA,EATJ,QASI,CARF,CADF;AA1BF,CAAA;;AA0DA,eAAeX,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,gBAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { TouchableOpacity, Platform } from 'react-native';\nimport Box from '../../primitives/Box';\nimport type {\n  IAccordionSummaryProps,\n  IAccordionItemContextProps,\n} from './types';\nimport { AccordionItemContext } from './Context';\nimport { useThemeProps } from '../../../hooks';\nimport { mergeRefs } from '../../../utils';\nimport { useHover } from '@react-native-aria/interactions';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AccordionSummary = (\n  { children, ...props }: IAccordionSummaryProps,\n  ref: any\n) => {\n  const {\n    index,\n    isOpen,\n    isDisabled,\n    onOpen,\n    onClose,\n  }: IAccordionItemContextProps = React.useContext(AccordionItemContext);\n\n  const { _hover, _expanded, _disabled, ...themedProps } = useThemeProps(\n    'AccordionSummary',\n    props\n  );\n  const pressHandler = () => {\n    isOpen ? onClose && onClose() : onOpen && onOpen();\n  };\n\n  const _ref = React.useRef(null);\n  const { isHovered } = useHover({}, _ref);\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <TouchableOpacity\n      activeOpacity={0.2}\n      disabled={isDisabled}\n      onPress={pressHandler}\n      accessible\n      accessibilityRole=\"checkbox\"\n      ref={mergeRefs([ref, _ref])}\n    >\n      <Box\n        display=\"flex\"\n        flexDirection=\"row\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        {...themedProps}\n        {...(isHovered && _hover)}\n        {...(isOpen && _expanded)}\n        {...(isDisabled && _disabled)}\n        {...(!index && { borderTopColor: 'transparent' })}\n        {...(Platform.OS === 'web'\n          ? {\n              disabled: isDisabled,\n              cursor: isDisabled ? 'not-allowed' : 'auto',\n            }\n          : {})}\n      >\n        {children}\n      </Box>\n    </TouchableOpacity>\n  );\n};\n\nexport default React.memo(React.forwardRef(AccordionSummary));\n"]},"metadata":{},"sourceType":"module"}