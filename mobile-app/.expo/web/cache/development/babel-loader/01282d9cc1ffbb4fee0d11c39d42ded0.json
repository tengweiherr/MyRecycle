{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"htmlProps\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport Box from \"../../primitives/Box\";\nimport { useFormControlProvider, FormControlContext } from \"./useFormControl\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar FormControl = function FormControl(props, ref) {\n  var _useFormControlProvid = useFormControlProvider(props),\n      htmlProps = _useFormControlProvid.htmlProps,\n      context = _objectWithoutProperties(_useFormControlProvid, _excluded);\n\n  var resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid\n  });\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(FormControlContext.Provider, {\n    value: context\n  }, React.createElement(Box, _extends({}, resolvedProps, htmlProps, {\n    ref: ref\n  })));\n};\n\nexport default memo(forwardRef(FormControl));","map":{"version":3,"sources":["FormControl.tsx"],"names":["FormControl","context","useFormControlProvider","resolvedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","useHasResponsiveProps","ref","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,SAAA,kBAAA;AACA,OAAA,GAAA;AAEA,SAAA,sBAAA,EAAA,kBAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAAA,GAAA,EAAwC;AAC1D,8BAAkCE,sBAAsB,CAAxD,KAAwD,CAAxD;AAAA,MAAM,SAAN,yBAAM,SAAN;AAAA,MAAsBD,OAAtB;;AACA,MAAME,aAAa,GAAGC,kBAAkB,CAAA,aAAA,EAAA,KAAA,EAAuB;AAC7DC,IAAAA,UAAU,EAAEJ,OAAO,CAD0C,UAAA;AAE7DK,IAAAA,UAAU,EAAEL,OAAO,CAF0C,UAAA;AAG7DM,IAAAA,SAAS,EAAEN,OAAO,CAH2C;AAAA,GAAvB,CAAxC;;AAOA,MAAIO,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAEP;AAApC,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA,EAAA,EAAA,aAAA,EAAA,SAAA,EAAA;AAAuC,IAAA,GAAG,EAAEQ;AAA5C,GAAA,CAAA,CADF,CADF;AAZF,CAAA;;AAmBA,eAAeC,IAAI,CAACC,UAAU,CAA9B,WAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport Box from '../../primitives/Box';\nimport type { IFormControlProps } from './types';\nimport { useFormControlProvider, FormControlContext } from './useFormControl';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst FormControl = (props: IFormControlProps, ref: any) => {\n  const { htmlProps, ...context } = useFormControlProvider(props);\n  const resolvedProps = usePropsResolution('FormControl', props, {\n    isDisabled: context.isDisabled,\n    isReadOnly: context.isReadOnly,\n    isInvalid: context.isInvalid,\n    // isRequired: context.isRequired,\n  });\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box {...resolvedProps} {...htmlProps} ref={ref} />\n    </FormControlContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(FormControl));\n"]},"metadata":{},"sourceType":"module"}