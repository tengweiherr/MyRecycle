{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Geocoder;\nexport default Geocoder = {\n  apiKey: null,\n  options: {},\n  init: function init(apiKey) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.apiKey = apiKey;\n    this.options = options;\n  },\n\n  get isInit() {\n    return !!this.apiKey;\n  },\n\n  from: function from() {\n    var _arguments = arguments,\n        _this = this;\n\n    return function _callee() {\n      var queryParams, _len, params, _key, url, response, data;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (Geocoder.isInit) {\n                _context.next = 2;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.NOT_INITIATED,\n                message: \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\"\n              };\n\n            case 2:\n              for (_len = _arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n                params[_key] = _arguments[_key];\n              }\n\n              if (!isNaN(params[0]) && !isNaN(params[1])) queryParams = {\n                latlng: params[0] + \",\" + params[1]\n              };else if (params[0] instanceof Array) queryParams = {\n                  latlng: params[0][0] + \",\" + params[0][1]\n                };else if (params[0] instanceof Object) queryParams = {\n                    latlng: (params[0].lat || params[0].latitude) + \",\" + (params[0].lng || params[0].longitude)\n                  };else if (typeof params[0] === 'string' && params[1] instanceof Object) queryParams = {\n                      address: params[0],\n                      bounds: params[1]\n                    };else if (typeof params[0] === 'string') queryParams = {\n                        address: params[0]\n                      };\n\n              if (queryParams) {\n                _context.next = 6;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.INVALID_PARAMETERS,\n                message: \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2)\n              };\n\n            case 6:\n              queryParams = _objectSpread(_objectSpread({\n                key: _this.apiKey\n              }, _this.options), queryParams);\n              url = \"https://maps.google.com/maps/api/geocode/json?\" + toQueryParams(queryParams);\n              _context.prev = 8;\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(fetch(url));\n\n            case 11:\n              response = _context.sent;\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](8);\n              throw {\n                code: Geocoder.Errors.FETCHING,\n                message: \"Error while fetching. Check your network.\",\n                origin: _context.t0\n              };\n\n            case 17:\n              _context.prev = 17;\n              _context.next = 20;\n              return _regeneratorRuntime.awrap(response.json());\n\n            case 20:\n              data = _context.sent;\n              _context.next = 26;\n              break;\n\n            case 23:\n              _context.prev = 23;\n              _context.t1 = _context[\"catch\"](17);\n              throw {\n                code: Geocoder.Errors.PARSING,\n                message: \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n                origin: response\n              };\n\n            case 26:\n              if (!(data.status !== 'OK')) {\n                _context.next = 28;\n                break;\n              }\n\n              throw {\n                code: Geocoder.Errors.SERVER,\n                message: \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n                origin: data\n              };\n\n            case 28:\n              return _context.abrupt(\"return\", data);\n\n            case 29:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[8, 14], [17, 23]], Promise);\n    }();\n  },\n  Errors: {\n    NOT_INITIATED: 0,\n    INVALID_PARAMETERS: 1,\n    FETCHING: 2,\n    PARSING: 3,\n    SERVER: 4\n  }\n};\n\nfunction encodeBounds(bounds) {\n  var southwest = bounds.southwest;\n  var northeast = bounds.northeast;\n  return encodeURIComponent(southwest.lat) + \",\" + encodeURIComponent(southwest.lng) + \"|\" + encodeURIComponent(northeast.lat) + \",\" + encodeURIComponent(northeast.lng);\n}\n\nfunction encodeComponent(key, value) {\n  if (key === 'bounds') {\n    return encodeBounds(value);\n  }\n\n  return encodeURIComponent(value);\n}\n\nfunction toQueryParams(object) {\n  return Object.keys(object).filter(function (key) {\n    return !!object[key];\n  }).map(function (key) {\n    return key + \"=\" + encodeComponent(key, object[key]);\n  }).join(\"&\");\n}","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/node_modules/react-native-geocoding/Geocoder.js"],"names":["Geocoder","apiKey","options","init","isInit","from","code","Errors","NOT_INITIATED","message","params","isNaN","queryParams","latlng","Array","Object","lat","latitude","lng","longitude","address","bounds","INVALID_PARAMETERS","JSON","stringify","key","url","toQueryParams","fetch","response","FETCHING","origin","json","data","PARSING","status","SERVER","encodeBounds","southwest","northeast","encodeURIComponent","encodeComponent","value","object","keys","filter","map","join"],"mappings":"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","sourcesContent":["/**\n * Module to use google's geocoding & reverse geocoding.\n */\nlet Geocoder;\nexport default Geocoder = {\n\tapiKey : null,\n\toptions : {},\n\t\n\t/**\n\t * Initialize the module.\n\t * @param {String} apiKey The api key of your application in google.\n\t * @param {Object} [options] extra options for your geocoding request.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#geocoding\n\t */\n\tinit(apiKey, options = {}) {\n\t\tthis.apiKey = apiKey;\n\t\tthis.options = options;\n\t},\n\n\t/**\n\t * @returns {boolean} True if the module has been initiated. False otherwise.\n\t */\n\tget isInit() {\n\t\treturn !!this.apiKey;\n\t},\n\n\t/**\n\t * Do <a href=\"https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding\">(reverse) geocoding</a>, converting geographic coordinates into a human-readable address & vice-versa.\n\t * Accepted parameters:\n\t * <ul>\n\t *     <li>from(Number latitude, Number longitude)</li>\n\t *     <li>from(Array [latitude, longitude])</li>\n\t *     <li>from(Object {latitude, longitude})</li>\n\t *     <li>from(Object {lat, lng})</li>\n\t *     <li>from(String address)</li>\n\t * </ul>\n\t * @returns {Promise.<Object>} Object containing informations about the place at the coordinates.\n\t * @see https://developers.google.com/maps/documentation/geocoding/intro#GeocodingResponses\n\t */\n\tasync from(...params) {\n\t\t// check api key\n\t\tif (!Geocoder.isInit)\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.NOT_INITIATED,\n\t\t\t\tmessage : \"Geocoder isn't initialized. Call Geocoder.init function (only once), passing it your app's api key as parameter.\",\n\t\t\t};\n\n\t\t// --- convert parameters ---\n\t\tlet queryParams;\n\n\t\t// (latitude, longitude)\n\t\tif (!isNaN(params[0]) && !isNaN(params[1]))\n\t\t\tqueryParams = {latlng : `${params[0]},${params[1]}`};\n\n\t\t// [latitude, longitude]\n\t\telse if (params[0] instanceof Array)\n\t\t\tqueryParams = {latlng : `${params[0][0]},${params[0][1]}`};\n\n\t\t// {latitude, longitude}  or {lat, lng}\n\t\telse if (params[0] instanceof Object)\n\t\t\tqueryParams = {latlng : `${params[0].lat || params[0].latitude},${params[0].lng || params[0].longitude}`};\n\n\t\t// address, {bounds: {northeast: {lat, lng}, southwest: {lan, lng}}}\n\t\telse if (typeof params[0] === 'string' && params[1] instanceof Object)\n\t\t\tqueryParams = {address : params[0], bounds : params[1]};\n\n\t\t// address\n\t\telse if (typeof params[0] === 'string')\n\t\t\tqueryParams = {address : params[0]};\n\n\t\t// --- start geocoding ---\n\n\t\t// check query params\n\t\tif (!queryParams)\n\t\t// no query params, means parameters where invalid\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.INVALID_PARAMETERS,\n\t\t\t\tmessage : \"Invalid parameters : \\n\" + JSON.stringify(params, null, 2),\n\t\t\t};\n\n\t\tqueryParams = { key: this.apiKey, ...this.options, ...queryParams }\n\t\t// build url\n\t\tconst url = `https://maps.google.com/maps/api/geocode/json?${toQueryParams(queryParams)}`;\n\n\t\tlet response, data;\n\n\t\t// fetch\n\t\ttry {\n\t\t\tresponse = await fetch(url);\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.FETCHING,\n\t\t\t\tmessage : \"Error while fetching. Check your network.\",\n\t\t\t\torigin : error,\n\t\t\t};\n\t\t}\n\n\t\t// parse\n\t\ttry {\n\t\t\tdata = await response.json();\n\t\t} catch(error) {\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.PARSING,\n\t\t\t\tmessage : \"Error while parsing response's body into JSON. The response is in the error's 'origin' field. Try to parse it yourself.\",\n\t\t\t\torigin : response,\n\t\t\t};\n\t\t}\n\n\t\t// check response's data\n\t\tif (data.status !== 'OK')\n\t\t\tthrow {\n\t\t\t\tcode : Geocoder.Errors.SERVER,\n\t\t\t\tmessage : \"Error from the server while geocoding. The received datas are in the error's 'origin' field. Check it for more informations.\",\n\t\t\t\torigin : data,\n\t\t\t};\n\n\t\treturn data;\n\t},\n\n\t/**\n\t * All possible errors.\n\t */\n\tErrors : {\n\t\t/**\n\t\t * Module hasn't been initiated. Call {@link Geocoder.init}.\n\t\t */\n\t\tNOT_INITIATED : 0,\n\n\t\t/**\n\t\t * Parameters are invalid.\n\t\t */\n\t\tINVALID_PARAMETERS : 1,\n\n\t\t/**\n\t\t * Error wile fetching to server.\n\t\t * The error.origin property contains the original fetch error.\n\t\t */\n\t\tFETCHING : 2,\n\n\t\t/**\n\t\t * Error while parsing server response.\n\t\t * The error.origin property contains the response.\n\t\t */\n\t\tPARSING : 3,\n\n\t\t/**\n\t\t * Error from the server.\n\t\t * The error.origin property contains the response's body.\n\t\t */\n\t\tSERVER : 4,\n\t},\n}\n\n/**\n * Encodes a bounds object into a URL encoded-string.\n */\nfunction encodeBounds(bounds) {\n\tconst southwest = bounds.southwest;\n\tconst northeast = bounds.northeast;\n\treturn `${encodeURIComponent(southwest.lat)},${encodeURIComponent(southwest.lng)}|${encodeURIComponent(northeast.lat)},${encodeURIComponent(northeast.lng)}`;\n}\n\n/**\n * Encodes a component so it can be used safely inside a URL.\n */\nfunction encodeComponent(key, value) {\n\tif (key === 'bounds') {\n\t\treturn encodeBounds(value);\n\t}\n\treturn encodeURIComponent(value);\n}\n\n/**\n * Convert an object into query parameters.\n * @param {Object} object Object to convert.\n * @returns {string} Encoded query parameters.\n */\nfunction toQueryParams(object) {\n\treturn Object.keys(object)\n\t\t.filter(key => !!object[key])\n\t\t.map(key => key + \"=\" + encodeComponent(key, object[key]))\n\t\t.join(\"&\")\n}\n"]},"metadata":{},"sourceType":"module"}