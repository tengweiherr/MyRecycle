{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"activeUnderlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\"],\n    _excluded2 = [\"fontSize\", \"fontWeight\", \"height\", \"paddingHorizontal\", \"textAlign\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET, ADORNMENT_SIZE, FLAT_INPUT_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingFlat, interpolatePlaceholder, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding } from \"./helpers\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./Adornment/enums\";\nvar MINIMIZED_LABEL_Y_OFFSET = -18;\nvar LABEL_PADDING_TOP = 30;\nvar LABEL_PADDING_TOP_DENSE = 24;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT_WL = 52;\nvar MIN_DENSE_HEIGHT = 40;\n\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n\n  var _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$editable = _ref.editable,\n      editable = _ref$editable === void 0 ? true : _ref$editable,\n      label = _ref.label,\n      _ref$error = _ref.error,\n      error = _ref$error === void 0 ? false : _ref$error,\n      selectionColor = _ref.selectionColor,\n      underlineColor = _ref.underlineColor,\n      activeUnderlineColor = _ref.activeUnderlineColor,\n      dense = _ref.dense,\n      style = _ref.style,\n      theme = _ref.theme,\n      _ref$render = _ref.render,\n      render = _ref$render === void 0 ? function (props) {\n    return React.createElement(NativeTextInput, props);\n  } : _ref$render,\n      _ref$multiline = _ref.multiline,\n      multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n      parentState = _ref.parentState,\n      innerRef = _ref.innerRef,\n      onFocus = _ref.onFocus,\n      forceFocus = _ref.forceFocus,\n      onBlur = _ref.onBlur,\n      onChangeText = _ref.onChangeText,\n      onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n      onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n      onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n      left = _ref.left,\n      right = _ref.right,\n      placeholderTextColor = _ref.placeholderTextColor,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var isAndroid = Platform.OS === 'android';\n  var colors = theme.colors,\n      fonts = theme.fonts;\n  var font = fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n\n  var _ref3 = StyleSheet.flatten(style) || {},\n      fontSizeStyle = _ref3.fontSize,\n      fontWeight = _ref3.fontWeight,\n      height = _ref3.height,\n      paddingHorizontal = _ref3.paddingHorizontal,\n      textAlign = _ref3.textAlign,\n      viewStyle = _objectWithoutProperties(_ref3, _excluded2);\n\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n\n  var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n    adornmentConfig: adornmentConfig\n  }),\n      paddingLeft = _calculateFlatInputHo.paddingLeft,\n      paddingRight = _calculateFlatInputHo.paddingRight;\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n\n  var leftLayout = parentState.leftLayout,\n      rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat\n  });\n  var inputTextColor, activeColor, underlineColorCustom, placeholderColor, errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  var containerStyle = {\n    backgroundColor: theme.dark ? color(colors.background).lighten(0.24).rgb().string() : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n\n  return React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && label && React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: 'text-input-flat'\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps));\n};\n\nexport default TextInputFlat;\n\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n      error = _ref2.error,\n      colors = _ref2.colors,\n      activeColor = _ref2.activeColor,\n      underlineColorCustom = _ref2.underlineColorCustom;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return React.createElement(Animated.View, {\n    style: [styles.underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: parentState.focused ? 1 : 0.5\n      }]\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"sources":["TextInputFlat.tsx"],"names":["MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","LABEL_PADDING_TOP_DENSE","MIN_HEIGHT","MIN_DENSE_HEIGHT_WL","MIN_DENSE_HEIGHT","TextInputFlat","disabled","editable","error","render","props","multiline","rest","isAndroid","Platform","fonts","font","hasActiveOutline","parentState","fontSize","viewStyle","StyleSheet","fontSizeStyle","isPaddingHorizontalPassed","paddingHorizontal","adornmentConfig","getAdornmentConfig","left","right","paddingRight","calculateFlatInputHorizontalPadding","paddingLeft","rightLayout","rightAffixWidth","leftAffixWidth","leftLayout","adornmentStyleAdjustmentForNativeInput","getAdornmentStyleAdjustmentForNativeInput","inputOffset","mode","InputMode","Flat","inputTextColor","activeColor","color","colors","placeholderColor","underlineColorCustom","activeUnderlineColor","errorColor","underlineColor","containerStyle","backgroundColor","theme","borderTopLeftRadius","borderTopRightRadius","roundness","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","label","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","scale","styles","pad","calculatePadding","paddingFlat","adjustPaddingFlat","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","calculateFlatAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","onLayoutAnimatedText","placeholderStyle","fontWeight","wiggleOffsetX","paddingOffset","maxFontSizeMultiplier","affixTopPosition","AdornmentSide","onAffixChange","onRightAffixLayoutChange","adornmentProps","forceFocus","AdornmentType","isTextInputFocused","textStyle","visible","labeled","testID","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","textAlign","outline","Underline","transform","scaleY","position","underline","bottom","zIndex","labelContainer","paddingTop","paddingBottom","input","flexGrow","margin","inputFlat","inputFlatDense","patchContainer","densePatchContainer"],"mappings":";;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA;AACA,OAAA,kBAAA;AAKA,SAAA,yBAAA,EAAA,yBAAA,EAAA,qBAAA,EAAA,cAAA,EAAA,iBAAA;AAQA,SAAA,yBAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,sBAAA,EAAA,6BAAA,EAAA,mCAAA;AAUA,SAAA,kBAAA,EAAA,yCAAA;AAIA,SAAA,aAAA,EAAA,aAAA,EAAA,SAAA;AAEA,IAAMA,wBAAwB,GAAG,CAAjC,EAAA;AAEA,IAAMC,iBAAiB,GAAvB,EAAA;AACA,IAAMC,uBAAuB,GAA7B,EAAA;AACA,IAAMC,UAAU,GAAhB,EAAA;AACA,IAAMC,mBAAmB,GAAzB,EAAA;AACA,IAAMC,gBAAgB,GAAtB,EAAA;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAA,IAAA,EA0BK;AAAA;;AA1BJ,sBA0BI,IA1BJ,CACrBC,QADqB;AAAA,MACrBA,QADqB,8BAAA,KAAA;AAAA,sBA0BI,IA1BJ,CAErBC,QAFqB;AAAA,MAErBA,QAFqB,8BAAA,IAAA;AAAA,MAAA,KAAA,GA0BI,IA1BJ,CAAA,KAAA;AAAA,mBA0BI,IA1BJ,CAIrBC,KAJqB;AAAA,MAIrBA,KAJqB,2BAAA,KAAA;AAAA,MAAA,cAAA,GA0BI,IA1BJ,CAAA,cAAA;AAAA,MAAA,cAAA,GA0BI,IA1BJ,CAAA,cAAA;AAAA,MAAA,oBAAA,GA0BI,IA1BJ,CAAA,oBAAA;AAAA,MAAA,KAAA,GA0BI,IA1BJ,CAAA,KAAA;AAAA,MAAA,KAAA,GA0BI,IA1BJ,CAAA,KAAA;AAAA,MAAA,KAAA,GA0BI,IA1BJ,CAAA,KAAA;AAAA,oBA0BI,IA1BJ,CAWrBC,MAXqB;AAAA,MAWrBA,MAXqB,4BAWXC,UAAAA,KAAD;AAAA,WAAwB,KAAA,CAAA,aAAA,CAAA,eAAA,EAXZ,KAWY,CAAxB;AAAA,GAXY;AAAA,uBA0BI,IA1BJ,CAYrBC,SAZqB;AAAA,MAYrBA,SAZqB,+BAAA,KAAA;AAAA,MAAA,WAAA,GA0BI,IA1BJ,CAAA,WAAA;AAAA,MAAA,QAAA,GA0BI,IA1BJ,CAAA,QAAA;AAAA,MAAA,OAAA,GA0BI,IA1BJ,CAAA,OAAA;AAAA,MAAA,UAAA,GA0BI,IA1BJ,CAAA,UAAA;AAAA,MAAA,MAAA,GA0BI,IA1BJ,CAAA,MAAA;AAAA,MAAA,YAAA,GA0BI,IA1BJ,CAAA,YAAA;AAAA,MAAA,oBAAA,GA0BI,IA1BJ,CAAA,oBAAA;AAAA,MAAA,uBAAA,GA0BI,IA1BJ,CAAA,uBAAA;AAAA,MAAA,wBAAA,GA0BI,IA1BJ,CAAA,wBAAA;AAAA,MAAA,IAAA,GA0BI,IA1BJ,CAAA,IAAA;AAAA,MAAA,KAAA,GA0BI,IA1BJ,CAAA,KAAA;AAAA,MAAA,oBAAA,GA0BI,IA1BJ,CAAA,oBAAA;AAAA,MAyBlBC,IAzBkB,4BA0BI,IA1BJ;;AA2BrB,MAAMC,SAAS,GAAGC,QAAQ,CAARA,EAAAA,KAAlB,SAAA;AACA,MAAM,MAAN,GAAA,KAAA,CAAM,MAAN;AAAA,MAAgBC,KAAhB,GAAA,KAAA,CAAgBA,KAAhB;AACA,MAAMC,IAAI,GAAGD,KAAK,CAAlB,OAAA;AACA,MAAME,gBAAgB,GAAGC,WAAW,CAAXA,OAAAA,IAAzB,KAAA;;AAEA,cAOKG,UAAU,CAAVA,OAAAA,CAAAA,KAAAA,KAPL,EAAA;AAAA,MAAM,aAAN,SACEF,QADF;AAAA,MAAM,UAAN,SAAM,UAAN;AAAA,MAAM,MAAN,SAAM,MAAN;AAAA,MAAM,iBAAN,SAAM,iBAAN;AAAA,MAAM,SAAN,SAAM,SAAN;AAAA,MAMKC,SANL;;AAQA,MAAMD,QAAQ,GAAGG,aAAa,IAA9B,yBAAA;AAEA,MAAMC,yBAAyB,GAC7BC,iBAAiB,KAAjBA,SAAAA,IAAmC,OAAA,iBAAA,KADrC,QAAA;AAGA,MAAMC,eAAe,GAAGC,kBAAkB,CAAC;AACzCC,IAAAA,IADyC,EACzCA,IADyC;AAEzCC,IAAAA,KAAAA,EAAAA;AAFyC,GAAD,CAA1C;;AAKA,8BAAoCE,mCAAmC,CAAC;AACtEL,IAAAA,eAAAA,EAAAA;AADsE,GAAD,CAAvE;AAAA,MAAI,WAAJ,yBAAI,WAAJ;AAAA,MAAmBI,YAAnB,yBAAmBA,YAAnB;;AAIA,MAAA,yBAAA,EAA+B;AAC7BE,IAAAA,WAAW,GAAXA,iBAAAA;AACAF,IAAAA,YAAY,GAAZA,iBAAAA;AACD;;AAED,MAAM,UAAN,GAAA,WAAA,CAAM,UAAN;AAAA,MAAoBG,WAApB,GAAA,WAAA,CAAoBA,WAApB;AAEA,MAAMC,eAAe,GAAGL,KAAK,GACzBI,WAAW,CAAXA,KAAAA,IADyB,cAAA,GAA7B,cAAA;AAIA,MAAME,cAAc,GAAGP,IAAI,GACvBQ,UAAU,CAAVA,KAAAA,IADuB,cAAA,GAA3B,cAAA;AAIA,MAAMC,sCAAsC,GAC1CC,yCAAyC,CAAC;AACxCZ,IAAAA,eADwC,EACxCA,eADwC;AAExCQ,IAAAA,eAFwC,EAExCA,eAFwC;AAGxCC,IAAAA,cAHwC,EAGxCA,cAHwC;AAIxCV,IAAAA,iBAJwC,EAIxCA,iBAJwC;AAKxCc,IAAAA,WAAW,EAL6B,iBAAA;AAMxCC,IAAAA,IAAI,EAAEC,SAAS,CAACC;AANwB,GAAD,CAD3C;AAUA,MAAA,cAAA,EAAA,WAAA,EAAA,oBAAA,EAAA,gBAAA,EAAA,UAAA;;AAMA,MAAA,QAAA,EAAc;AACZC,IAAAA,cAAc,GAAGC,WAAW,GAAGC,KAAK,CAACC,MAAM,CAAZD,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAA/BF,MAA+BE,EAA/BF;AAIAI,IAAAA,gBAAgB,GAAGD,MAAM,CAAzBC,QAAAA;AACAC,IAAAA,oBAAoB,GAApBA,aAAAA;AANF,GAAA,MAOO;AACLL,IAAAA,cAAc,GAAGG,MAAM,CAAvBH,IAAAA;AACAC,IAAAA,WAAW,GAAGnC,KAAK,GAAGqC,MAAM,CAAT,KAAA,GAAkBG,oBAAoB,IAAIH,MAAM,CAAnEF,OAAAA;AACAG,IAAAA,gBAAgB,GAAGD,MAAM,CAAzBC,WAAAA;AACAG,IAAAA,UAAU,GAAGJ,MAAM,CAAnBI,KAAAA;AACAF,IAAAA,oBAAoB,GAAGG,cAAc,IAAIL,MAAM,CAA/CE,QAAAA;AACD;;AAED,MAAMI,cAAc,GAAG;AACrBC,IAAAA,eAAe,EAAEC,KAAK,CAALA,IAAAA,GACbT,KAAK,CAACC,MAAM,CAAZD,UAAK,CAALA,CAAAA,OAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADaS,MACbT,EADaS,GAEbT,KAAK,CAACC,MAAM,CAAZD,UAAK,CAALA,CAAAA,MAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAHiB,MAGjBA,EAHiB;AAIrBU,IAAAA,mBAAmB,EAAED,KAAK,CAJL,SAAA;AAKrBE,IAAAA,oBAAoB,EAAEF,KAAK,CAACG;AALP,GAAvB;AAQA,MAAMC,UAAU,GAAGC,yBAAyB,GAA5C,QAAA;AACA,MAAMC,SAAS,GAAGC,yBAAyB,GAA3C,QAAA;AAEA,MAAMC,UAAU,GAAG3C,WAAW,CAAXA,WAAAA,CAAnB,KAAA;AACA,MAAM4C,WAAW,GAAG5C,WAAW,CAAXA,WAAAA,CAApB,MAAA;AACA,MAAM6C,cAAc,GAAGF,UAAU,GAAjC,CAAA;AACA,MAAMG,eAAe,GAAGF,WAAW,GAAnC,CAAA;AAEA,MAAMG,mBAAmB,GACvB,CAACC,WAAW,CAAXA,KAAAA,GAAAA,CAAAA,GAAwB,CAAzB,CAAA,KACGH,cAAc,GAAIN,UAAU,GAAX,UAACA,GADrB,CAAA,IAEA,CAAC,IAAD,UAAA,KAAoBS,WAAW,CAAXA,KAAAA,GAAoB,CAApBA,CAAAA,GAApB,CAAA,IAHF,WAAA;AAKA,MAAMC,cAAc,GAAGC,KAAK,GACxB,CAACC,KAAK,GAAA,mBAAA,GAAN,gBAAA,IADwB,uBAAA,GAExBnE,UAAU,GAFd,iBAAA;AAIA,MAAMoE,WAAW,GAAGC,oBAAoB,CAAA,WAAA,EAAA,MAAA,EAAxC,cAAwC,CAAxC;AAEA,MAAMC,WAAW,GAAGC,yBAAyB,CAAA,WAAA,EAAA,WAAA,EAG3C9D,SAAS,IAATA,MAAAA,GAAAA,CAAAA,GAA0B,CAAA,MAAA,GAAUwD,cAAc,GAAxB,CAAA,GAH5B,CAA6C,CAA7C;;AAMA,MAAIO,MAAM,IAAI,OAAA,MAAA,KAAd,QAAA,EAA0C;AAExCC,IAAAA,OAAO,CAAPA,IAAAA,CAAAA,kDAAAA;AACD;;AAED,MAAMC,eAAe,GAAG;AACtBF,IAAAA,MAAM,EAAEA,MAAM,GAAG,CAAH,MAAA,GADQ,IAAA;AAEtBV,IAAAA,eAFsB,EAEtBA,eAFsB;AAGtBa,IAAAA,MAAM,EAHgB,iBAAA;AAItBlE,IAAAA,SAAS,EAAEA,SAAS,GAAA,SAAA,GAJE,IAAA;AAKtByD,IAAAA,KAAK,EAAEA,KAAK,GAAA,KAAA,GALU,IAAA;AAMtBI,IAAAA,WANsB,EAMtBA,WANsB;AAOtBrD,IAAAA,QAPsB,EAOtBA,QAPsB;AAQtBkD,IAAAA,KARsB,EAQtBA,KARsB;AAStBS,IAAAA,KAAK,EATiB,SAAA;AAUtBjE,IAAAA,SAVsB,EAUtBA,SAVsB;AAWtBkE,IAAAA,MAAM,EAAE1D,UAAU,CAAVA,OAAAA,CACN+C,KAAK,GAAGW,MAAM,CAAT,cAAA,GAA2BA,MAAM,CADhC1D,SAAAA;AAXc,GAAxB;AAgBA,MAAM2D,GAAG,GAAGC,gBAAgB,CAA5B,eAA4B,CAA5B;AAEA,MAAMC,WAAW,GAAGC,iBAAiB,iCAAC,eAAD;AAEnCH,IAAAA,GAAAA,EAAAA;AAFmC,KAArC;AAKA,MAAMI,mBAAmB,GACvB,CAAA,eAAA,IAAoBZ,WAAW,GADjC,wBACE,CADF;AAGA,MAAMa,kBAAkB,GAAGpE,gBAAgB,GACvCqE,sBAAsB,CAACpE,WAAW,CAAZ,OAAA,EADiB,gBACjB,CADiB,GAEvCA,WAAW,CAAXA,WAAAA,CAAAA,QAAAA,GAAAA,CAAAA,GAFJ,CAAA;AAMA,MAAMqE,SAAS,GACbb,MAAM,KACLN,KAAK,GAAIC,KAAK,GAAA,mBAAA,GAAT,gBAAA,GAFR,UACQ,CADR;AAIA,MAAMmB,UAAU,GACdlB,WAAW,IACV,CAAA,MAAA,GAAWF,KAAK,GAAA,uBAAA,GAAhB,iBAAA,GAFH,CACa,CADb;AAIA,MAAMqB,eAAe,GAAG,CAACD,UAAU,GAAX,cAAA,IAAxB,CAAA;AAEA,MAAME,oBAAoB,GAAG,UAAU,CAAV,MAAA,GACzBC,6BAA6B;AAC3BjB,IAAAA,MAAM,EADsB;AAAD,KAAC,WAAD;AAG3BkB,IAAAA,WAAW,EAAEzD,UAAU,CAACuC;AAHG,KADJ,GAA7B,IAAA;AAQA,MAAMmB,qBAAqB,GAAG,WAAW,CAAX,MAAA,GAC1BF,6BAA6B;AAC3BjB,IAAAA,MAAM,EADsB;AAAD,KAAC,WAAD;AAG3BkB,IAAAA,WAAW,EAAE5D,WAAW,CAAC0C;AAHE,KADH,GAA9B,IAAA;AAQA,MAAMoB,UAAU,GAAG;AACjBzB,IAAAA,KADiB,EACjBA,KADiB;AAEjB0B,IAAAA,oBAFiB,EAEjBA,oBAFiB;AAGjBV,IAAAA,kBAHiB,EAGjBA,kBAHiB;AAIjB7E,IAAAA,KAJiB,EAIjBA,KAJiB;AAKjBwF,IAAAA,gBAAgB,EAAEjB,MAAM,CALP,WAAA;AAMjBK,IAAAA,mBANiB,EAMjBA,mBANiB;AAOjBnB,IAAAA,mBAPiB,EAOjBA,mBAPiB;AAQjBjD,IAAAA,IARiB,EAQjBA,IARiB;AASjBG,IAAAA,QATiB,EASjBA,QATiB;AAUjB8E,IAAAA,UAViB,EAUjBA,UAViB;AAWjBxC,IAAAA,UAXiB,EAWjBA,UAXiB;AAYjByC,IAAAA,aAAa,EAZI,qBAAA;AAajB1B,IAAAA,WAbiB,EAajBA,WAbiB;AAcjB2B,IAAAA,aAAa,EAAE;AAAEpE,MAAAA,WAAF,EAAEA,WAAF;AAAeF,MAAAA,YAAAA,EAAAA;AAAf,KAdE;AAejBZ,IAAAA,gBAfiB,EAejBA,gBAfiB;AAgBjB0B,IAAAA,WAhBiB,EAgBjBA,WAhBiB;AAiBjBG,IAAAA,gBAjBiB,EAiBjBA,gBAjBiB;AAkBjBG,IAAAA,UAlBiB,EAkBjBA,UAlBiB;AAmBjBO,IAAAA,SAAS,EAAEH,KAAK,CAnBC,SAAA;AAoBjB+C,IAAAA,qBAAqB,EAAExF,IAAI,CAACwF;AApBX,GAAnB;AAsBA,MAAMC,gBAAgB,+DACnBC,aAAa,CAAd,IADoB,EAAG,oBAAH,sCAEnBA,aAAa,CAAd,KAFoB,EAEGT,qBAFH,qBAAtB;AAIA,MAAMU,aAAa,yDAChBD,aAAa,CAAd,IADiB,EAAG,uBAAH,mCAEhBA,aAAa,CAAd,KAFiB,EAEME,wBAFN,kBAAnB;AAKA,MAAIC,cAAuC,GAAG;AAC5CjF,IAAAA,iBAD4C,EAC5CA,iBAD4C;AAE5CC,IAAAA,eAF4C,EAE5CA,eAF4C;AAG5CiF,IAAAA,UAH4C,EAG5CA,UAH4C;AAI5ClC,IAAAA,WAAW,oDACRmC,aAAa,CAAd,KADS,EAAE,gBAAF,iCAERA,aAAa,CAAd,IAFS,EAEalB,eAFb,gBAJiC;AAQ5Cc,IAAAA,aAR4C,EAQ5CA,aAR4C;AAS5CK,IAAAA,kBAAkB,EAAE1F,WAAW,CATa,OAAA;AAU5CkF,IAAAA,qBAAqB,EAAExF,IAAI,CAACwF;AAVgB,GAA9C;;AAYA,MAAI3E,eAAe,CAAnB,MAAA,EAA4B;AAC1BgF,IAAAA,cAAc,mCAAG,cAAH;AAEZ9E,MAAAA,IAFe,EAEfA,IAFY;AAGZC,MAAAA,KAHe,EAGfA,KAHY;AAIZiF,MAAAA,SAAS,kCAAE,IAAF;AAAa1F,QAAAA,QAAX,EAAWA,QAAb;AAAuB8E,QAAAA,UAAAA,EAAAA;AAAvB,QAJG;AAKZa,MAAAA,OAAO,EAAE5F,WAAW,CAAC6F;AALT,MAAdN;AAOD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,IAAA,KAAK,EAAE,CAAA,cAAA,EAAA,SAAA;AAAb,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AACE,IAAA,WAAW,EADb,WAAA;AAEE,IAAA,oBAAoB,EAFtB,oBAAA;AAGE,IAAA,KAAK,EAHP,KAAA;AAIE,IAAA,MAAM,EAJR,MAAA;AAKE,IAAA,WAAW,EAAE9D;AALf,GAAA,CADF,EAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACLoC,MAAM,CADD,cAAA,EAEL;AACEQ,MAAAA,SAAAA,EAAAA;AADF,KAFK;AADT,GAAA,EAQG,CAAA,SAAA,IAAA,SAAA,IAAA,KAAA,IAGC,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AACE,IAAA,MAAM,EADR,iBAAA;AAEE,IAAA,aAAa,EAFf,MAAA;AAGE,IAAA,KAAK,EAAE,CACLlE,UAAU,CADL,YAAA,EAEL+C,KAAK,GAAGW,MAAM,CAAT,mBAAA,GAAgCA,MAAM,CAFtC,cAAA,EAGL;AACE3B,MAAAA,eAAe,EACbhC,SAAS,CAATA,eAAAA,IAA6B+B,cAAc,CAF/C,eAAA;AAGExB,MAAAA,IAAI,EAHN,WAAA;AAIEC,MAAAA,KAAK,EAAEC;AAJT,KAHK;AAHT,GAAA,CAXJ,EA0BE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;AAAY,IAAA,WAAW,EAAvB,WAAA;AAAsC,IAAA,UAAU,EAAEiE;AAAlD,GAAA,CA1BF,EA2BGrF,MA3BH,KAAA,IA2BGA,IAAAA,MA3BH,KAAA,KAAA,CA2BGA,GA3BH,KAAA,CA2BGA,GAAAA,MAAM;AACLuG,IAAAA,MAAM,EADE;AAAH,KAAG,IAAH;AAGLC,IAAAA,GAAG,EAHK,QAAH;AAILC,IAAAA,YAJQ,EAIRA,YAJK;AAKLC,IAAAA,WAAW,EAAE9C,KAAK,GAAGnD,WAAW,CAAd,WAAA,GAA6BN,IAAI,CAL3C,WAAH;AAMLwG,IAAAA,oBAAoB,EAAEA,oBAAF,KAAA,IAAEA,IAAAA,oBAAF,KAAA,KAAA,CAAEA,GAAF,oBAAEA,GANd,gBAAH;AAOL7G,IAAAA,QAAQ,EAAE,CAAA,QAAA,IAPF,QAAH;AAQL8G,IAAAA,cAAc,EACZ,OAAA,cAAA,KAAA,WAAA,GAAA,WAAA,GATM,cAAH;AAYLC,IAAAA,OAZQ,EAYRA,OAZK;AAaLC,IAAAA,MAbQ,EAaRA,MAbK;AAcLC,IAAAA,qBAAqB,EAdb,aAAH;AAeL7G,IAAAA,SAfQ,EAeRA,SAfK;AAgBL8G,IAAAA,KAAK,EAAE,CACL1C,MAAM,CADD,KAAA,EAEL;AAAEhD,MAAAA,WAAF,EAAEA,WAAF;AAAeF,MAAAA,YAAAA,EAAAA;AAAf,KAFK,EAGL,CAAA,SAAA,IAAelB,SAAS,IAAxB,MAAA,GAAsC;AAAE+D,MAAAA,MAAM,EAAEc;AAAV,KAAtC,GAHK,EAAA,EAAA,WAAA,kCAKL,IALK;AAOHrE,MAAAA,QAFF,EAEEA,QAPG;AAQH8E,MAAAA,UAHF,EAGEA,UARG;AASHrD,MAAAA,KAAK,EAJP,cALK;AAUH8E,MAAAA,iBAAiB,EAAE/G,SAAS,GAAA,KAAA,GAL9B,QALK;AAWHgH,MAAAA,SAAS,EAAEA,SAAS,GAAA,SAAA,GAEhBzD,WAAW,CAAXA,KAAAA,GAAAA,OAAAA,GAEA;AAfD,QAiBLpD,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAyB;AAAE8G,MAAAA,OAAO,EAAE;AAAX,KAjBpB,EAAA,sCAAA;AAhBF,KA3BT,CARF,EAyEE,KAAA,CAAA,aAAA,CAAA,kBAAA,EA1EJ,cA0EI,CAzEF,CADF;AAzPF,CAAA;;AAwUA,eAAA,aAAA;;AAcA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAMI;AANH,MAAA,WAAA,GAMG,KANH,CAAA,WAAA;AAAA,MAAA,KAAA,GAMG,KANH,CAAA,KAAA;AAAA,MAAA,MAAA,GAMG,KANH,CAAA,MAAA;AAAA,MAAA,WAAA,GAMG,KANH,CAAA,WAAA;AAAA,MAKjB9E,oBALiB,GAMG,KANH,CAKjBA,oBALiB;AAOjB,MAAIK,eAAe,GAAGlC,WAAW,CAAXA,OAAAA,GAAAA,WAAAA,GAAtB,oBAAA;AAGA,MAAA,KAAA,EAAWkC,eAAe,GAAGP,MAAM,CAAxBO,KAAAA;AACX,SACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;AACE,IAAA,KAAK,EAAE,CACL2B,MAAM,CADD,SAAA,EAEL;AACE3B,MAAAA,eADF,EACEA,eADF;AAGE0E,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,MAAM,EAAE7G,WAAW,CAAXA,OAAAA,GAAAA,CAAAA,GAA0B;AAApC,OAAD;AAHb,KAFK;AADT,GAAA,CADF;AAXF,CAAA;;AAyBA,IAAM6D,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BoC,EAAAA,WAAW,EAAE;AACXa,IAAAA,QAAQ,EADG,UAAA;AAEXrG,IAAAA,IAAI,EAAE;AAFK,GADkB;AAK/BsG,EAAAA,SAAS,EAAE;AACTD,IAAAA,QAAQ,EADC,UAAA;AAETrG,IAAAA,IAAI,EAFK,CAAA;AAGTC,IAAAA,KAAK,EAHI,CAAA;AAITsG,IAAAA,MAAM,EAJG,CAAA;AAKTxD,IAAAA,MAAM,EALG,CAAA;AAMTyD,IAAAA,MAAM,EAAE;AANC,GALoB;AAa/BC,EAAAA,cAAc,EAAE;AACdC,IAAAA,UAAU,EADI,CAAA;AAEdC,IAAAA,aAAa,EAAE;AAFD,GAbe;AAiB/BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,QAAQ,EADH,CAAA;AAELC,IAAAA,MAAM,EAAE;AAFH,GAjBwB;AAqB/BC,EAAAA,SAAS,EAAE;AACTL,IAAAA,UAAU,EADD,EAAA;AAETC,IAAAA,aAAa,EAAE;AAFN,GArBoB;AAyB/BK,EAAAA,cAAc,EAAE;AACdN,IAAAA,UAAU,EADI,EAAA;AAEdC,IAAAA,aAAa,EAAE;AAFD,GAzBe;AA6B/BM,EAAAA,cAAc,EAAE;AACdlE,IAAAA,MAAM,EADQ,EAAA;AAEdyD,IAAAA,MAAM,EAAE;AAFM,GA7Be;AAiC/BU,EAAAA,mBAAmB,EAAE;AACnBnE,IAAAA,MAAM,EADa,EAAA;AAEnByD,IAAAA,MAAM,EAAE;AAFW;AAjCU,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\nimport InputLabel from './Label/InputLabel';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  FLAT_INPUT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingFlat,\n  Padding,\n  interpolatePlaceholder,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n} from './helpers';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\n\nconst MINIMIZED_LABEL_Y_OFFSET = -18;\n\nconst LABEL_PADDING_TOP = 30;\nconst LABEL_PADDING_TOP_DENSE = 24;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT_WL = 52;\nconst MIN_DENSE_HEIGHT = 40;\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  activeUnderlineColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, fonts } = theme;\n  const font = fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const {\n    fontSize: fontSizeStyle,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n    });\n\n  let inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor;\n\n  if (disabled) {\n    inputTextColor = activeColor = color(colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n    placeholderColor = colors.disabled;\n    underlineColorCustom = 'transparent';\n  } else {\n    inputTextColor = colors.text;\n    activeColor = error ? colors.error : activeUnderlineColor || colors.primary;\n    placeholderColor = colors.placeholder;\n    errorColor = colors.error;\n    underlineColorCustom = underlineColor || colors.disabled;\n  }\n\n  const containerStyle = {\n    backgroundColor: theme.dark\n      ? color(colors.background).lighten(0.24).rgb().string()\n      : color(colors.background).darken(0.06).rgb().string(),\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) * (I18nManager.isRTL ? -1 : 1) * paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: { paddingLeft, paddingRight },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness: theme.roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID: 'text-input-flat',\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors: {\n    error: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n}: UnderlineProps) => {\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n  if (error) backgroundColor = colors.error;\n  return (\n    <Animated.View\n      style={[\n        styles.underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [{ scaleY: parentState.focused ? 1 : 0.5 }],\n        },\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}