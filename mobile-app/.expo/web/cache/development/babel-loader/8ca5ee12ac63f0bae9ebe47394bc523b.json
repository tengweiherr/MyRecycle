{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport ExpoLocation from \"./ExpoLocation\";\nimport { LocationEventEmitter } from \"./LocationEventEmitter\";\nvar nextWatchId = 0;\n\nvar Subscriber = function () {\n  function Subscriber(eventName, eventDataField) {\n    _classCallCheck(this, Subscriber);\n\n    this.callbacks = {};\n    this.eventSubscription = null;\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  _createClass(Subscriber, [{\n    key: \"maybeInitializeSubscription\",\n    value: function maybeInitializeSubscription() {\n      var _this = this;\n\n      if (this.eventSubscription) {\n        return;\n      }\n\n      this.eventSubscription = LocationEventEmitter.addListener(this.eventName, function (event) {\n        return _this.trigger(event);\n      });\n    }\n  }, {\n    key: \"registerCallback\",\n    value: function registerCallback(callback) {\n      this.maybeInitializeSubscription();\n      var id = ++nextWatchId;\n      this.callbacks[id] = callback;\n      return id;\n    }\n  }, {\n    key: \"unregisterCallback\",\n    value: function unregisterCallback(id) {\n      if (!this.callbacks[id]) {\n        return;\n      }\n\n      delete this.callbacks[id];\n      ExpoLocation.removeWatchAsync(id);\n\n      if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n        LocationEventEmitter.removeSubscription(this.eventSubscription);\n        this.eventSubscription = null;\n      }\n    }\n  }, {\n    key: \"trigger\",\n    value: function trigger(event) {\n      var watchId = event.watchId;\n      var callback = this.callbacks[watchId];\n\n      if (callback) {\n        callback(event[this.eventDataField]);\n      } else {\n        ExpoLocation.removeWatchAsync(watchId);\n      }\n    }\n  }]);\n\n  return Subscriber;\n}();\n\nexport var LocationSubscriber = new Subscriber('Expo.locationChanged', 'location');\nexport var HeadingSubscriber = new Subscriber('Expo.headingChanged', 'heading');\nexport function _getCurrentWatchId() {\n  return nextWatchId;\n}","map":{"version":3,"sources":["../src/LocationSubscribers.ts"],"names":[],"mappings":";;AAEA,OAAO,YAAP;AAEA,SAAS,oBAAT;AAOA,IAAI,WAAW,GAAG,CAAlB;;IAEM,U;AAMJ,sBAAY,SAAZ,EAA+B,cAA/B,EAAqD;AAAA;;AAAA,SAH7C,SAG6C,GAHD,EAGC;AAAA,SAF7C,iBAE6C,GAFJ,IAEI;AACnD,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,cAAL,GAAsB,cAAtB;AACD;;;;WAED,uCAA2B;AAAA;;AACzB,UAAI,KAAK,iBAAT,EAA4B;AAC1B;AACD;;AACD,WAAK,iBAAL,GAAyB,oBAAoB,CAAC,WAArB,CACvB,KAAK,SADkB,EAEvB,UAAC,KAAD;AAAA,eAAwB,KAAI,CAAC,OAAL,CAAa,KAAb,CAAxB;AAAA,OAFuB,CAAzB;AAID;;;WAKD,0BAAiB,QAAjB,EAAuC;AACrC,WAAK,2BAAL;AACA,UAAM,EAAE,GAAG,EAAE,WAAb;AACA,WAAK,SAAL,CAAe,EAAf,IAAqB,QAArB;AACA,aAAO,EAAP;AACD;;;WAKD,4BAAmB,EAAnB,EAA6B;AAE3B,UAAI,CAAC,KAAK,SAAL,CAAe,EAAf,CAAL,EAAyB;AACvB;AACD;;AAED,aAAO,KAAK,SAAL,CAAe,EAAf,CAAP;AACA,MAAA,YAAY,CAAC,gBAAb,CAA8B,EAA9B;;AAEA,UAAI,MAAM,CAAC,IAAP,CAAY,KAAK,SAAjB,EAA4B,MAA5B,KAAuC,CAAvC,IAA4C,KAAK,iBAArD,EAAwE;AACtE,QAAA,oBAAoB,CAAC,kBAArB,CAAwC,KAAK,iBAA7C;AACA,aAAK,iBAAL,GAAyB,IAAzB;AACD;AACF;;;WAED,iBAAQ,KAAR,EAA0B;AACxB,UAAM,OAAO,GAAG,KAAK,CAAC,OAAtB;AACA,UAAM,QAAQ,GAAG,KAAK,SAAL,CAAe,OAAf,CAAjB;;AAEA,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,KAAK,CAAC,KAAK,cAAN,CAAN,CAAR;AACD,OAFD,MAEO;AACL,QAAA,YAAY,CAAC,gBAAb,CAA8B,OAA9B;AACD;AACF;;;;;;AAGH,OAAO,IAAM,kBAAkB,GAAG,IAAI,UAAJ,CAChC,sBADgC,EAEhC,UAFgC,CAA3B;AAIP,OAAO,IAAM,iBAAiB,GAAG,IAAI,UAAJ,CAC/B,qBAD+B,EAE/B,SAF+B,CAA1B;AAQP,OAAM,SAAU,kBAAV,GAA4B;AAChC,SAAO,WAAP;AACD","sourcesContent":["import { Subscription } from 'expo-modules-core';\n\nimport ExpoLocation from './ExpoLocation';\nimport { LocationCallback, LocationHeadingCallback } from './Location.types';\nimport { LocationEventEmitter } from './LocationEventEmitter';\n\ntype EventObject = {\n  watchId: number;\n  [key: string]: any;\n};\n\nlet nextWatchId = 0;\n\nclass Subscriber<CallbackType extends LocationCallback | LocationHeadingCallback> {\n  private eventName: string;\n  private eventDataField: string;\n  private callbacks: { [id: string]: CallbackType } = {};\n  private eventSubscription: Subscription | null = null;\n\n  constructor(eventName: string, eventDataField: string) {\n    this.eventName = eventName;\n    this.eventDataField = eventDataField;\n  }\n\n  maybeInitializeSubscription() {\n    if (this.eventSubscription) {\n      return;\n    }\n    this.eventSubscription = LocationEventEmitter.addListener(\n      this.eventName,\n      (event: EventObject) => this.trigger(event)\n    );\n  }\n\n  /**\n   * Registers given callback under new id which is then returned.\n   */\n  registerCallback(callback: CallbackType): number {\n    this.maybeInitializeSubscription();\n    const id = ++nextWatchId;\n    this.callbacks[id] = callback;\n    return id;\n  }\n\n  /**\n   * Unregisters a callback with given id and revokes the subscription if possible.\n   */\n  unregisterCallback(id: number): void {\n    // Do nothing if we have already unregistered the callback.\n    if (!this.callbacks[id]) {\n      return;\n    }\n\n    delete this.callbacks[id];\n    ExpoLocation.removeWatchAsync(id);\n\n    if (Object.keys(this.callbacks).length === 0 && this.eventSubscription) {\n      LocationEventEmitter.removeSubscription(this.eventSubscription);\n      this.eventSubscription = null;\n    }\n  }\n\n  trigger(event: EventObject): void {\n    const watchId = event.watchId;\n    const callback = this.callbacks[watchId];\n\n    if (callback) {\n      callback(event[this.eventDataField]);\n    } else {\n      ExpoLocation.removeWatchAsync(watchId);\n    }\n  }\n}\n\nexport const LocationSubscriber = new Subscriber<LocationCallback>(\n  'Expo.locationChanged',\n  'location'\n);\nexport const HeadingSubscriber = new Subscriber<LocationHeadingCallback>(\n  'Expo.headingChanged',\n  'heading'\n);\n\n/**\n * @private Necessary for some unit tests.\n */\nexport function _getCurrentWatchId(): number {\n  return nextWatchId;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}