{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"enabled\"],\n    _excluded2 = [\"visible\", \"children\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nvar Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {}\n\nexport var MaybeScreenContainer = function MaybeScreenContainer(_ref) {\n  var _Screens, _Screens$screensEnabl;\n\n  var enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  if ((_Screens = Screens) !== null && _Screens !== void 0 && (_Screens$screensEnabl = _Screens.screensEnabled) !== null && _Screens$screensEnabl !== void 0 && _Screens$screensEnabl.call(_Screens)) {\n    return React.createElement(Screens.ScreenContainer, _extends({\n      enabled: enabled\n    }, rest));\n  }\n\n  return React.createElement(View, rest);\n};\nexport function MaybeScreen(_ref2) {\n  var _Screens2, _Screens2$screensEnab;\n\n  var visible = _ref2.visible,\n      children = _ref2.children,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  if ((_Screens2 = Screens) !== null && _Screens2 !== void 0 && (_Screens2$screensEnab = _Screens2.screensEnabled) !== null && _Screens2$screensEnab !== void 0 && _Screens2$screensEnab.call(_Screens2)) {\n    return React.createElement(Screens.Screen, _extends({\n      activityState: visible ? 2 : 0\n    }, rest), children);\n  }\n\n  return React.createElement(ResourceSavingView, _extends({\n    visible: visible\n  }, rest), children);\n}","map":{"version":3,"sources":["ScreenFallback.tsx"],"names":["Screens","require","MaybeScreenContainer","rest","enabled","visible"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,kBAAA,QAAA,4BAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAUA,IAAA,OAAA;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU,CAEX;;AAED,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAA,IAAA,EAO9B;AAAA,MAAA,QAAA,EAAA,qBAAA;;AAP+B,MAAA,OAAA,GAO/B,IAP+B,CAAA,OAAA;AAAA,MAEhCC,IAFgC,4BAO/B,IAP+B;;AAQnC,MAAA,CAAA,QAAA,GAAA,OAAA,MAAA,IAAA,IAAA,QAAA,KAAA,KAAA,CAAA,IAAA,CAAA,qBAAA,GAAIH,QAAAA,CAAJ,cAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIA,qBAAAA,CAAAA,IAAAA,CAAJ,QAAIA,CAAJ,EAAiC;AAC/B,WAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,EAAA,QAAA,CAAA;AAAyB,MAAA,OAAO,EAAEI;AAAlC,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,SAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAZK,CAAA;AAeP,OAAO,SAAA,WAAA,CAAA,KAAA,EAA4D;AAAA,MAAA,SAAA,EAAA,qBAAA;;AAAvC,MAAA,OAAA,GAAuC,KAAvC,CAAA,OAAA;AAAA,MAAA,QAAA,GAAuC,KAAvC,CAAA,QAAA;AAAA,MAAwBD,IAAxB,4BAAuC,KAAvC;;AAC1B,MAAA,CAAA,SAAA,GAAA,OAAA,MAAA,IAAA,IAAA,SAAA,KAAA,KAAA,CAAA,IAAA,CAAA,qBAAA,GAAIH,SAAAA,CAAJ,cAAA,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,IAAIA,qBAAAA,CAAAA,IAAAA,CAAJ,SAAIA,CAAJ,EAAiC;AAC/B,WACE,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AAAgB,MAAA,aAAa,EAAEK,OAAO,GAAA,CAAA,GAAO;AAA7C,KAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAKD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,kBAAA,EAAA,QAAA,CAAA;AAAoB,IAAA,OAAO,EAAEA;AAA7B,GAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAKD","sourcesContent":["import { ResourceSavingView } from '@react-navigation/elements';\nimport * as React from 'react';\nimport { StyleProp, View, ViewProps, ViewStyle } from 'react-native';\n\ntype Props = {\n  visible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  hasTwoStates: boolean;\n  children: React.ReactNode;\n}) => {\n  if (Screens?.screensEnabled?.()) {\n    return <Screens.ScreenContainer enabled={enabled} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport function MaybeScreen({ visible, children, ...rest }: Props) {\n  if (Screens?.screensEnabled?.()) {\n    return (\n      <Screens.Screen activityState={visible ? 2 : 0} {...rest}>\n        {children}\n      </Screens.Screen>\n    );\n  }\n\n  return (\n    <ResourceSavingView visible={visible} {...rest}>\n      {children}\n    </ResourceSavingView>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}