{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useReducer, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport MainTabNavigator from \"./screens/navigations/MainTabNavigator\";\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { AuthScreen } from \"./screens\";\nimport { AuthContext, PointContext, LoadingContext } from \"./context/context\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DrawerContent from \"./screens/navigations/DrawerContent\";\nimport Notification from \"./screens/NotificationScreen\";\nimport Profile from \"./screens/ProfileScreen\";\nimport Settings from \"./screens/SettingsScreen\";\nimport LogBox from \"react-native-web/dist/exports/LogBox\";\nimport LoadingScreen from \"./components/LoadingScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Drawer = createDrawerNavigator();\nexport default function App() {\n  LogBox.ignoreLogs([\"NativeBase:\"]);\n  LogBox.ignoreLogs([\"Found screens\"]);\n  LogBox.ignoreLogs([\"Encountered two children with the same key\"]);\n  var initialLoginState = {\n    isLoading: true,\n    userToken: null\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      points = _useState2[0],\n      setPoints = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var loginReducer = function loginReducer(prevState, action) {\n    switch (action.type) {\n      case \"RETRIEVE_TOKEN\":\n        setIsLoading(false);\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.userData ? action.userData.token : null,\n          isLoading: false\n        });\n\n      case \"LOGIN\":\n        setIsLoading(false);\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: action.userData ? action.userData.token : null,\n          isLoading: false\n        });\n\n      case \"LOGOUT\":\n        setIsLoading(false);\n        return _objectSpread(_objectSpread({}, prevState), {}, {\n          userToken: null,\n          isLoading: false\n        });\n\n      default:\n        break;\n    }\n  };\n\n  var _useReducer = useReducer(loginReducer, initialLoginState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      loginState = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      signIn: function signIn(userData) {\n        return _regeneratorRuntime.async(function signIn$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(AsyncStorage.setItem('user', JSON.stringify(userData)));\n\n              case 3:\n                _context.next = 8;\n                break;\n\n              case 5:\n                _context.prev = 5;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 8:\n                setPoints(userData.mr_points);\n                dispatch({\n                  type: \"LOGIN\",\n                  userData: userData\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      },\n      signOut: function signOut() {\n        return _regeneratorRuntime.async(function signOut$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(AsyncStorage.removeItem('user'));\n\n              case 3:\n                _context2.next = 8;\n                break;\n\n              case 5:\n                _context2.prev = 5;\n                _context2.t0 = _context2[\"catch\"](0);\n                console.log(_context2.t0);\n\n              case 8:\n                dispatch({\n                  type: \"LOGOUT\"\n                });\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[0, 5]], Promise);\n      }\n    };\n  }, []);\n  useEffect(function () {\n    setTimeout(function _callee() {\n      var userData;\n      return _regeneratorRuntime.async(function _callee$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              userData = null;\n              _context3.prev = 1;\n              _context3.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('user'));\n\n            case 4:\n              userData = _context3.sent;\n              _context3.next = 10;\n              break;\n\n            case 7:\n              _context3.prev = 7;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.log(_context3.t0);\n\n            case 10:\n              userData = JSON.parse(userData);\n              userData ? setPoints(userData.mr_points) : setPoints(0);\n              dispatch({\n                type: \"RETRIEVE_TOKEN\",\n                userData: userData\n              });\n\n            case 13:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[1, 7]], Promise);\n    }, 1000);\n  }, []);\n  return _jsx(AuthContext.Provider, {\n    value: authContext,\n    children: _jsx(PointContext.Provider, {\n      value: {\n        points: points,\n        setPoints: setPoints\n      },\n      children: _jsx(LoadingContext.Provider, {\n        value: {\n          isLoading: isLoading,\n          setIsLoading: setIsLoading\n        },\n        children: _jsxs(NavigationContainer, {\n          children: [loginState.userToken !== null ? _jsxs(Drawer.Navigator, {\n            initialRouteName: \"HomeDrawer\",\n            drawerContent: function drawerContent(props) {\n              return _jsx(DrawerContent, _objectSpread({}, props));\n            },\n            children: [_jsx(Drawer.Screen, {\n              name: \"Home\",\n              component: MainTabNavigator,\n              options: {\n                headerShown: false\n              }\n            }), _jsx(Drawer.Screen, {\n              name: \"Notification\",\n              component: Notification\n            }), _jsx(Drawer.Screen, {\n              name: \"Profile\",\n              component: Profile\n            }), _jsx(Drawer.Screen, {\n              name: \"Settings\",\n              component: Settings\n            })]\n          }) : _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(AuthScreen, {}), _jsx(StatusBar, {\n              style: \"auto\"\n            })]\n          }), isLoading && _jsx(View, {\n            style: {\n              width: \"100%\",\n              height: \"100%\",\n              position: \"absolute\",\n              backgroundColor: \"rgba(0,0,0,0.6)\"\n            },\n            children: _jsx(LoadingScreen, {})\n          })]\n        })\n      })\n    })\n  });\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    justifyContent: \"center\",\n    width: \"100%\"\n  }\n});","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/App.js"],"names":["StatusBar","React","useEffect","useReducer","useState","NavigationContainer","MainTabNavigator","createDrawerNavigator","AuthScreen","AuthContext","PointContext","LoadingContext","AsyncStorage","DrawerContent","Notification","Profile","Settings","LoadingScreen","Drawer","App","LogBox","ignoreLogs","initialLoginState","isLoading","userToken","points","setPoints","setIsLoading","loginReducer","prevState","action","type","userData","token","loginState","dispatch","authContext","useMemo","signIn","setItem","JSON","stringify","console","log","mr_points","signOut","removeItem","setTimeout","getItem","parse","props","headerShown","styles","container","width","height","position","backgroundColor","StyleSheet","create","flex","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useReducer, useState } from 'react';\nimport { StyleSheet, Text, View, ActivityIndicator } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport MainTabNavigator from \"./screens/navigations/MainTabNavigator\";\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { AuthScreen } from './screens';\nimport { AuthContext, PointContext, LoadingContext } from './context/context';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport DrawerContent from './screens/navigations/DrawerContent';\nimport Notification from './screens/NotificationScreen';\nimport Profile from './screens/ProfileScreen';\nimport Settings from './screens/SettingsScreen';\nimport { LogBox } from 'react-native';\nimport LoadingScreen from './components/LoadingScreen';\n\nconst Drawer = createDrawerNavigator();\n\nexport default function App() {\n\n  //disable nativebase contrast warning\n  LogBox.ignoreLogs([\"NativeBase:\"])\n  LogBox.ignoreLogs([\"Found screens\"])\n  LogBox.ignoreLogs([\"Encountered two children with the same key\"])\n\n  const initialLoginState = {\n    isLoading: true,\n    userToken: null,\n  };\n\n  const [points, setPoints] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n\n  //reducer function\n  const loginReducer = (prevState, action) => {\n    switch (action.type) {\n      case \"RETRIEVE_TOKEN\":\n        setIsLoading(false);\n        return {\n          ...prevState,\n          userToken: action.userData ? action.userData.token : null,\n          isLoading: false,\n        };\n      case \"LOGIN\":\n        setIsLoading(false);\n        return {\n          ...prevState,\n          userToken: action.userData ? action.userData.token : null,\n          isLoading: false,\n        };\n      case \"LOGOUT\":\n        setIsLoading(false);\n        return {\n          ...prevState,\n          userToken: null,\n          isLoading: false,\n        };\n\n      default:\n        break;\n    }\n  }\n\n  const [loginState, dispatch] = useReducer(loginReducer, initialLoginState);\n\n  //setup context\n  const authContext = React.useMemo(() => ({\n    signIn: async (userData) => {\n      try {\n        await AsyncStorage.setItem('user', JSON.stringify(userData));\n      } catch (e) {\n        console.log(e);\n      }\n      setPoints(userData.mr_points);\n      dispatch({ type: \"LOGIN\", userData: userData });\n    },\n    signOut: async () => {\n      try {\n        await AsyncStorage.removeItem('user');\n      } catch (e) {\n        console.log(e);\n      }\n      dispatch({ type: \"LOGOUT\" });\n    },\n\n  }), []);\n\n  useEffect(() => {\n    setTimeout(async () => {\n      let userData = null;\n      try {\n        userData = await AsyncStorage.getItem('user');\n      } catch (e) {\n        console.log(e);\n      }\n      userData = JSON.parse(userData);\n      userData ? setPoints(userData.mr_points) : setPoints(0);\n      dispatch({ type: \"RETRIEVE_TOKEN\", userData: userData });\n    }, 1000);\n  }, [])\n\n  // if (loginState.isLoading) {\n  //   return(\n  //     <View style={styles.container}>\n  //       <ActivityIndicator size=\"large\"/>\n  //     </View>\n  //   );\n  // } \n\n  return (\n    <AuthContext.Provider value={authContext}>\n      <PointContext.Provider value={{ points, setPoints }}>\n        <LoadingContext.Provider value={{ isLoading, setIsLoading }}>\n          <NavigationContainer>\n            {loginState.userToken !== null ? (\n              <Drawer.Navigator initialRouteName=\"HomeDrawer\" drawerContent={props => <DrawerContent {...props} />}>\n                <Drawer.Screen name=\"Home\" component={MainTabNavigator} options={{ headerShown: false }} />\n                <Drawer.Screen name=\"Notification\" component={Notification} />\n                <Drawer.Screen name=\"Profile\" component={Profile} />\n                <Drawer.Screen name=\"Settings\" component={Settings} />\n              </Drawer.Navigator>\n            ) :\n              <View style={styles.container}>\n                <AuthScreen />\n                <StatusBar style=\"auto\" />\n              </View>\n            }\n\n            {isLoading &&\n              <View style={{ width: \"100%\", height: \"100%\", position: \"absolute\", backgroundColor: \"rgba(0,0,0,0.6)\" }}>\n                <LoadingScreen />\n              </View>\n            }\n\n          </NavigationContainer>\n        </LoadingContext.Provider>\n      </PointContext.Provider>\n    </AuthContext.Provider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    justifyContent: \"center\",\n    width: \"100%\"\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}