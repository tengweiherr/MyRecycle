{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper';\nimport Surface from \"./Surface\";\nimport { useTheme } from \"../core/theming\";\nimport useAnimatedValue from \"../utils/useAnimatedValue\";\nimport { addEventListener } from \"../utils/addEventListener\";\nvar DEFAULT_DURATION = 220;\nvar TOP_INSET = getStatusBarHeight(true);\nvar BOTTOM_INSET = getBottomSpace();\nexport default function Modal(_ref) {\n  var _ref$dismissable = _ref.dismissable,\n      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,\n      _ref$visible = _ref.visible,\n      visible = _ref$visible === void 0 ? false : _ref$visible,\n      _ref$overlayAccessibi = _ref.overlayAccessibilityLabel,\n      overlayAccessibilityLabel = _ref$overlayAccessibi === void 0 ? 'Close modal' : _ref$overlayAccessibi,\n      onDismiss = _ref.onDismiss,\n      children = _ref.children,\n      contentContainerStyle = _ref.contentContainerStyle,\n      style = _ref.style;\n  var visibleRef = React.useRef(visible);\n  React.useEffect(function () {\n    visibleRef.current = visible;\n  });\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors,\n      animation = _useTheme.animation;\n\n  var opacity = useAnimatedValue(visible ? 1 : 0);\n\n  var _React$useState = React.useState(visible),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rendered = _React$useState2[0],\n      setRendered = _React$useState2[1];\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  var handleBack = function handleBack() {\n    if (dismissable) {\n      hideModal();\n    }\n\n    return true;\n  };\n\n  var subscription = React.useRef(undefined);\n\n  var showModal = function showModal() {\n    var _subscription$current;\n\n    (_subscription$current = subscription.current) === null || _subscription$current === void 0 ? void 0 : _subscription$current.remove();\n    subscription.current = addEventListener(BackHandler, 'hardwareBackPress', handleBack);\n    var scale = animation.scale;\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start();\n  };\n\n  var removeListeners = function removeListeners() {\n    var _subscription$current2;\n\n    if ((_subscription$current2 = subscription.current) !== null && _subscription$current2 !== void 0 && _subscription$current2.remove) {\n      var _subscription$current3;\n\n      (_subscription$current3 = subscription.current) === null || _subscription$current3 === void 0 ? void 0 : _subscription$current3.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n  };\n\n  var hideModal = function hideModal() {\n    removeListeners();\n    var scale = animation.scale;\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true\n    }).start(function (_ref2) {\n      var finished = _ref2.finished;\n\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  var prevVisible = React.useRef(null);\n  React.useEffect(function () {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n\n    prevVisible.current = visible;\n  });\n  React.useEffect(function () {\n    return removeListeners;\n  }, []);\n  if (!rendered) return null;\n  return React.createElement(Animated.View, {\n    pointerEvents: visible ? 'auto' : 'none',\n    accessibilityViewIsModal: true,\n    accessibilityLiveRegion: \"polite\",\n    style: StyleSheet.absoluteFill,\n    onAccessibilityEscape: hideModal\n  }, React.createElement(TouchableWithoutFeedback, {\n    accessibilityLabel: overlayAccessibilityLabel,\n    accessibilityRole: \"button\",\n    disabled: !dismissable,\n    onPress: dismissable ? hideModal : undefined,\n    importantForAccessibility: \"no\"\n  }, React.createElement(Animated.View, {\n    style: [styles.backdrop, {\n      backgroundColor: colors.backdrop,\n      opacity: opacity\n    }]\n  })), React.createElement(View, {\n    style: [styles.wrapper, {\n      marginTop: TOP_INSET,\n      marginBottom: BOTTOM_INSET\n    }, style],\n    pointerEvents: \"box-none\"\n  }, React.createElement(Surface, {\n    style: [{\n      opacity: opacity\n    }, styles.content, contentContainerStyle]\n  }, children)));\n}\nvar styles = StyleSheet.create({\n  backdrop: {\n    flex: 1\n  },\n  wrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    justifyContent: 'center'\n  }),\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["Modal.tsx"],"names":["DEFAULT_DURATION","TOP_INSET","getStatusBarHeight","BOTTOM_INSET","getBottomSpace","dismissable","visible","overlayAccessibilityLabel","style","visibleRef","React","animation","useTheme","opacity","useAnimatedValue","setRendered","handleBack","hideModal","subscription","showModal","addEventListener","scale","Animated","toValue","duration","easing","Easing","useNativeDriver","removeListeners","BackHandler","finished","onDismiss","prevVisible","StyleSheet","styles","backgroundColor","colors","marginTop","marginBottom","backdrop","flex","wrapper","justifyContent","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n  NativeEventSubscription,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { useTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\nimport { addEventListener } from '../utils/addEventListener';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nexport default function Modal({\n  dismissable = true,\n  visible = false,\n  overlayAccessibilityLabel = 'Close modal',\n  onDismiss,\n  children,\n  contentContainerStyle,\n  style,\n}: Props) {\n  const visibleRef = React.useRef(visible);\n\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n\n  const { colors, animation } = useTheme();\n\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n    return true;\n  };\n\n  const subscription = React.useRef<NativeEventSubscription | undefined>(\n    undefined\n  );\n\n  const showModal = () => {\n    subscription.current?.remove();\n    subscription.current = addEventListener(\n      BackHandler,\n      'hardwareBackPress',\n      handleBack\n    );\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const removeListeners = () => {\n    if (subscription.current?.remove) {\n      subscription.current?.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n  };\n\n  const hideModal = () => {\n    removeListeners();\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef<boolean | null>(null);\n\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n    prevVisible.current = visible;\n  });\n\n  React.useEffect(() => {\n    return removeListeners;\n  }, []);\n\n  if (!rendered) return null;\n\n  return (\n    <Animated.View\n      pointerEvents={visible ? 'auto' : 'none'}\n      accessibilityViewIsModal\n      accessibilityLiveRegion=\"polite\"\n      style={StyleSheet.absoluteFill}\n      onAccessibilityEscape={hideModal}\n    >\n      <TouchableWithoutFeedback\n        accessibilityLabel={overlayAccessibilityLabel}\n        accessibilityRole=\"button\"\n        disabled={!dismissable}\n        onPress={dismissable ? hideModal : undefined}\n        importantForAccessibility=\"no\"\n      >\n        <Animated.View\n          style={[\n            styles.backdrop,\n            { backgroundColor: colors.backdrop, opacity },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[\n          styles.wrapper,\n          { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n          style,\n        ]}\n        pointerEvents=\"box-none\"\n      >\n        <Surface\n          style={\n            [\n              { opacity },\n              styles.content,\n              contentContainerStyle,\n            ] as StyleProp<ViewStyle>\n          }\n        >\n          {children}\n        </Surface>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}