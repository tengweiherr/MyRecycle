{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from \"./utils\";\nimport { useTheme } from \"./../useTheme\";\nexport function useSafeArea(props) {\n  var insets = useSafeAreaInsets();\n  var sizes = useTheme().sizes;\n\n  var _getSortedProps = getSortedProps(props),\n      safeAreaProps = _getSortedProps.safeAreaProps,\n      paddingProps = _getSortedProps.paddingProps,\n      sansPaddingProps = _getSortedProps.sansPaddingProps;\n\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n\n  var calcualtedPaddingProps = calculatePaddingProps(safeAreaProps, paddingProps, insets, sizes);\n  return _objectSpread(_objectSpread(_objectSpread({}, sansPaddingProps), paddingProps), calcualtedPaddingProps);\n}","map":{"version":3,"sources":["index.ts"],"names":["insets","useSafeAreaInsets","sizes","useTheme","sansPaddingProps","getSortedProps","Object","calcualtedPaddingProps","calculatePaddingProps"],"mappings":";;;;;;AAAA,SAAA,iBAAA,QAAA,gCAAA;AACA,SAAA,cAAA,EAAA,qBAAA;AACA,SAAA,QAAA;AAEA,OAAO,SAAA,WAAA,CAAA,KAAA,EAAiC;AACtC,MAAMA,MAAM,GAAGC,iBAAf,EAAA;AACA,MAAMC,KAAK,GAAGC,QAAQ,GAAtB,KAAA;;AACA,wBAA0DE,cAAc,CAAxE,KAAwE,CAAxE;AAAA,MAAM,aAAN,mBAAM,aAAN;AAAA,MAAM,YAAN,mBAAM,YAAN;AAAA,MAAqCD,gBAArC,mBAAqCA,gBAArC;;AAGA,MAAI,CAACE,MAAM,CAANA,IAAAA,CAAAA,aAAAA,EAAL,MAAA,EAAwC;AACtC,WAAA,KAAA;AACD;;AACD,MAAIC,sBAAsB,GAAGC,qBAAqB,CAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAAlD,KAAkD,CAAlD;AAMA,uDAAO,gBAAP,GAAO,YAAP,GAAkDD,sBAAlD;AACD","sourcesContent":["import { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getSortedProps, calculatePaddingProps } from './utils';\nimport { useTheme } from './../useTheme';\n\nexport function useSafeArea(props: any) {\n  const insets = useSafeAreaInsets();\n  const sizes = useTheme().sizes;\n  const { safeAreaProps, paddingProps, sansPaddingProps } = getSortedProps(\n    props\n  );\n  if (!Object.keys(safeAreaProps).length) {\n    return props;\n  }\n  let calcualtedPaddingProps = calculatePaddingProps(\n    safeAreaProps,\n    paddingProps,\n    insets,\n    sizes\n  );\n  return { ...sansPaddingProps, ...paddingProps, ...calcualtedPaddingProps };\n}\n"]},"metadata":{},"sourceType":"module"}