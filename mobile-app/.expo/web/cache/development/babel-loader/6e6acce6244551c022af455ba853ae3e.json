{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"isOpen\", \"onClose\", \"defaultIsOpen\", \"initialFocusRef\", \"finalFocusRef\", \"avoidKeyboard\", \"closeOnOverlayClick\", \"isKeyboardDismissable\", \"overlayVisible\", \"backdropVisible\", \"animationPreset\"],\n    _excluded2 = [\"contentSize\", \"_backdrop\", \"_backdropFade\", \"_fade\", \"_slide\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { forwardRef, memo } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Backdrop from \"../Backdrop\";\nimport { Slide } from \"../Transitions\";\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from \"../../../hooks\";\nimport { AlertDialogContext } from \"./Context\";\nimport Box from \"../../primitives/Box\";\nimport { Fade } from \"../Transitions\";\nimport { useKeyboardBottomInset } from \"../../../utils\";\nimport { Overlay } from \"../../primitives/Overlay\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar AlertDialog = function AlertDialog(_ref, ref) {\n  var children = _ref.children,\n      isOpen = _ref.isOpen,\n      onClose = _ref.onClose,\n      defaultIsOpen = _ref.defaultIsOpen,\n      initialFocusRef = _ref.initialFocusRef,\n      finalFocusRef = _ref.finalFocusRef,\n      avoidKeyboard = _ref.avoidKeyboard,\n      _ref$closeOnOverlayCl = _ref.closeOnOverlayClick,\n      closeOnOverlayClick = _ref$closeOnOverlayCl === void 0 ? false : _ref$closeOnOverlayCl,\n      _ref$isKeyboardDismis = _ref.isKeyboardDismissable,\n      isKeyboardDismissable = _ref$isKeyboardDismis === void 0 ? true : _ref$isKeyboardDismis,\n      _ref$overlayVisible = _ref.overlayVisible,\n      overlayVisible = _ref$overlayVisible === void 0 ? true : _ref$overlayVisible,\n      _ref$backdropVisible = _ref.backdropVisible,\n      backdropVisible = _ref$backdropVisible === void 0 ? true : _ref$backdropVisible,\n      animationPreset = _ref.animationPreset,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var bottomInset = useKeyboardBottomInset();\n\n  var _usePropsResolution = usePropsResolution('AlertDialog', rest),\n      contentSize = _usePropsResolution.contentSize,\n      _backdrop = _usePropsResolution._backdrop,\n      _backdropFade = _usePropsResolution._backdropFade,\n      _fade = _usePropsResolution._fade,\n      _slide = _usePropsResolution._slide,\n      restThemeProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _useControllableState = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: function onChange(val) {\n      if (!val) onClose && onClose();\n    }\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      visible = _useControllableState2[0],\n      setVisible = _useControllableState2[1];\n\n  var handleClose = function handleClose() {\n    return setVisible(false);\n  };\n\n  var child = React.createElement(Box, _extends({\n    bottom: avoidKeyboard ? bottomInset + 'px' : undefined\n  }, restThemeProps, {\n    ref: ref\n  }), children);\n\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n\n  return React.createElement(Overlay, {\n    isOpen: visible,\n    onRequestClose: handleClose,\n    isKeyboardDismissable: isKeyboardDismissable,\n    useRNModalOnAndroid: true,\n    unmountOnExit: true\n  }, React.createElement(AlertDialogContext.Provider, {\n    value: {\n      handleClose: handleClose,\n      contentSize: contentSize,\n      initialFocusRef: initialFocusRef,\n      finalFocusRef: finalFocusRef\n    }\n  }, React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _backdropFade), overlayVisible && backdropVisible && React.createElement(Backdrop, _extends({\n    onPress: function onPress() {\n      closeOnOverlayClick && handleClose();\n    }\n  }, _backdrop))), animationPreset === 'slide' ? React.createElement(Slide, _extends({\n    in: visible\n  }, _slide), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child)) : React.createElement(Fade, _extends({\n    in: visible,\n    style: StyleSheet.absoluteFill\n  }, _fade), React.createElement(FocusScope, {\n    contain: visible,\n    autoFocus: visible && !initialFocusRef,\n    restoreFocus: visible && !finalFocusRef\n  }, child))));\n};\n\nexport default memo(forwardRef(AlertDialog));","map":{"version":3,"sources":["AlertDialog.tsx"],"names":["AlertDialog","closeOnOverlayClick","isKeyboardDismissable","overlayVisible","backdropVisible","rest","bottomInset","useKeyboardBottomInset","restThemeProps","usePropsResolution","useControllableState","value","defaultValue","onChange","val","onClose","handleClose","setVisible","child","avoidKeyboard","undefined","ref","useHasResponsiveProps","contentSize","initialFocusRef","finalFocusRef","StyleSheet","absoluteFill","visible","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { forwardRef, memo } from 'react';\nimport { StyleSheet } from 'react-native';\nimport Backdrop from '../Backdrop';\nimport { Slide } from '../Transitions';\nimport { FocusScope } from '@react-native-aria/focus';\nimport { useControllableState, usePropsResolution } from '../../../hooks';\nimport { AlertDialogContext } from './Context';\nimport Box from '../../primitives/Box';\nimport type { IAlertDialogProps } from './types';\nimport { Fade } from '../Transitions';\nimport { useKeyboardBottomInset } from '../../../utils';\nimport { Overlay } from '../../primitives/Overlay';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst AlertDialog = (\n  {\n    children,\n    isOpen,\n    onClose,\n    defaultIsOpen,\n    initialFocusRef,\n    finalFocusRef,\n    avoidKeyboard,\n    closeOnOverlayClick = false,\n    isKeyboardDismissable = true,\n    overlayVisible = true,\n    backdropVisible = true,\n    animationPreset,\n    ...rest\n  }: IAlertDialogProps,\n  ref: any\n) => {\n  const bottomInset = useKeyboardBottomInset();\n  const {\n    contentSize,\n    _backdrop,\n    _backdropFade,\n    _fade,\n    _slide,\n    ...restThemeProps\n  } = usePropsResolution('AlertDialog', rest);\n\n  const [visible, setVisible] = useControllableState({\n    value: isOpen,\n    defaultValue: defaultIsOpen,\n    onChange: (val) => {\n      if (!val) onClose && onClose();\n    },\n  });\n\n  const handleClose = () => setVisible(false);\n\n  const child = (\n    <Box\n      bottom={avoidKeyboard ? bottomInset + 'px' : undefined}\n      {...restThemeProps}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(rest)) {\n    return null;\n  }\n  return (\n    <Overlay\n      isOpen={visible}\n      onRequestClose={handleClose}\n      isKeyboardDismissable={isKeyboardDismissable}\n      useRNModalOnAndroid\n      unmountOnExit\n    >\n      <AlertDialogContext.Provider\n        value={{\n          handleClose,\n          contentSize,\n          initialFocusRef,\n          finalFocusRef,\n        }}\n      >\n        <Fade in={visible} style={StyleSheet.absoluteFill} {..._backdropFade}>\n          {overlayVisible && backdropVisible && (\n            <Backdrop\n              onPress={() => {\n                closeOnOverlayClick && handleClose();\n              }}\n              {..._backdrop}\n            />\n          )}\n        </Fade>\n        {animationPreset === 'slide' ? (\n          <Slide in={visible} {..._slide}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Slide>\n        ) : (\n          <Fade in={visible} style={StyleSheet.absoluteFill} {..._fade}>\n            <FocusScope\n              contain={visible}\n              autoFocus={visible && !initialFocusRef}\n              restoreFocus={visible && !finalFocusRef}\n            >\n              {child}\n            </FocusScope>\n          </Fade>\n        )}\n      </AlertDialogContext.Provider>\n    </Overlay>\n  );\n};\n\nexport default memo(forwardRef(AlertDialog));\n"]},"metadata":{},"sourceType":"module"}