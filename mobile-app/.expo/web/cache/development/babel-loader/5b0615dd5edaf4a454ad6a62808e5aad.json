{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"_astrick\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { memo, forwardRef } from 'react';\nimport Box from \"../../primitives/Box\";\nimport Text from \"../../primitives/Text\";\nimport { useFormControlContext } from \"./useFormControl\";\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { mergeRefs } from \"../../../utils\";\nimport { combineContextAndProps } from \"../../../utils\";\n\nvar FormControlLabel = function FormControlLabel(_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var formControlContext = useFormControlContext();\n  var combinedProps = combineContextAndProps(formControlContext, props);\n\n  var _ref = React.useRef(null);\n\n  var _usePropsResolution = usePropsResolution('FormControlLabel', combinedProps, {\n    isDisabled: combinedProps.isDisabled,\n    isReadOnly: combinedProps.isReadOnly,\n    isInvalid: combinedProps.isInvalid\n  }),\n      _astrick = _usePropsResolution._astrick,\n      reslovedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var requiredAsterisk = function requiredAsterisk() {\n    return React.createElement(Text, _extends({\n      _web: {\n        accessibilityHidden: true,\n        accessibilityRole: 'presentation'\n      }\n    }, _astrick), \"*\");\n  };\n\n  var mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(function () {\n    if (_ref.current) {\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps !== null && reslovedProps !== void 0 && reslovedProps.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps === null || reslovedProps === void 0 ? void 0 : reslovedProps.nativeID, props.htmlFor]);\n  return React.createElement(Box, _extends({\n    _web: {\n      accessibilityRole: 'label'\n    }\n  }, reslovedProps, {\n    nativeID: reslovedProps === null || reslovedProps === void 0 ? void 0 : reslovedProps.labelId,\n    ref: mergedRef\n  }), children, (reslovedProps === null || reslovedProps === void 0 ? void 0 : reslovedProps.isRequired) && requiredAsterisk());\n};\n\nexport default memo(forwardRef(FormControlLabel));","map":{"version":3,"sources":["FormControlLabel.tsx"],"names":["FormControlLabel","props","formControlContext","useFormControlContext","combinedProps","combineContextAndProps","_ref","React","reslovedProps","usePropsResolution","isDisabled","isReadOnly","isInvalid","requiredAsterisk","accessibilityHidden","accessibilityRole","mergedRef","mergeRefs","memo","forwardRef"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,IAAA,IAAA,EAAA,UAAA,QAAA,OAAA;AACA,OAAA,GAAA;AACA,OAAA,IAAA;AACA,SAAA,qBAAA;AACA,SAAA,kBAAA;AAEA,SAAA,SAAA;AACA,SAAA,sBAAA;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,QAAA,GAAA,EAGpB;AAAA,MAFH,QAEG,SAFH,QAEG;AAAA,MAFYC,KAEZ;;AACH,MAAMC,kBAAkB,GAAGC,qBAA3B,EAAA;AACA,MAAMC,aAAa,GAAGC,sBAAsB,CAAA,kBAAA,EAA5C,KAA4C,CAA5C;;AACA,MAAMC,IAAI,GAAGC,KAAK,CAALA,MAAAA,CAAb,IAAaA,CAAb;;AACA,4BAAuCE,kBAAkB,CAAA,kBAAA,EAAA,aAAA,EAGvD;AACEC,IAAAA,UAAU,EAAEN,aAAa,CAD3B,UAAA;AAEEO,IAAAA,UAAU,EAAEP,aAAa,CAF3B,UAAA;AAGEQ,IAAAA,SAAS,EAAER,aAAa,CAH1B;AAAA,GAHuD,CAAzD;AAAA,MAAM,QAAN,uBAAM,QAAN;AAAA,MAAqBI,aAArB;;AAWA,MAAMK,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WACvB,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,MAAA,IAAI,EAAE;AACJC,QAAAA,mBAAmB,EADf,IAAA;AAGJC,QAAAA,iBAAiB,EAAE;AAHf;AADR,KAAA,EAAA,QAAA,CAAA,EADF,GACE,CADuB;AAAA,GAAzB;;AAYA,MAAMC,SAAS,GAAGC,SAAS,CAAC,CAAA,IAAA,EAA5B,GAA4B,CAAD,CAA3B;AACAV,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,QAAID,IAAI,CAAR,OAAA,EAAkB;AAEhB,UAAIL,KAAK,CAAT,OAAA,EAAmB;AACjBK,QAAAA,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,GAAuBL,KAAK,CAA5BK,OAAAA;AADF,OAAA,MAEO,IAAIE,aAAJ,KAAA,IAAIA,IAAAA,aAAJ,KAAA,KAAA,CAAIA,IAAAA,aAAa,CAAjB,QAAA,EAA6B;AAClCF,QAAAA,IAAI,CAAJA,OAAAA,CAAAA,OAAAA,GAAuBE,aAAa,CAApCF,QAAAA;AACD;AACF;AARHC,GAAAA,EASG,CAACC,aAAD,KAAA,IAACA,IAAAA,aAAD,KAAA,KAAA,CAACA,GAAD,KAAA,CAACA,GAAAA,aAAa,CAAd,QAAA,EAA0BP,KAAK,CATlCM,OASG,CATHA;AAWA,SACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA,QAAA,CAAA;AACE,IAAA,IAAI,EAAE;AAEJQ,MAAAA,iBAAiB,EAAE;AAFf;AADR,GAAA,EAAA,aAAA,EAAA;AAME,IAAA,QAAQ,EAAEP,aAAF,KAAA,IAAEA,IAAAA,aAAF,KAAA,KAAA,CAAEA,GAAF,KAAA,CAAEA,GAAAA,aAAa,CANzB,OAAA;AAOE,IAAA,GAAG,EAAEQ;AAPP,GAAA,CAAA,EAAA,QAAA,EAUG,CAAA,aAAa,KAAb,IAAA,IAAA,aAAa,KAAA,KAAb,CAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAb,UAAA,KAA6BH,gBAXlC,EACE,CADF;AA1CF,CAAA;;AAyDA,eAAeK,IAAI,CAACC,UAAU,CAA9B,gBAA8B,CAAX,CAAnB","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport Box from '../../primitives/Box';\nimport Text from '../../primitives/Text';\nimport { useFormControlContext } from './useFormControl';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IFormControlLabelProps } from './types';\nimport { mergeRefs } from '../../../utils';\nimport { combineContextAndProps } from '../../../utils';\n\nconst FormControlLabel = (\n  { children, ...props }: IFormControlLabelProps,\n  ref: any\n) => {\n  const formControlContext = useFormControlContext();\n  const combinedProps = combineContextAndProps(formControlContext, props);\n  const _ref = React.useRef<HTMLLabelElement>(null);\n  const { _astrick, ...reslovedProps } = usePropsResolution(\n    'FormControlLabel',\n    combinedProps,\n    {\n      isDisabled: combinedProps.isDisabled,\n      isReadOnly: combinedProps.isReadOnly,\n      isInvalid: combinedProps.isInvalid,\n      // isRequired: combinedProps.isRequired,\n    }\n  );\n\n  const requiredAsterisk = () => (\n    <Text\n      _web={{\n        accessibilityHidden: true,\n        //@ts-ignore\n        accessibilityRole: 'presentation',\n      }}\n      {..._astrick}\n    >\n      *\n    </Text>\n  );\n  const mergedRef = mergeRefs([_ref, ref]);\n  React.useEffect(() => {\n    if (_ref.current) {\n      // RN web doesn't support htmlFor for Label element yet\n      if (props.htmlFor) {\n        _ref.current.htmlFor = props.htmlFor;\n      } else if (reslovedProps?.nativeID) {\n        _ref.current.htmlFor = reslovedProps.nativeID;\n      }\n    }\n  }, [reslovedProps?.nativeID, props.htmlFor]);\n\n  return (\n    <Box\n      _web={{\n        //@ts-ignore\n        accessibilityRole: 'label',\n      }}\n      {...reslovedProps}\n      nativeID={reslovedProps?.labelId}\n      ref={mergedRef}\n    >\n      {children}\n      {reslovedProps?.isRequired && requiredAsterisk()}\n    </Box>\n  );\n};\nexport default memo(forwardRef(FormControlLabel));\n"]},"metadata":{},"sourceType":"module"}