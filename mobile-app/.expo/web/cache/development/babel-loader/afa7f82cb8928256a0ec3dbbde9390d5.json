{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\"],\n    _excluded2 = [\"handleChange\", \"handleChangeWithoutCheck\", \"numberInputStepper\", \"numberInputValue\", \"isControlled\"];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { Input } from \"../../primitives/Input\";\nimport { NumberInputContext } from \"./Context\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\n\nvar NumberInputFiled = function NumberInputFiled(_ref, ref) {\n  var isDisabled = _ref.isDisabled,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _React$useContext = React.useContext(NumberInputContext),\n      handleChange = _React$useContext.handleChange,\n      handleChangeWithoutCheck = _React$useContext.handleChangeWithoutCheck,\n      numberInputStepper = _React$useContext.numberInputStepper,\n      numberInputValue = _React$useContext.numberInputValue,\n      isControlled = _React$useContext.isControlled,\n      context = _objectWithoutProperties(_React$useContext, _excluded2);\n\n  var changeHandler = function changeHandler(inputValue) {\n    var minusIndex = inputValue.indexOf('-');\n\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n\n    var value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n\n  var blurHandler = function blurHandler() {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Input, _extends({\n    p: 0,\n    pl: 2\n  }, context, props, {\n    onBlur: function onBlur() {\n      return blurHandler();\n    },\n    isDisabled: isDisabled || context.isDisabled,\n    onChangeText: function onChangeText(inputValue) {\n      return changeHandler(inputValue);\n    },\n    keyboardType: \"numeric\",\n    value: \"\".concat(numberInputValue),\n    InputRightElement: numberInputStepper,\n    ref: ref\n  })));\n};\n\nexport default React.memo(React.forwardRef(NumberInputFiled));","map":{"version":3,"sources":["NumberInputField.tsx"],"names":["NumberInputFiled","props","context","React","changeHandler","inputValue","minusIndex","value","parseInt","handleChange","handleChangeWithoutCheck","blurHandler","useHasResponsiveProps","isDisabled","ref"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,SAAA,KAAA;AAEA,SAAA,kBAAA;AACA,SAAA,qBAAA;;AAEA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAA,GAAA,EAGpB;AAAA,MAFH,UAEG,QAFH,UAEG;AAAA,MAFcC,KAEd;;AACH,0BAUIE,KAAK,CAALA,UAAAA,CAVJ,kBAUIA,CAVJ;AAAA,MAAM,YAAN,qBAAM,YAAN;AAAA,MAAM,wBAAN,qBAAM,wBAAN;AAAA,MAAM,kBAAN,qBAAM,kBAAN;AAAA,MAAM,gBAAN,qBAAM,gBAAN;AAAA,MAAM,YAAN,qBAAM,YAAN;AAAA,MAMKD,OANL;;AAWA,MAAME,aAAa,GAAIC,SAAjBD,aAAiBC,CAAAA,UAAD,EAAqB;AACzC,QAAIC,UAAU,GAAGD,UAAU,CAAVA,OAAAA,CAAjB,GAAiBA,CAAjB;;AACA,QAAIC,UAAU,KAAK,CAAfA,CAAAA,IAAqBA,UAAU,KAAnC,CAAA,EAA2C;AACzCD,MAAAA,UAAU,GAAGA,UAAU,CAAVA,OAAAA,CAAAA,GAAAA,EAAbA,EAAaA,CAAbA;AACAA,MAAAA,UAAU,GAAG,MAAbA,UAAAA;AACD;;AACD,QAAME,KAAK,GAAGC,QAAQ,CAAA,UAAA,EAAtB,EAAsB,CAAtB;AACA,QAAA,YAAA,EAAkBC,YAAY,IAAIA,YAAY,CAA9C,KAA8C,CAA5BA,CAAlB,KACK,IAAA,KAAA,EAAWC,wBAAwB,IAAIA,wBAAwB,CAA/D,KAA+D,CAApDA,CAAX,KACAA,wBAAwB,IAAIA,wBAAwB,CAApDA,CAAoD,CAApDA;AATP,GAAA;;AAWA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAA,gBAAA,EAAsBF,YAAY,IAAIA,YAAY,CAA5BA,gBAA4B,CAA5BA;AAxBrB,GAuBH;;AAIA,MAAIG,qBAAqB,CAAzB,KAAyB,CAAzB,EAAkC;AAChC,WAAA,IAAA;AACD;;AACD,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,IAAA,CAAC,EADH,CAAA;AAEE,IAAA,EAAE,EAAE;AAFN,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;AAKE,IAAA,MAAM,EAAE;AAAA,aAAMD,WALhB,EAKU;AAAA,KALV;AAME,IAAA,UAAU,EAAEE,UAAU,IAAIX,OAAO,CANnC,UAAA;AAOE,IAAA,YAAY,EAAGG,sBAAAA,UAAD;AAAA,aAAqBD,aAAa,CAPlD,UAOkD,CAAlC;AAAA,KAPhB;AAQE,IAAA,YAAY,EARd,SAAA;AASE,IAAA,KAAK,EAAA,GAAA,MAAA,CATP,gBASO,CATP;AAUE,IAAA,iBAAiB,EAVnB,kBAAA;AAWE,IAAA,GAAG,EAAEU;AAXP,GAAA,CAAA,CADF,CADF;AAjCF,CAAA;;AAoDA,eAAeX,KAAK,CAALA,IAAAA,CAAWA,KAAK,CAALA,UAAAA,CAA1B,gBAA0BA,CAAXA,CAAf","sourcesContent":["import React from 'react';\nimport { Input } from '../../primitives/Input';\nimport type { INumberInputContext, INumberInputFieldProps } from './types';\nimport { NumberInputContext } from './Context';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst NumberInputFiled = (\n  { isDisabled, ...props }: INumberInputFieldProps,\n  ref: any\n) => {\n  const {\n    handleChange,\n    handleChangeWithoutCheck,\n    numberInputStepper,\n    numberInputValue,\n    isControlled,\n    ...context\n  }: INumberInputContext & {\n    handleChange?: (value: string | number) => void;\n    numberInputStepper?: any;\n  } = React.useContext(NumberInputContext);\n  const changeHandler = (inputValue: any) => {\n    let minusIndex = inputValue.indexOf('-');\n    if (minusIndex !== -1 && minusIndex !== 0) {\n      inputValue = inputValue.replace('-', '');\n      inputValue = '-' + inputValue;\n    }\n    const value = parseInt(inputValue, 10);\n    if (isControlled) handleChange && handleChange(value);\n    else if (value) handleChangeWithoutCheck && handleChangeWithoutCheck(value);\n    else handleChangeWithoutCheck && handleChangeWithoutCheck(0);\n  };\n  const blurHandler = () => {\n    if (numberInputValue) handleChange && handleChange(numberInputValue);\n  };\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n  return (\n    <>\n      <Input\n        p={0}\n        pl={2}\n        {...context}\n        {...props}\n        onBlur={() => blurHandler()}\n        isDisabled={isDisabled || context.isDisabled}\n        onChangeText={(inputValue: any) => changeHandler(inputValue)}\n        keyboardType=\"numeric\"\n        value={`${numberInputValue}`}\n        InputRightElement={numberInputStepper}\n        ref={ref}\n      />\n    </>\n  );\n};\n\nexport default React.memo(React.forwardRef(NumberInputFiled));\n"]},"metadata":{},"sourceType":"module"}