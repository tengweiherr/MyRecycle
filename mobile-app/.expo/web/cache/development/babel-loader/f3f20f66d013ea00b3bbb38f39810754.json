{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, createPermissionHook, EventEmitter, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport MediaLibrary from \"./ExponentMediaLibrary\";\nvar eventEmitter = new EventEmitter(MediaLibrary);\nexport { PermissionStatus };\n\nfunction arrayize(item) {\n  if (Array.isArray(item)) {\n    return item;\n  }\n\n  return item ? [item] : [];\n}\n\nfunction getId(ref) {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds) {\n  if (assetIds.some(function (id) {\n    return !id || typeof id !== 'string';\n  })) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds) {\n  if (albumIds.some(function (id) {\n    return !id || typeof id !== 'string';\n  })) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType) {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(\"Invalid mediaType: \" + mediaType);\n  }\n}\n\nfunction checkSortBy(sortBy) {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy) {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(\"Invalid sortBy key: \" + sortBy);\n  }\n}\n\nfunction dateToNumber(value) {\n  return value instanceof Date ? value.getTime() : value;\n}\n\nexport var MediaType = MediaLibrary.MediaType;\nexport var SortBy = MediaLibrary.SortBy;\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", !!MediaLibrary && 'getAssetsAsync' in MediaLibrary);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  var writeOnly,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          writeOnly = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : false;\n\n          if (MediaLibrary.requestPermissionsAsync) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(MediaLibrary.requestPermissionsAsync(writeOnly));\n\n        case 5:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPermissionsAsync() {\n  var writeOnly,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          writeOnly = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n\n          if (MediaLibrary.getPermissionsAsync) {\n            _context3.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(MediaLibrary.getPermissionsAsync(writeOnly));\n\n        case 5:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 6:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: function getMethod(options) {\n    return getPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  },\n  requestMethod: function requestMethod(options) {\n    return requestPermissionsAsync(options == null ? void 0 : options.writeOnly);\n  }\n});\nexport function presentPermissionsPickerAsync() {\n  return _regeneratorRuntime.async(function presentPermissionsPickerAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (MediaLibrary.presentPermissionsPickerAsync) {\n            _context4.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n\n        case 2:\n          _context4.next = 4;\n          return _regeneratorRuntime.awrap(MediaLibrary.presentPermissionsPickerAsync());\n\n        case 4:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createAssetAsync(localUri) {\n  var asset;\n  return _regeneratorRuntime.async(function createAssetAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          if (MediaLibrary.createAssetAsync) {\n            _context5.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n\n        case 2:\n          if (!(!localUri || typeof localUri !== 'string')) {\n            _context5.next = 4;\n            break;\n          }\n\n          throw new Error('Invalid argument \"localUri\". It must be a string!');\n\n        case 4:\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(MediaLibrary.createAssetAsync(localUri));\n\n        case 6:\n          asset = _context5.sent;\n\n          if (!Array.isArray(asset)) {\n            _context5.next = 9;\n            break;\n          }\n\n          return _context5.abrupt(\"return\", asset[0]);\n\n        case 9:\n          return _context5.abrupt(\"return\", asset);\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function saveToLibraryAsync(localUri) {\n  return _regeneratorRuntime.async(function saveToLibraryAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (MediaLibrary.saveToLibraryAsync) {\n            _context6.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(MediaLibrary.saveToLibraryAsync(localUri));\n\n        case 4:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addAssetsToAlbumAsync(assets, album) {\n  var copy,\n      assetIds,\n      albumId,\n      _args7 = arguments;\n  return _regeneratorRuntime.async(function addAssetsToAlbumAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          copy = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : true;\n\n          if (MediaLibrary.addAssetsToAlbumAsync) {\n            _context7.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n\n        case 3:\n          assetIds = arrayize(assets).map(getId);\n          albumId = getId(album);\n          checkAssetIds(assetIds);\n\n          if (!(!albumId || typeof albumId !== 'string')) {\n            _context7.next = 8;\n            break;\n          }\n\n          throw new Error('Invalid album ID. It must be a string!');\n\n        case 8:\n          if (!(Platform.OS === 'ios')) {\n            _context7.next = 12;\n            break;\n          }\n\n          _context7.next = 11;\n          return _regeneratorRuntime.awrap(MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId));\n\n        case 11:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 12:\n          _context7.next = 14;\n          return _regeneratorRuntime.awrap(MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy));\n\n        case 14:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function removeAssetsFromAlbumAsync(assets, album) {\n  var assetIds, albumId;\n  return _regeneratorRuntime.async(function removeAssetsFromAlbumAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (MediaLibrary.removeAssetsFromAlbumAsync) {\n            _context8.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n\n        case 2:\n          assetIds = arrayize(assets).map(getId);\n          albumId = getId(album);\n          checkAssetIds(assetIds);\n          _context8.next = 7;\n          return _regeneratorRuntime.awrap(MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId));\n\n        case 7:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 8:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAssetsAsync(assets) {\n  var assetIds;\n  return _regeneratorRuntime.async(function deleteAssetsAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (MediaLibrary.deleteAssetsAsync) {\n            _context9.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n\n        case 2:\n          assetIds = arrayize(assets).map(getId);\n          checkAssetIds(assetIds);\n          _context9.next = 6;\n          return _regeneratorRuntime.awrap(MediaLibrary.deleteAssetsAsync(assetIds));\n\n        case 6:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 7:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAssetInfoAsync(asset) {\n  var options,\n      assetId,\n      assetInfo,\n      _args10 = arguments;\n  return _regeneratorRuntime.async(function getAssetInfoAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          options = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {\n            shouldDownloadFromNetwork: true\n          };\n\n          if (MediaLibrary.getAssetInfoAsync) {\n            _context10.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n\n        case 3:\n          assetId = getId(asset);\n          checkAssetIds([assetId]);\n          _context10.next = 7;\n          return _regeneratorRuntime.awrap(MediaLibrary.getAssetInfoAsync(assetId, options));\n\n        case 7:\n          assetInfo = _context10.sent;\n\n          if (!Array.isArray(assetInfo)) {\n            _context10.next = 10;\n            break;\n          }\n\n          return _context10.abrupt(\"return\", assetInfo[0]);\n\n        case 10:\n          return _context10.abrupt(\"return\", assetInfo);\n\n        case 11:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAlbumsAsync() {\n  var _ref,\n      _ref$includeSmartAlbu,\n      includeSmartAlbums,\n      _args11 = arguments;\n\n  return _regeneratorRuntime.async(function getAlbumsAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _ref = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {}, _ref$includeSmartAlbu = _ref.includeSmartAlbums, includeSmartAlbums = _ref$includeSmartAlbu === void 0 ? false : _ref$includeSmartAlbu;\n\n          if (MediaLibrary.getAlbumsAsync) {\n            _context11.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n\n        case 3:\n          _context11.next = 5;\n          return _regeneratorRuntime.awrap(MediaLibrary.getAlbumsAsync({\n            includeSmartAlbums: includeSmartAlbums\n          }));\n\n        case 5:\n          return _context11.abrupt(\"return\", _context11.sent);\n\n        case 6:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAlbumAsync(title) {\n  return _regeneratorRuntime.async(function getAlbumAsync$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          if (MediaLibrary.getAlbumAsync) {\n            _context12.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n\n        case 2:\n          if (!(typeof title !== 'string')) {\n            _context12.next = 4;\n            break;\n          }\n\n          throw new Error('Album title must be a string!');\n\n        case 4:\n          _context12.next = 6;\n          return _regeneratorRuntime.awrap(MediaLibrary.getAlbumAsync(title));\n\n        case 6:\n          return _context12.abrupt(\"return\", _context12.sent);\n\n        case 7:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function createAlbumAsync(albumName, asset) {\n  var copyAsset,\n      assetId,\n      _args13 = arguments;\n  return _regeneratorRuntime.async(function createAlbumAsync$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          copyAsset = _args13.length > 2 && _args13[2] !== undefined ? _args13[2] : true;\n\n          if (MediaLibrary.createAlbumAsync) {\n            _context13.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n\n        case 3:\n          assetId = getId(asset);\n\n          if (!(Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0))) {\n            _context13.next = 6;\n            break;\n          }\n\n          throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n\n        case 6:\n          if (!(!albumName || typeof albumName !== 'string')) {\n            _context13.next = 8;\n            break;\n          }\n\n          throw new Error('Invalid argument \"albumName\". It must be a string!');\n\n        case 8:\n          if (!(assetId != null && typeof assetId !== 'string')) {\n            _context13.next = 10;\n            break;\n          }\n\n          throw new Error('Asset ID must be a string!');\n\n        case 10:\n          if (!(Platform.OS === 'ios')) {\n            _context13.next = 14;\n            break;\n          }\n\n          _context13.next = 13;\n          return _regeneratorRuntime.awrap(MediaLibrary.createAlbumAsync(albumName, assetId));\n\n        case 13:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 14:\n          _context13.next = 16;\n          return _regeneratorRuntime.awrap(MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset));\n\n        case 16:\n          return _context13.abrupt(\"return\", _context13.sent);\n\n        case 17:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function deleteAlbumsAsync(albums) {\n  var assetRemove,\n      albumIds,\n      _args14 = arguments;\n  return _regeneratorRuntime.async(function deleteAlbumsAsync$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          assetRemove = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : false;\n\n          if (MediaLibrary.deleteAlbumsAsync) {\n            _context14.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n\n        case 3:\n          albumIds = arrayize(albums).map(getId);\n          checkAlbumIds(albumIds);\n\n          if (!(Platform.OS === 'android')) {\n            _context14.next = 9;\n            break;\n          }\n\n          _context14.next = 8;\n          return _regeneratorRuntime.awrap(MediaLibrary.deleteAlbumsAsync(albumIds));\n\n        case 8:\n          return _context14.abrupt(\"return\", _context14.sent);\n\n        case 9:\n          _context14.next = 11;\n          return _regeneratorRuntime.awrap(MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove));\n\n        case 11:\n          return _context14.abrupt(\"return\", _context14.sent);\n\n        case 12:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getAssetsAsync() {\n  var assetsOptions,\n      first,\n      after,\n      album,\n      sortBy,\n      mediaType,\n      createdAfter,\n      createdBefore,\n      options,\n      _args15 = arguments;\n  return _regeneratorRuntime.async(function getAssetsAsync$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          assetsOptions = _args15.length > 0 && _args15[0] !== undefined ? _args15[0] : {};\n\n          if (MediaLibrary.getAssetsAsync) {\n            _context15.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n\n        case 3:\n          first = assetsOptions.first, after = assetsOptions.after, album = assetsOptions.album, sortBy = assetsOptions.sortBy, mediaType = assetsOptions.mediaType, createdAfter = assetsOptions.createdAfter, createdBefore = assetsOptions.createdBefore;\n          options = {\n            first: first == null ? 20 : first,\n            after: getId(after),\n            album: getId(album),\n            sortBy: arrayize(sortBy),\n            mediaType: arrayize(mediaType || [MediaType.photo]),\n            createdAfter: dateToNumber(createdAfter),\n            createdBefore: dateToNumber(createdBefore)\n          };\n\n          if (!(first != null && typeof options.first !== 'number')) {\n            _context15.next = 7;\n            break;\n          }\n\n          throw new Error('Option \"first\" must be a number!');\n\n        case 7:\n          if (!(after != null && typeof options.after !== 'string')) {\n            _context15.next = 9;\n            break;\n          }\n\n          throw new Error('Option \"after\" must be a string!');\n\n        case 9:\n          if (!(album != null && typeof options.album !== 'string')) {\n            _context15.next = 11;\n            break;\n          }\n\n          throw new Error('Option \"album\" must be a string!');\n\n        case 11:\n          if (!(after != null && Platform.OS === 'android' && isNaN(parseInt(getId(after), 10)))) {\n            _context15.next = 13;\n            break;\n          }\n\n          throw new Error('Option \"after\" must be a valid ID!');\n\n        case 13:\n          if (!(first != null && first < 0)) {\n            _context15.next = 15;\n            break;\n          }\n\n          throw new Error('Option \"first\" must be a positive integer!');\n\n        case 15:\n          options.sortBy.forEach(checkSortBy);\n          options.mediaType.forEach(checkMediaType);\n          _context15.next = 19;\n          return _regeneratorRuntime.awrap(MediaLibrary.getAssetsAsync(options));\n\n        case 19:\n          return _context15.abrupt(\"return\", _context15.sent);\n\n        case 20:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function addListener(listener) {\n  return eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n}\nexport function removeSubscription(subscription) {\n  subscription.remove();\n}\nexport function removeAllListeners() {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\nexport function getMomentsAsync() {\n  return _regeneratorRuntime.async(function getMomentsAsync$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          if (MediaLibrary.getMomentsAsync) {\n            _context16.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n\n        case 2:\n          _context16.next = 4;\n          return _regeneratorRuntime.awrap(MediaLibrary.getMomentsAsync());\n\n        case 4:\n          return _context16.abrupt(\"return\", _context16.sent);\n\n        case 5:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function migrateAlbumIfNeededAsync(album) {\n  return _regeneratorRuntime.async(function migrateAlbumIfNeededAsync$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          if (MediaLibrary.migrateAlbumIfNeededAsync) {\n            _context17.next = 2;\n            break;\n          }\n\n          return _context17.abrupt(\"return\");\n\n        case 2:\n          _context17.next = 4;\n          return _regeneratorRuntime.awrap(MediaLibrary.migrateAlbumIfNeededAsync(getId(album)));\n\n        case 4:\n          return _context17.abrupt(\"return\", _context17.sent);\n\n        case 5:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function albumNeedsMigrationAsync(album) {\n  return _regeneratorRuntime.async(function albumNeedsMigrationAsync$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          if (MediaLibrary.albumNeedsMigrationAsync) {\n            _context18.next = 2;\n            break;\n          }\n\n          return _context18.abrupt(\"return\", false);\n\n        case 2:\n          _context18.next = 4;\n          return _regeneratorRuntime.awrap(MediaLibrary.albumNeedsMigrationAsync(getId(album)));\n\n        case 4:\n          return _context18.abrupt(\"return\", _context18.sent);\n\n        case 5:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/MediaLibrary.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionResponse as EXPermissionResponse,\n  PermissionStatus,\n  PermissionExpiration,\n  PermissionHookOptions,\n  createPermissionHook,\n  EventEmitter,\n  Subscription,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport MediaLibrary from './ExponentMediaLibrary';\n\nconst eventEmitter = new EventEmitter(MediaLibrary);\n\n// @needsAudit\nexport type PermissionResponse = EXPermissionResponse & {\n  /**\n   * Indicates if your app has access to the whole or only part of the photo library. Possible values are:\n   * - `'all'` if the user granted your app access to the whole photo library\n   * - `'limited'` if the user granted your app access only to selected photos (only available on iOS 14.0+)\n   * - `'none'` if user denied or hasn't yet granted the permission\n   */\n  accessPrivileges?: 'all' | 'limited' | 'none';\n};\n\nexport type MediaTypeValue = 'audio' | 'photo' | 'video' | 'unknown';\nexport type SortByKey =\n  | 'default'\n  | 'mediaType'\n  | 'width'\n  | 'height'\n  | 'creationTime'\n  | 'modificationTime'\n  | 'duration';\nexport type SortByValue = [SortByKey, boolean] | SortByKey;\n\nexport type MediaTypeObject = {\n  audio: 'audio';\n  photo: 'photo';\n  video: 'video';\n  unknown: 'unknown';\n};\n\nexport type SortByObject = {\n  default: 'default';\n  mediaType: 'mediaType';\n  width: 'width';\n  height: 'height';\n  creationTime: 'creationTime';\n  modificationTime: 'modificationTime';\n  duration: 'duration';\n};\n\n// @needsAudit\nexport type Asset = {\n  /**\n   * Internal ID that represents an asset.\n   */\n  id: string;\n  /**\n   * Filename of the asset.\n   */\n  filename: string;\n  /**\n   * URI that points to the asset. `assets://*` (iOS), `file://*` (Android)\n   */\n  uri: string;\n  /**\n   * Media type.\n   */\n  mediaType: MediaTypeValue;\n  /**\n   * An array of media subtypes.\n   * @platform ios\n   */\n  mediaSubtypes?: MediaSubtype[];\n  /**\n   * Width of the image or video.\n   */\n  width: number;\n  /**\n   * Height of the image or video.\n   */\n  height: number;\n  /**\n   * File creation timestamp.\n   */\n  creationTime: number;\n  /**\n   * Last modification timestamp.\n   */\n  modificationTime: number;\n  /**\n   * Duration of the video or audio asset in seconds.\n   */\n  duration: number;\n  /**\n   * Album ID that the asset belongs to.\n   * @platform android\n   */\n  albumId?: string;\n};\n\n// @needsAudit\nexport type AssetInfo = Asset & {\n  /**\n   * Local URI for the asset.\n   */\n  localUri?: string;\n  /**\n   * GPS location if available.\n   */\n  location?: Location;\n  /**\n   * EXIF metadata associated with the image.\n   */\n  exif?: object;\n  /**\n   * Whether the asset is marked as favorite.\n   * @platform ios\n   */\n  isFavorite?: boolean;\n  /**\n   * This field is available only if flag `shouldDownloadFromNetwork` is set to `false`.\n   * Whether the asset is stored on the network (iCloud on iOS).\n   * @platform ios\n   */\n  isNetworkAsset?: boolean; //iOS only\n  /**\n   * Display orientation of the image. Orientation is available only for assets whose\n   * `mediaType` is `MediaType.photo`. Value will range from 1 to 8, see [EXIF orientation specification](http://sylvana.net/jpegcrop/exif_orientation.html)\n   * for more details.\n   * @platform ios\n   */\n  orientation?: number;\n};\n\n// @docsMissing\nexport type MediaSubtype =\n  | 'depthEffect'\n  | 'hdr'\n  | 'highFrameRate'\n  | 'livePhoto'\n  | 'panorama'\n  | 'screenshot'\n  | 'stream'\n  | 'timelapse';\n\n// @needsAudit\nexport type MediaLibraryAssetInfoQueryOptions = {\n  /**\n   * Whether allow the asset to be downloaded from network. Only available in iOS with iCloud assets.\n   * @default `true`\n   */\n  shouldDownloadFromNetwork?: boolean;\n};\n\n// @needsAudit\nexport type MediaLibraryAssetsChangeEvent = {\n  /**\n   * Whether the media library's changes could be described as \"incremental changes\".\n   * `true` indicates the changes are described by the `insertedAssets`, `deletedAssets` and\n   * `updatedAssets` values. `false` indicates that the scope of changes is too large and you\n   * should perform a full assets reload (eg. a user has changed access to individual assets in the\n   * media library).\n   */\n  hasIncrementalChanges: boolean;\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been inserted to the library.\n   */\n  insertedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been deleted from the library.\n   */\n  deletedAssets?: Asset[];\n  /**\n   * Available only if `hasIncrementalChanges` is `true`.\n   * Array of [`Asset`](#asset)s that have been updated or completed downloading from network\n   * storage (iCloud on iOS).\n   */\n  updatedAssets?: Asset[];\n};\n\n// @docsMissing\nexport type Location = {\n  latitude: number;\n  longitude: number;\n};\n\n// @needsAudit\nexport type Album = {\n  /**\n   * Album ID.\n   */\n  id: string;\n  /**\n   * Album title.\n   */\n  title: string;\n  /**\n   * Estimated number of assets in the album.\n   */\n  assetCount: number;\n  /**\n   * The type of the assets album.\n   * @platform ios\n   */\n  type?: AlbumType;\n  /**\n   * Apply only to albums whose type is `'moment'`. Earliest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  startTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Latest creation timestamp of all\n   * assets in the moment.\n   * @platform ios\n   */\n  endTime: number;\n  /**\n   * Apply only to albums whose type is `'moment'`. Approximated location of all\n   * assets in the moment.\n   * @platform ios\n   */\n  approximateLocation?: Location;\n  /**\n   * Apply only to albums whose type is `'moment'`. Names of locations grouped\n   * in the moment.\n   * @platform ios\n   */\n  locationNames?: string[];\n};\n\n// @docsMissing\nexport type AlbumType = 'album' | 'moment' | 'smartAlbum';\n\n// @docsMissing\nexport type AlbumsOptions = {\n  includeSmartAlbums?: boolean;\n};\n\n// @needsAudit\nexport type AssetsOptions = {\n  /**\n   * The maximum number of items on a single page.\n   * @default `20`\n   */\n  first?: number;\n  /**\n   * Asset ID of the last item returned on the previous page.\n   */\n  after?: AssetRef;\n  /**\n   * [Album](#album) or its ID to get assets from specific album.\n   */\n  album?: AlbumRef;\n  /**\n   * An array of [`SortByValue`](#sortbyvalue)s or a single `SortByValue` value. By default, all\n   * keys are sorted in descending order, however you can also pass a pair `[key, ascending]` where\n   * the second item is a `boolean` value that means whether to use ascending order. Note that if\n   * the `SortBy.default` key is used, then `ascending` argument will not matter. Earlier items have\n   * higher priority when sorting out the results.\n   * If empty, this method will use the default sorting that is provided by the platform.\n   */\n  sortBy?: SortByValue[] | SortByValue;\n  /**\n   * An array of [MediaTypeValue](#expomedialibrarymediatypevalue)s or a single `MediaTypeValue`.\n   * @default `MediaType.photo`\n   */\n  mediaType?: MediaTypeValue[] | MediaTypeValue;\n  /**\n   * `Date` object or Unix timestamp in milliseconds limiting returned assets only to those that\n   * were created after this date.\n   */\n  createdAfter?: Date | number;\n  /**\n   * Similarly as `createdAfter`, but limits assets only to those that were created before specified\n   * date.\n   */\n  createdBefore?: Date | number;\n};\n\n// @needsAudit\nexport type PagedInfo<T> = {\n  /**\n   * A page of [`Asset`](#asset)s fetched by the query.\n   */\n  assets: T[];\n  /**\n   * ID of the last fetched asset. It should be passed as `after` option in order to get the\n   * next page.\n   */\n  endCursor: string;\n  /**\n   * Whether there are more assets to fetch.\n   */\n  hasNextPage: boolean;\n  /**\n   * Estimated total number of assets that match the query.\n   */\n  totalCount: number;\n};\n\n// @docsMissing\nexport type AssetRef = Asset | string;\n\n// @docsMissing\nexport type AlbumRef = Album | string;\n\nexport {\n  PermissionStatus,\n  PermissionExpiration,\n  EXPermissionResponse,\n  PermissionHookOptions,\n  Subscription,\n};\n\nfunction arrayize(item: any): any[] {\n  if (Array.isArray(item)) {\n    return item;\n  }\n  return item ? [item] : [];\n}\n\nfunction getId(ref: any): string | undefined {\n  if (typeof ref === 'string') {\n    return ref;\n  }\n  return ref ? ref.id : undefined;\n}\n\nfunction checkAssetIds(assetIds: any): void {\n  if (assetIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Asset ID must be a string!');\n  }\n}\n\nfunction checkAlbumIds(albumIds: any): void {\n  if (albumIds.some((id) => !id || typeof id !== 'string')) {\n    throw new Error('Album ID must be a string!');\n  }\n}\n\nfunction checkMediaType(mediaType: any): void {\n  if (Object.values(MediaType).indexOf(mediaType) === -1) {\n    throw new Error(`Invalid mediaType: ${mediaType}`);\n  }\n}\n\nfunction checkSortBy(sortBy: any): void {\n  if (Array.isArray(sortBy)) {\n    checkSortByKey(sortBy[0]);\n\n    if (typeof sortBy[1] !== 'boolean') {\n      throw new Error('Invalid sortBy array argument. Second item must be a boolean!');\n    }\n  } else {\n    checkSortByKey(sortBy);\n  }\n}\n\nfunction checkSortByKey(sortBy: any): void {\n  if (Object.values(SortBy).indexOf(sortBy) === -1) {\n    throw new Error(`Invalid sortBy key: ${sortBy}`);\n  }\n}\n\nfunction dateToNumber(value?: Date | number): number | undefined {\n  return value instanceof Date ? value.getTime() : value;\n}\n\n// @needsAudit\n/**\n * Possible media types.\n */\nexport const MediaType: MediaTypeObject = MediaLibrary.MediaType;\n\n// @needsAudit\n/**\n * Supported keys that can be used to sort `getAssetsAsync` results.\n */\nexport const SortBy: SortByObject = MediaLibrary.SortBy;\n\n// @needsAudit\n/**\n * Returns whether the Media Library API is enabled on the current device.\n * @return A promise which fulfils with a `boolean`, indicating whether the Media Library API is\n * available on the current device.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!MediaLibrary && 'getAssetsAsync' in MediaLibrary;\n}\n\n// @needsAudit @docsMissing\n/**\n * Asks the user to grant permissions for accessing media in user's media library.\n * @param writeOnly\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function requestPermissionsAsync(\n  writeOnly: boolean = false\n): Promise<PermissionResponse> {\n  if (!MediaLibrary.requestPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'requestPermissionsAsync');\n  }\n  return await MediaLibrary.requestPermissionsAsync(writeOnly);\n}\n\n// @needsAudit @docsMissing\n/**\n * Checks user's permissions for accessing media library.\n * @param writeOnly\n * @return A promise that fulfils with [`PermissionResponse`](#permissionresponse) object.\n */\nexport async function getPermissionsAsync(writeOnly: boolean = false): Promise<PermissionResponse> {\n  if (!MediaLibrary.getPermissionsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getPermissionsAsync');\n  }\n  return await MediaLibrary.getPermissionsAsync(writeOnly);\n}\n\n// @needsAudit\n/**\n * Check or request permissions to access the media library.\n * This uses both `requestPermissionsAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = MediaLibrary.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook<PermissionResponse, { writeOnly?: boolean }>({\n  // TODO(cedric): permission requesters should have an options param or a different requester\n  getMethod: (options) => getPermissionsAsync(options?.writeOnly),\n  requestMethod: (options) => requestPermissionsAsync(options?.writeOnly),\n});\n\n// @needsAudit\n/**\n * __Available only on iOS >= 14.__ Allows the user to update the assets that your app has access to.\n * The system modal is only displayed if the user originally allowed only `limited` access to their\n * media library, otherwise this method is a no-op.\n * @return A promise that either rejects if the method is unavailable (meaning the device is not\n * running iOS >= 14), or resolves to `void`.\n * > __Note:__ This method doesn't inform you if the user changes which assets your app has access to.\n * For that information, you need to subscribe for updates to the user's media library using [addListener(listener)](#medialibraryaddlistenerlistener).\n * If `hasIncrementalChanges` is `false`, the user changed their permissions.\n */\nexport async function presentPermissionsPickerAsync(): Promise<void> {\n  if (!MediaLibrary.presentPermissionsPickerAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'presentPermissionsPickerAsync');\n  }\n  return await MediaLibrary.presentPermissionsPickerAsync();\n}\n\n// @needsAudit\n/**\n * Creates an asset from existing file. The most common use case is to save a picture taken by [Camera](../camera).\n * This method requires `CAMERA_ROLL` permission.\n *\n * @example\n * ```js\n * const { uri } = await Camera.takePictureAsync();\n * const asset = await MediaLibrary.createAssetAsync(uri);\n * ```\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`\n * @return A promise which fulfils with an object representing an [`Asset`](#asset).\n */\nexport async function createAssetAsync(localUri: string): Promise<Asset> {\n  if (!MediaLibrary.createAssetAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAssetAsync');\n  }\n\n  if (!localUri || typeof localUri !== 'string') {\n    throw new Error('Invalid argument \"localUri\". It must be a string!');\n  }\n  const asset = await MediaLibrary.createAssetAsync(localUri);\n\n  if (Array.isArray(asset)) {\n    // Android returns an array with asset, we need to pick the first item\n    return asset[0];\n  }\n  return asset;\n}\n\n// @needsAudit\n/**\n * Saves the file at given `localUri` to the user's media library. Unlike [`createAssetAsync()`](#medialibrarycreateassetasynclocaluri),\n * This method doesn't return created asset.\n * On __iOS 11+__, it's possible to use this method without asking for `CAMERA_ROLL` permission,\n * however then yours `Info.plist` should have `NSPhotoLibraryAddUsageDescription` key.\n * @param localUri A URI to the image or video file. It must contain an extension. On Android it\n * must be a local path, so it must start with `file:///`.\n */\nexport async function saveToLibraryAsync(localUri: string): Promise<void> {\n  if (!MediaLibrary.saveToLibraryAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'saveToLibraryAsync');\n  }\n  return await MediaLibrary.saveToLibraryAsync(localUri);\n}\n\n// @needsAudit\n/**\n * Adds array of assets to the album.\n *\n * On Android, by default it copies assets from the current album to provided one, however it's also\n * possible to move them by passing `false` as `copyAssets` argument.In case they're copied you\n * should keep in mind that `getAssetsAsync` will return duplicated assets.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @param copy __Android only.__ Whether to copy assets to the new album instead of move them.\n * Defaults to `true`.\n * @return Returns promise which fulfils with `true` if the assets were successfully added to\n * the album.\n */\nexport async function addAssetsToAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef,\n  copy: boolean = true\n): Promise<boolean> {\n  if (!MediaLibrary.addAssetsToAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'addAssetsToAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n\n  if (!albumId || typeof albumId !== 'string') {\n    throw new Error('Invalid album ID. It must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId);\n  }\n  return await MediaLibrary.addAssetsToAlbumAsync(assetIds, albumId, !!copy);\n}\n\n// @needsAudit\n/**\n * Removes given assets from album.\n *\n * On Android, album will be automatically deleted if there are no more assets inside.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @param album An [Album](#album) or its ID.\n * @return Returns promise which fulfils with `true` if the assets were successfully removed from\n * the album.\n */\nexport async function removeAssetsFromAlbumAsync(\n  assets: AssetRef[] | AssetRef,\n  album: AlbumRef\n): Promise<boolean> {\n  if (!MediaLibrary.removeAssetsFromAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'removeAssetsFromAlbumAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n  const albumId = getId(album);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.removeAssetsFromAlbumAsync(assetIds, albumId);\n}\n\n// @needsAudit\n/**\n * Deletes assets from the library. On iOS it deletes assets from all albums they belong to, while\n * on Android it keeps all copies of them (album is strictly connected to the asset). Also, there is\n * additional dialog on iOS that requires user to confirm this action.\n * @param assets An array of [Asset](#asset) or their IDs.\n * @return Returns promise which fulfils with `true` if the assets were successfully deleted.\n */\nexport async function deleteAssetsAsync(assets: AssetRef[] | AssetRef): Promise<boolean> {\n  if (!MediaLibrary.deleteAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAssetsAsync');\n  }\n\n  const assetIds = arrayize(assets).map(getId);\n\n  checkAssetIds(assetIds);\n  return await MediaLibrary.deleteAssetsAsync(assetIds);\n}\n\n// @needsAudit\n/**\n * Provides more information about an asset, including GPS location, local URI and EXIF metadata.\n * @param asset An [Asset](#asset) or its ID.\n * @param options\n * @return [AssetInfo](#assetinfo) object, which is an `Asset` extended by an additional fields.\n */\nexport async function getAssetInfoAsync(\n  asset: AssetRef,\n  options: MediaLibraryAssetInfoQueryOptions = { shouldDownloadFromNetwork: true }\n): Promise<AssetInfo> {\n  if (!MediaLibrary.getAssetInfoAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetInfoAsync');\n  }\n\n  const assetId = getId(asset);\n\n  checkAssetIds([assetId]);\n\n  const assetInfo = await MediaLibrary.getAssetInfoAsync(assetId, options);\n\n  if (Array.isArray(assetInfo)) {\n    // Android returns an array with asset info, we need to pick the first item\n    return assetInfo[0];\n  }\n  return assetInfo;\n}\n\n// @needsAudit\n/**\n * Queries for user-created albums in media gallery.\n * @return A promise which fulfils with an array of [`Album`](#asset)s. Depending on Android version,\n * root directory of your storage may be listed as album titled `\"0\"` or unlisted at all.\n */\nexport async function getAlbumsAsync({ includeSmartAlbums = false }: AlbumsOptions = {}): Promise<\n  Album[]\n> {\n  if (!MediaLibrary.getAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumsAsync');\n  }\n  return await MediaLibrary.getAlbumsAsync({ includeSmartAlbums });\n}\n\n// @needsAudit\n/**\n * Queries for an album with a specific name.\n * @param title Name of the album to look for.\n * @return An object representing an [`Album`](#album), if album with given name exists, otherwise\n * returns `null`.\n */\nexport async function getAlbumAsync(title: string): Promise<Album> {\n  if (!MediaLibrary.getAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAlbumAsync');\n  }\n  if (typeof title !== 'string') {\n    throw new Error('Album title must be a string!');\n  }\n  return await MediaLibrary.getAlbumAsync(title);\n}\n\n// @needsAudit\n/**\n * Creates an album with given name and initial asset. The asset parameter is required on Android,\n * since it's not possible to create empty album on this platform. On Android, by default it copies\n * given asset from the current album to the new one, however it's also possible to move it by\n * passing `false` as `copyAsset` argument.\n * In case it's copied you should keep in mind that `getAssetsAsync` will return duplicated asset.\n * @param albumName Name of the album to create.\n * @param asset An [Asset](#asset) or its ID (required on Android).\n * @param copyAsset __Android Only.__ Whether to copy asset to the new album instead of move it.\n * Defaults to `true`.\n * @return Newly created [`Album`](#album).\n */\nexport async function createAlbumAsync(\n  albumName: string,\n  asset?: AssetRef,\n  copyAsset: boolean = true\n): Promise<Album> {\n  if (!MediaLibrary.createAlbumAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'createAlbumAsync');\n  }\n\n  const assetId = getId(asset);\n\n  if (Platform.OS === 'android' && (typeof assetId !== 'string' || assetId.length === 0)) {\n    // it's not possible to create empty album on Android, so initial asset must be provided\n    throw new Error('MediaLibrary.createAlbumAsync must be called with an asset on Android.');\n  }\n  if (!albumName || typeof albumName !== 'string') {\n    throw new Error('Invalid argument \"albumName\". It must be a string!');\n  }\n  if (assetId != null && typeof assetId !== 'string') {\n    throw new Error('Asset ID must be a string!');\n  }\n\n  if (Platform.OS === 'ios') {\n    return await MediaLibrary.createAlbumAsync(albumName, assetId);\n  }\n  return await MediaLibrary.createAlbumAsync(albumName, assetId, !!copyAsset);\n}\n\n// @needsAudit\n/**\n * Deletes given albums from the library. On Android by default it deletes assets belonging to given\n * albums from the library. On iOS it doesn't delete these assets, however it's possible to do by\n * passing `true` as `deleteAssets`.\n * @param albums An array of [`Album`](#asset)s or their IDs.\n * @param assetRemove __iOS Only.__ Whether to also delete assets belonging to given albums.\n * Defaults to `false`.\n * @return Returns a promise which fulfils with `true` if the albums were successfully deleted from\n * the library.\n */\nexport async function deleteAlbumsAsync(\n  albums: AlbumRef[] | AlbumRef,\n  assetRemove: boolean = false\n): Promise<boolean> {\n  if (!MediaLibrary.deleteAlbumsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'deleteAlbumsAsync');\n  }\n\n  const albumIds = arrayize(albums).map(getId);\n\n  checkAlbumIds(albumIds);\n  if (Platform.OS === 'android') {\n    return await MediaLibrary.deleteAlbumsAsync(albumIds);\n  }\n  return await MediaLibrary.deleteAlbumsAsync(albumIds, !!assetRemove);\n}\n\n// @needsAudit\n/**\n * Fetches a page of assets matching the provided criteria.\n * @param assetsOptions\n * @return A promise that fulfils with to [`PagedInfo`](#pagedinfo) object with array of [`Asset`](#asset)s.\n */\nexport async function getAssetsAsync(assetsOptions: AssetsOptions = {}): Promise<PagedInfo<Asset>> {\n  if (!MediaLibrary.getAssetsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getAssetsAsync');\n  }\n\n  const { first, after, album, sortBy, mediaType, createdAfter, createdBefore } = assetsOptions;\n\n  const options = {\n    first: first == null ? 20 : first,\n    after: getId(after),\n    album: getId(album),\n    sortBy: arrayize(sortBy),\n    mediaType: arrayize(mediaType || [MediaType.photo]),\n    createdAfter: dateToNumber(createdAfter),\n    createdBefore: dateToNumber(createdBefore),\n  };\n\n  if (first != null && typeof options.first !== 'number') {\n    throw new Error('Option \"first\" must be a number!');\n  }\n  if (after != null && typeof options.after !== 'string') {\n    throw new Error('Option \"after\" must be a string!');\n  }\n  if (album != null && typeof options.album !== 'string') {\n    throw new Error('Option \"album\" must be a string!');\n  }\n\n  if (after != null && Platform.OS === 'android' && isNaN(parseInt(getId(after) as string, 10))) {\n    throw new Error('Option \"after\" must be a valid ID!');\n  }\n\n  if (first != null && first < 0) {\n    throw new Error('Option \"first\" must be a positive integer!');\n  }\n\n  options.sortBy.forEach(checkSortBy);\n  options.mediaType.forEach(checkMediaType);\n\n  return await MediaLibrary.getAssetsAsync(options);\n}\n\n// @needsAudit\n/**\n * Subscribes for updates in user's media library.\n * @param listener A callback that is fired when any assets have been inserted or deleted from the\n * library, or when the user changes which assets they're allowing access to. On Android it's\n * invoked with an empty object. On iOS it's invoked with [`MediaLibraryAssetsChangeEvent`](#medialibraryassetschangeevent)\n * object.\n * @return An [`Subscription`](#subscription) object that you can call `remove()` on when you would\n * like to unsubscribe the listener.\n */\nexport function addListener(\n  listener: (event: MediaLibraryAssetsChangeEvent) => void\n): Subscription {\n  return eventEmitter.addListener(MediaLibrary.CHANGE_LISTENER_NAME, listener);\n}\n\n// @docsMissing\nexport function removeSubscription(subscription: Subscription): void {\n  subscription.remove();\n}\n\n// @needsAudit\n/**\n * Removes all listeners.\n */\nexport function removeAllListeners(): void {\n  eventEmitter.removeAllListeners(MediaLibrary.CHANGE_LISTENER_NAME);\n}\n\n// @needsAudit\n/**\n * Fetches a list of moments, which is a group of assets taken around the same place\n * and time.\n * @return An array of [albums](#album) whose type is `moment`.\n * @platform ios\n */\nexport async function getMomentsAsync() {\n  if (!MediaLibrary.getMomentsAsync) {\n    throw new UnavailabilityError('MediaLibrary', 'getMomentsAsync');\n  }\n\n  return await MediaLibrary.getMomentsAsync();\n}\n\n// @needsAudit\n/**\n * Moves album content to the special media directories on **Android R** or **above** if needed.\n * Those new locations are in line with the Android `scoped storage` - so your application won't\n * lose write permission to those directories in the future.\n *\n * This method does nothing if:\n * - app is running on **iOS**, **web** or **Android below R**\n * - app has **write permission** to the album folder\n *\n * The migration is possible when the album contains only compatible files types.\n * For instance, movies and pictures are compatible with each other, but music and pictures are not.\n * If automatic migration isn't possible, the function will be rejected.\n * In that case, you can use methods from the `expo-file-system` to migrate all your files manually.\n *\n * # Why do you need to migrate files?\n * __Android R__ introduced a lot of changes in the storage system. Now applications can't save\n * anything to the root directory. The only available locations are from the `MediaStore` API.\n * Unfortunately, the media library stored albums in folders for which, because of those changes,\n * the application doesn't have permissions anymore. However, it doesn't mean you need to migrate\n * all your albums. If your application doesn't add assets to albums, you don't have to migrate.\n * Everything will work as it used to. You can read more about scoped storage in [the Android documentation](https://developer.android.com/about/versions/11/privacy/storage).\n *\n * @param album An [Album](#album) or its ID.\n * @return A promise which fulfils to `void`.\n */\nexport async function migrateAlbumIfNeededAsync(album: AlbumRef): Promise<void> {\n  if (!MediaLibrary.migrateAlbumIfNeededAsync) {\n    return;\n  }\n\n  return await MediaLibrary.migrateAlbumIfNeededAsync(getId(album));\n}\n\n// @needsAudit\n/**\n * Checks if the album should be migrated to a different location. In other words, it checks if the\n * application has the write permission to the album folder. If not, it returns `true`, otherwise `false`.\n * > Note: For **Android below R**, **web** or **iOS**, this function always returns `false`.\n * @param album An [Album](#album) or its ID.\n * @return Returns a promise which fulfils with `true` if the album should be migrated.\n */\nexport async function albumNeedsMigrationAsync(album: AlbumRef): Promise<boolean> {\n  if (!MediaLibrary.albumNeedsMigrationAsync) {\n    return false;\n  }\n\n  return await MediaLibrary.albumNeedsMigrationAsync(getId(album));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}