{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"],\n    _excluded2 = [\"isTruncated\", \"noOfLines\", \"bold\", \"italic\", \"sub\", \"highlight\", \"underline\", \"strikeThrough\", \"fontFamily\", \"fontWeight\", \"fontStyle\", \"_hover\", \"fontSize\", \"numberOfLines\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from \"../../../hooks/useThemeProps\";\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from \"../../../utils/mergeRefs\";\nimport { makeStyledComponent } from \"../../../utils/styled\";\nimport { useResolvedFontFamily } from \"../../../hooks/useResolvedFontFamily\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport { useHasResponsiveProps } from \"../../../hooks/useHasResponsiveProps\";\nvar StyledText = makeStyledComponent(NativeText);\nvar TextAncestorContext = React.createContext(false);\n\nvar Text = function Text(_ref2, ref) {\n  var children = _ref2.children,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var hasTextAncestor = React.useContext(TextAncestorContext);\n\n  var _usePropsResolution = usePropsResolution('Text', props, {}, {\n    resolveResponsively: ['noOfLines', 'numberOfLines'],\n    componentTheme: hasTextAncestor ? {} : undefined\n  }),\n      isTruncated = _usePropsResolution.isTruncated,\n      noOfLines = _usePropsResolution.noOfLines,\n      bold = _usePropsResolution.bold,\n      italic = _usePropsResolution.italic,\n      sub = _usePropsResolution.sub,\n      highlight = _usePropsResolution.highlight,\n      underline = _usePropsResolution.underline,\n      strikeThrough = _usePropsResolution.strikeThrough,\n      propFontFamily = _usePropsResolution.fontFamily,\n      propFontWeight = _usePropsResolution.fontWeight,\n      propFontStyle = _usePropsResolution.fontStyle,\n      _hover = _usePropsResolution._hover,\n      fontSize = _usePropsResolution.fontSize,\n      numberOfLines = _usePropsResolution.numberOfLines,\n      reslovedProps = _objectWithoutProperties(_usePropsResolution, _excluded2);\n\n  var _ref = useRef(null);\n\n  var _useHover = useHover({}, _hover ? _ref : null),\n      isHovered = _useHover.isHovered;\n\n  var fontFamily = propFontFamily;\n  var fontStyle = italic ? 'italic' : propFontStyle;\n  var fontWeight = bold ? 'bold' : propFontWeight;\n  var resolvedFontFamily = useResolvedFontFamily({\n    fontFamily: fontFamily,\n    fontWeight: fontWeight !== null && fontWeight !== void 0 ? fontWeight : hasTextAncestor ? undefined : 400,\n    fontStyle: fontStyle !== null && fontStyle !== void 0 ? fontStyle : hasTextAncestor ? undefined : 'normal'\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  var propsToSpread = _objectSpread(_objectSpread(_objectSpread({}, reslovedProps), {}, {\n    numberOfLines: numberOfLines || noOfLines ? numberOfLines || noOfLines : isTruncated ? 1 : undefined\n  }, resolvedFontFamily), {}, {\n    bg: highlight ? 'warning.300' : reslovedProps.bg,\n    textDecorationLine: underline && strikeThrough ? 'underline line-through' : underline ? 'underline' : strikeThrough ? 'line-through' : reslovedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref])\n  }, isHovered && _hover);\n\n  return hasTextAncestor ? React.createElement(StyledText, propsToSpread, children) : React.createElement(TextAncestorContext.Provider, {\n    value: true\n  }, React.createElement(StyledText, propsToSpread, children));\n};\n\nexport default memo(forwardRef(Text));","map":{"version":3,"sources":["index.tsx"],"names":["StyledText","makeStyledComponent","TextAncestorContext","React","Text","props","hasTextAncestor","fontFamily","fontWeight","fontStyle","reslovedProps","usePropsResolution","resolveResponsively","componentTheme","undefined","_ref","useRef","isHovered","useHover","_hover","italic","bold","resolvedFontFamily","useResolvedFontFamily","useHasResponsiveProps","propsToSpread","numberOfLines","isTruncated","bg","highlight","textDecorationLine","underline","strikeThrough","fontSize","sub","ref","mergeRefs","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { memo, forwardRef, useRef } from 'react';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { ITextProps } from './types';\nimport { useHover } from '@react-native-aria/interactions';\nimport { mergeRefs } from '../../../utils/mergeRefs';\nimport { makeStyledComponent } from '../../../utils/styled';\nimport { useResolvedFontFamily } from '../../../hooks/useResolvedFontFamily';\nimport { Text as NativeText } from 'react-native';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\n\nconst StyledText = makeStyledComponent(NativeText);\n// To have a RN compatible behaviour, we'll inherit parent text styles as base style\nconst TextAncestorContext = React.createContext(false);\n\nconst Text = ({ children, ...props }: ITextProps, ref: any) => {\n  const hasTextAncestor = React.useContext(TextAncestorContext);\n\n  const {\n    isTruncated,\n    noOfLines,\n    bold,\n    italic,\n    sub,\n    highlight,\n    underline,\n    strikeThrough,\n    fontFamily: propFontFamily,\n    fontWeight: propFontWeight,\n    fontStyle: propFontStyle,\n    _hover,\n    fontSize,\n    numberOfLines,\n    ...reslovedProps\n  } = usePropsResolution(\n    'Text',\n    props,\n    {},\n    {\n      resolveResponsively: ['noOfLines', 'numberOfLines'],\n      // We override the component base theme if text has an ancestor.\n      componentTheme: hasTextAncestor ? {} : undefined,\n    }\n  );\n\n  const _ref = useRef(null);\n  // TODO: might have to add this condition\n  const { isHovered } = useHover({}, _hover ? _ref : null);\n  // const { isHovered } = useHover({}, _ref);\n  let fontFamily = propFontFamily;\n  const fontStyle = italic ? 'italic' : propFontStyle;\n  const fontWeight = bold ? 'bold' : propFontWeight;\n\n  const resolvedFontFamily = useResolvedFontFamily({\n    fontFamily,\n    fontWeight: fontWeight ?? (hasTextAncestor ? undefined : 400),\n    fontStyle: fontStyle ?? (hasTextAncestor ? undefined : 'normal'),\n  });\n\n  if (resolvedFontFamily) {\n    fontFamily = resolvedFontFamily;\n  }\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  const propsToSpread = {\n    ...reslovedProps,\n    numberOfLines:\n      numberOfLines || noOfLines\n        ? numberOfLines || noOfLines\n        : isTruncated\n        ? 1\n        : undefined,\n    ...resolvedFontFamily,\n    bg: highlight ? 'warning.300' : reslovedProps.bg,\n    textDecorationLine:\n      underline && strikeThrough\n        ? 'underline line-through'\n        : underline\n        ? 'underline'\n        : strikeThrough\n        ? 'line-through'\n        : reslovedProps.textDecorationLine,\n    fontSize: sub ? 10 : fontSize,\n    ref: mergeRefs([ref, _ref]),\n    ...(isHovered && _hover),\n  };\n\n  return hasTextAncestor ? (\n    <StyledText {...propsToSpread}>{children}</StyledText>\n  ) : (\n    <TextAncestorContext.Provider value={true}>\n      <StyledText {...propsToSpread}>{children}</StyledText>\n    </TextAncestorContext.Provider>\n  );\n};\n\nexport default memo(forwardRef(Text));\nexport type { ITextProps };\n"]},"metadata":{},"sourceType":"module"}