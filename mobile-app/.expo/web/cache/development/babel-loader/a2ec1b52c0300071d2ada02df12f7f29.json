{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useCallback, useRef, useEffect, useState } from 'react';\nimport { askAsync, getAsync } from \"./Permissions\";\nexport function usePermissions(type) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var isMounted = useRef(true);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _options$ask = options.ask,\n      ask = _options$ask === void 0 ? false : _options$ask,\n      _options$get = options.get,\n      get = _options$get === void 0 ? true : _options$get;\n  var types = Array.isArray(type) ? type : [type];\n  var askPermissions = useCallback(function () {\n    return askAsync.apply(void 0, _toConsumableArray(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  var getPermissions = useCallback(function () {\n    return getAsync.apply(void 0, _toConsumableArray(types)).then(function (response) {\n      if (isMounted.current) {\n        setData(response);\n      }\n    });\n  }, [type]);\n  useEffect(function () {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n  useEffect(function () {\n    isMounted.current = true;\n    return function () {\n      isMounted.current = false;\n    };\n  }, []);\n  return [data, askPermissions, getPermissions];\n}","map":{"version":3,"sources":["../src/PermissionsHooks.ts"],"names":[],"mappings":";;AAAA,SAAS,WAAT,EAAsB,MAAtB,EAA8B,SAA9B,EAAyC,QAAzC,QAAyD,OAAzD;AAEA,SAAS,QAAT,EAAmB,QAAnB;AAmBA,OAAM,SAAU,cAAV,CACJ,IADI,EAE4B;AAAA,MAAhC,OAAgC,uEAAF,EAAE;AAEhC,MAAM,SAAS,GAAG,MAAM,CAAC,IAAD,CAAxB;;AACA,kBAAwB,QAAQ,EAAhC;AAAA;AAAA,MAAO,IAAP;AAAA,MAAa,OAAb;;AACA,qBAAoC,OAApC,CAAQ,GAAR;AAAA,MAAQ,GAAR,6BAAc,KAAd;AAAA,qBAAoC,OAApC,CAAqB,GAArB;AAAA,MAAqB,GAArB,6BAA2B,IAA3B;AACA,MAAM,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,IAAd,IAAsB,IAAtB,GAA6B,CAAC,IAAD,CAA3C;AAMA,MAAM,cAAc,GAAG,WAAW,CAChC;AAAA,WACE,QAAQ,MAAR,4BAAY,KAAZ,GAAmB,IAAnB,CAAwB,UAAC,QAAD,EAAa;AACnC,UAAI,SAAS,CAAC,OAAd,EAAuB;AACrB,QAAA,OAAO,CAAC,QAAD,CAAP;AACD;AACF,KAJD,CADF;AAAA,GADgC,EAOhC,CAAC,IAAD,CAPgC,CAAlC;AAUA,MAAM,cAAc,GAAG,WAAW,CAChC;AAAA,WACE,QAAQ,MAAR,4BAAY,KAAZ,GAAmB,IAAnB,CAAwB,UAAC,QAAD,EAAa;AACnC,UAAI,SAAS,CAAC,OAAd,EAAuB;AACrB,QAAA,OAAO,CAAC,QAAD,CAAP;AACD;AACF,KAJD,CADF;AAAA,GADgC,EAOhC,CAAC,IAAD,CAPgC,CAAlC;AAUA,EAAA,SAAS,CAAC,YAAK;AACb,QAAI,GAAJ,EAAS;AACP,MAAA,cAAc;AACf;;AAED,QAAI,CAAC,GAAD,IAAQ,GAAZ,EAAiB;AACf,MAAA,cAAc;AACf;AACF,GARQ,EAQN,CAAC,GAAD,EAAM,cAAN,EAAsB,GAAtB,EAA2B,cAA3B,CARM,CAAT;AAUA,EAAA,SAAS,CAAC,YAAK;AACb,IAAA,SAAS,CAAC,OAAV,GAAoB,IAApB;AACA,WAAO,YAAK;AACV,MAAA,SAAS,CAAC,OAAV,GAAoB,KAApB;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA,SAAO,CAAC,IAAD,EAAO,cAAP,EAAuB,cAAvB,CAAP;AACD","sourcesContent":["import { useCallback, useRef, useEffect, useState } from 'react';\n\nimport { askAsync, getAsync } from './Permissions';\nimport { PermissionResponse, PermissionType } from './Permissions.types';\n\n/**\n * Get or ask permission for protected functionality within the app.\n * It returns the permission response after fetching or asking it.\n * The hook fetches the permissions when rendered, by default.\n * To ask the user permission, use the `askPermission` callback or `ask` option.\n *\n * @see https://docs.expo.io/versions/latest/sdk/permissions/\n * @example\n * ```tsx\n * const [permission, askPermission, getPermission] = usePermissions(Permissions.CAMERA);\n *\n * return permission?.granted\n *   ? <Camera ... />\n *   : <Button onPress={askPermission} />;\n * ```\n */\nexport function usePermissions(\n  type: PermissionType | PermissionType[],\n  options: PermissionsOptions = {}\n): [PermissionResponse | undefined, () => Promise<void>, () => Promise<void>] {\n  const isMounted = useRef(true);\n  const [data, setData] = useState<PermissionResponse>();\n  const { ask = false, get = true } = options;\n  const types = Array.isArray(type) ? type : [type];\n\n  // note: its intentional to listen to `type`, not `types`.\n  // when `type` is casted to an array, it possible creates a new one on every render.\n  // to prevent unnecessary function instances we need to listen to the \"raw\" value.\n\n  const askPermissions = useCallback(\n    () =>\n      askAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  const getPermissions = useCallback(\n    () =>\n      getAsync(...types).then((response) => {\n        if (isMounted.current) {\n          setData(response);\n        }\n      }),\n    [type]\n  );\n\n  useEffect(() => {\n    if (ask) {\n      askPermissions();\n    }\n\n    if (!ask && get) {\n      getPermissions();\n    }\n  }, [ask, askPermissions, get, getPermissions]);\n\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [data, askPermissions, getPermissions];\n}\n\nexport interface PermissionsOptions {\n  /** If it should ask the permissions when mounted, defaults to `false` */\n  ask?: boolean;\n  /** If it should fetch information about the permissions when mounted, defaults to `true` */\n  get?: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}