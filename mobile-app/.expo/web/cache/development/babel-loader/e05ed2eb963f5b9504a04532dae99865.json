{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { NativeBaseProvider, Box, Button, ScrollView, Stack, Center, Accordion, Text, Divider, List, Image, PresenceTransition, Pressable, VStack, Spinner, HStack, InfoOutlineIcon } from 'native-base';\nimport DataTable from \"react-native-paper/lib/module/components/DataTable/DataTable\";\nimport { useNavigation } from '@react-navigation/native';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { LoadingContext } from \"../../context/context\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var ConversionRates = function ConversionRates() {\n  var Navigation = useNavigation();\n\n  var _useContext = useContext(LoadingContext),\n      setIsLoading = _useContext.setIsLoading;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  useEffect(function () {\n    setIsLoading(true);\n    fetch(\"http://192.168.100.31:3000/\" + 'material/', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (results) {\n      setData(results);\n      setIsLoading(false);\n    }).catch(function (err) {\n      setIsLoading(false);\n      setError(err);\n    });\n  }, []);\n\n  var _renderMaterial = function _renderMaterial() {\n    return data.map(function (item, index) {\n      return _jsxs(DataTable.Row, {\n        style: index % 2 !== 0 && {\n          backgroundColor: \"#f8f8f8\"\n        },\n        children: [_jsx(DataTable.Cell, {\n          children: index === 0 && _jsx(Text, {\n            children: \"Per kilogram\"\n          })\n        }), _jsx(DataTable.Cell, {\n          children: item.material\n        }), _jsx(DataTable.Cell, {\n          numeric: true,\n          children: item.conversion_rate\n        })]\n      }, index);\n    });\n  };\n\n  return _jsx(ImageBackground, {\n    source: require(\"../../public/assets/bg-1-100.jpg\"),\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: _jsx(ScrollView, {\n      children: _jsxs(VStack, {\n        p: \"5\",\n        space: 3,\n        children: [_jsxs(_Fragment, {\n          children: [_jsxs(DataTable, {\n            backgroundColor: \"#fff\",\n            borderColor: \"#f8f8f8\",\n            style: {\n              borderWidth: 2,\n              borderRadius: 12\n            },\n            children: [_jsxs(DataTable.Header, {\n              style: {\n                backgroundColor: \"#1FAA8F\",\n                borderTopEndRadius: 12,\n                borderTopStartRadius: 12\n              },\n              children: [_jsx(DataTable.Title, {\n                children: _jsx(Text, {\n                  color: \"#fff\",\n                  bold: true,\n                  fontSize: \"md\",\n                  children: \"Unit\"\n                })\n              }), _jsx(DataTable.Title, {\n                children: _jsx(Text, {\n                  color: \"#fff\",\n                  bold: true,\n                  fontSize: \"md\",\n                  children: \"Materials\"\n                })\n              }), _jsx(DataTable.Title, {\n                numeric: true,\n                children: _jsx(Text, {\n                  color: \"#fff\",\n                  bold: true,\n                  fontSize: \"md\",\n                  children: \"MR Points\"\n                })\n              })]\n            }), data && _renderMaterial()]\n          }), _jsxs(HStack, {\n            py: \"2\",\n            space: 3,\n            justifyContent: \"flex-start\",\n            alignItems: \"flex-start\",\n            children: [_jsx(InfoOutlineIcon, {\n              size: \"xs\",\n              color: \"yellow.500\"\n            }), _jsx(VStack, {\n              children: _jsx(Text, {\n                fontSize: \"xs\",\n                width: \"xs\",\n                children: \"Please be informed that the conversion rates will be reviewed and adjusted without prior notification if necessary.\"\n              })\n            })]\n          })]\n        }), _jsx(Button, {\n          rounded: \"full\",\n          background: \"#FC8B10\",\n          borderColor: \"#FC8B10\",\n          borderWidth: \"1\",\n          onPress: function onPress() {\n            return Navigation.goBack();\n          },\n          children: _jsx(Text, {\n            testID: \"goback\",\n            bold: true,\n            color: \"white\",\n            children: \"Go Back\"\n          })\n        })]\n      })\n    })\n  });\n};\nexport default (function () {\n  return _jsx(NativeBaseProvider, {\n    children: _jsx(Center, {\n      flex: 1,\n      children: _jsx(ConversionRates, {})\n    })\n  });\n});","map":{"version":3,"sources":["/Users/weiherr/Desktop/FYP/MyRecycle/mobile-app/screens/reward/ConversionRates.js"],"names":["React","useContext","useEffect","useState","NativeBaseProvider","Box","Button","ScrollView","Stack","Center","Accordion","Text","Divider","List","Image","PresenceTransition","Pressable","VStack","Spinner","HStack","InfoOutlineIcon","useNavigation","LoadingContext","ConversionRates","Navigation","setIsLoading","data","setData","error","setError","fetch","method","headers","then","response","json","results","catch","err","_renderMaterial","map","item","index","backgroundColor","material","conversion_rate","require","width","height","borderWidth","borderRadius","borderTopEndRadius","borderTopStartRadius","goBack"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport { NativeBaseProvider, Box, Button, ScrollView, Stack, Center, Accordion, Text, Divider, List, Image, PresenceTransition, Pressable, VStack, Spinner, HStack, InfoOutlineIcon } from 'native-base';\nimport { DataTable } from 'react-native-paper';\nimport { useNavigation } from '@react-navigation/native';\nimport { ImageBackground } from \"react-native\";\nimport { API_URL } from \"@env\";\nimport { LoadingContext } from \"../../context/context\";\n\n\nexport const ConversionRates = () => {\n  \n  const Navigation = useNavigation(); \n\n  const { setIsLoading } = useContext(LoadingContext);\n\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  //load reward data\n  useEffect(() => {\n\n    setIsLoading(true);\n\n    fetch(API_URL + 'material/', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(results => {\n        setData(results);\n        setIsLoading(false);\n      })\n      .catch(err => {\n        setIsLoading(false);\n        setError(err);\n      });\n\n  }, []);\n\n  const _renderMaterial = () => {\n    return data.map((item, index) => {\n      return (\n        <DataTable.Row key={index} style={index%2!==0 && {backgroundColor:\"#f8f8f8\"}}>\n          <DataTable.Cell>{index === 0 && <Text>Per kilogram</Text>}</DataTable.Cell>\n          <DataTable.Cell>{item.material}</DataTable.Cell>\n          <DataTable.Cell numeric>{item.conversion_rate}</DataTable.Cell>\n        </DataTable.Row>\n      )\n    })\n  }\n\n  return (\n    <ImageBackground source={require(\"../../public/assets/bg-1-100.jpg\")} style={{width:\"100%\", height:\"100%\"}}>\n      <ScrollView>\n      <VStack p=\"5\" space={3}>\n        <>\n        <DataTable backgroundColor=\"#fff\" borderColor=\"#f8f8f8\" style={{borderWidth:2, borderRadius:12}}>\n          <DataTable.Header style={{backgroundColor:\"#1FAA8F\", borderTopEndRadius:12, borderTopStartRadius:12}}>\n            <DataTable.Title>\n              <Text color=\"#fff\" bold fontSize=\"md\">Unit</Text>\n            </DataTable.Title>\n            <DataTable.Title>\n              <Text color=\"#fff\" bold fontSize=\"md\">Materials</Text>\n            </DataTable.Title>\n            <DataTable.Title numeric>\n              <Text color=\"#fff\" bold fontSize=\"md\">MR Points</Text>\n            </DataTable.Title>\n          </DataTable.Header>\n          {data && _renderMaterial()}\n        </DataTable>\n        <HStack py=\"2\" space={3} justifyContent=\"flex-start\" alignItems=\"flex-start\">\n          <InfoOutlineIcon size=\"xs\" color=\"yellow.500\"/>\n            <VStack>\n              <Text fontSize=\"xs\" width=\"xs\">\n              Please be informed that the conversion rates will be reviewed and adjusted without prior notification if necessary.\n              </Text>\n              {/* <Pressable onPress={()=>Navigation.navigate('GeneralWaste')}>\n                 <Text fontSize=\"xs\" color=\"#1FAA8F\" italic={true}>See here</Text>\n              </Pressable> */}\n            </VStack>\n        </HStack>\n        </>\n        <Button rounded=\"full\" background=\"#FC8B10\" borderColor=\"#FC8B10\" borderWidth=\"1\" onPress={()=>Navigation.goBack()}>\n          <Text testID=\"goback\" bold color=\"white\">Go Back</Text>\n        </Button>\n      </VStack>\n      </ScrollView>\n    </ImageBackground>\n  );\n};\n\n\nexport default () => {\n    return (\n      <NativeBaseProvider>\n        <Center flex={1}>\n          <ConversionRates />\n        </Center>\n      </NativeBaseProvider>\n    )\n};\n"]},"metadata":{},"sourceType":"module"}